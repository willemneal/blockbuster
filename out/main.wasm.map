{"version":3,"sources":["~lib/rt/common.ts","~lib/shared/typeinfo.ts","~lib/rt/stub.ts","~lib/util/string.ts","../out/bignum/utils.ts","../out/bignum/globals.ts","../out/near.ts","~lib/arraybuffer.ts","~lib/util/error.ts","~lib/typedarray.ts","../out/json/decoder.ts","~lib/string.ts","../out/main.ts","~lib/memory.ts","~lib/util/memory.ts","../out/main.near.ts","~lib/number.ts","~lib/util/number.ts","~lib/builtins.ts","~lib/array.ts","~lib/rt.ts","../out/json/encoder.ts"],"names":[],"mappings":"ilMEaE,AAAI,EAAO,SAAe,EAI1B,AAAI,AAFS,AAAC,AADJ,EAAS,KACC,AAAW,EAAM,WAAK,GAAW,KAExC,AADK,IACiB,MAGjC,AAAI,AADc,AAAI,EAAa,AADjB,AAAC,AAAC,EAAS,GAAM,KAAU,KAAa,eAE3B,KAC7B,AAAI,AAAY,IAAe,KAAG,IAGtC,AAAS,IAET,AADY,AAAkB,EAAM,KACvB,KACb,EAAe,KACR,KAgCA,gBK/CL,AAAI,EAAc,MAAuB,MAAgC,cACzE,AAAa,AAAQ,AAAS,EAAU,KAAW,iDACvC,8BACZ,EAAiB,KACjB,EAAkB,0BE8EZ,EAAQ,yBH9EkB,EAAe,gDKwB8B,AAAtE,AAAkB,EAA0B,MAA0B,MAW7E,AAAI,EAAY,AAAK,OAAqB,AAAD,IACmB,AAA3C,EAA0B,AAAC,EAAc,sDG3CnD,AAAK,AAAC,EAAM,KAAZ,KACK,WAAQ,EAAS,kBAC3B,WAIF,AAAI,AAAC,EAAO,QACH,EAAK,MACV,AAAW,EAAW,AAAU,QAChC,AAAW,EAAQ,GAAG,AAAU,EAAO,SACvC,AAAW,EAAQ,GAAG,AAAU,EAAO,SACvC,AAAW,EAAO,GAAI,AAAU,EAAM,SACtC,EAAO,KAAI,EAAQ,KAAI,EAAK,SAE9B,AAAI,EAAI,KACN,AAAW,EAAU,AAAU,QAC/B,AAAW,EAAO,GAAG,AAAU,EAAM,SAC1B,EAAO,KAAlB,EAAQ,MAEV,AAAI,EAAI,KACN,AAAW,EAAM,AAAU,QAChB,EAAO,KAAlB,EAAQ,MAEV,AAAI,EAAI,KACN,AAAW,EAAM,AAAU,QAChB,EAAO,KAAlB,EAAQ,MAEV,AAAI,EAAI,KACI,MAAQ,EAAS,cAE7B,EAKF,AAAI,EAAK,KACP,QAAQ,EAAO,aAGX,AAAI,AAAU,OACJ,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBAC3B,EAAK,OACE,EAAK,MAEV,AAAW,EAAM,AAAU,AADvB,AAAU,EAAM,QACY,GAAf,EAAK,OAEtB,AAAW,EAAO,GAAG,AAAU,AAD3B,AAAU,EAAM,QACgB,GAAf,EAAK,OAE1B,AAAW,EAAO,GAAG,AAAU,AAD3B,AAAU,EAAM,QACgB,GAAf,EAAK,OAE1B,AAAW,EAAO,GAAI,AAAU,AAD5B,AAAU,EAAM,QACiB,GAAf,EAAK,OAC3B,EAAO,KAAI,EAAQ,KAAI,EAAK,YAK9B,AAAI,AAAU,OACJ,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBAC3B,EAAK,OACE,EAAK,MAEV,AAAW,EAAM,AAAU,AADvB,AAAU,EAAM,QACY,GAAf,EAAK,OAEtB,AAAW,EAAO,GAAG,AAAU,AAD3B,AAAU,EAAM,QACgB,GAAf,EAAK,OAE1B,AAAW,EAAO,GAAG,AAAU,AAD3B,AAAU,EAAM,QACgB,GAAf,EAAK,OAE1B,AAAW,EAAO,GAAI,AAAU,AAD5B,AAAU,EAAM,QACiB,GAAf,EAAK,OAC3B,EAAO,KAAI,EAAQ,KAAI,EAAK,YAK9B,AAAI,AAAU,OACJ,WAAQ,EAAS,kBAC3B,EAAK,OACE,EAAK,MAEV,AAAW,EAAM,AAAS,AADtB,AAAU,EAAM,QACW,GAAd,EAAK,OAEtB,AAAW,EAAO,GAAG,AAAS,AAD1B,AAAU,EAAM,QACe,GAAd,EAAK,OAE1B,AAAW,EAAO,GAAG,AAAS,AAD1B,AAAU,EAAM,QACe,GAAd,EAAK,OAE1B,AAAW,EAAO,GAAI,AAAS,AAD3B,AAAU,EAAM,QACgB,GAAd,EAAK,OAC3B,EAAO,KAAI,EAAQ,KAAI,EAAK,WAQpC,AAAI,EAAI,KACI,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,mBAE7B,AAAI,EAAI,KACI,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,mBAE7B,AAAI,EAAI,KACI,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,kBACjB,WAAQ,EAAS,mBAE7B,AAAI,EAAI,KACI,WAAQ,EAAS,kBACjB,WAAQ,EAAS,mBAE7B,AAAI,EAAI,KACI,MAAQ,EAAS,oBDtH7B,EAAkB,IC8HpB,AAAI,AD9HM,IAAK,KC+Hf,AACM,EAAmB,EAAO,GAAK,GAA/B,EAAM,GAAK,MACb,AAAO,EAAM,EAAK,IAClB,GAGJ,AAAI,EAAO,KACT,AAAI,AAAC,EAAM,GAAM,AAAC,EAAO,QACvB,AAAO,EAAO,KACZ,AAAI,AAAC,KACL,AAAE,OACQ,WAAQ,EAAS,wBAEtB,EAAK,MACV,AAAW,EAAM,AAAU,QAC3B,EAAQ,KACR,EAAQ,KACR,EAAQ,YAGL,IACK,WAAQ,EAAS,kBAC3B,AAAE,YAGJ,AAAI,AAAC,EAAM,GAAM,AAAC,EAAO,QACvB,AAAO,AAAC,EAAO,GAAK,KAClB,AAAI,AAAC,KACL,AAAU,EAAO,AAAE,QAAG,AAAS,EAAM,eAEhC,EAAK,MAEV,AAAW,EAAO,AADlB,EAAK,MACgB,AAAU,EAAM,gBAGlC,IACL,AAAU,EAAO,AAAE,QAAG,AAAS,EAAM,yBHxHvC,AAAI,OAAwB,uBAI5B,AAAI,AADiB,AAFC,IAAe,KAEL,AADT,IAAgB,WAEd,eAEzB,AAAY,AADF,AAA2B,EAAS,QACV,EAAyB,IAC7D,AAAY,EAAyB,GAAU,EAA0B,QAClE,iBAZA,AAAe,EAAM,GAA4B,GAAsB,uDL6mBtD,EAAS,uDAkS1B,EAAc,qDHh9BvB,AAAkB,IAClB,AAAW,EAA0B,AAAC,EAAU,MAChD,AAAW,EAA0B,AAAC,EAAU,QACzC,IAAO,AAAC,AAAU,AAAe,KAAQ,AAAe,eAC7D,AAAE,OAAK,EAAQ,KAAG,EAAQ,iBAErB,iBQqFL,AAAI,EAAS,aAAc,IAC3B,AAAI,AAAiB,KAAjB,aAAwC,IAC5C,AAAiB,MACjB,AAAI,AAAc,IAAd,aAAmC,IAEhC,AAAC,AAAY,EAAM,EAAG,EAAO,EAAG,8BDvDtB,GAA6B,IAAO,KAAS,IAAQ,8BKxB1E,AAAI,EAAQ,OACA,IAAiC,wCAIrC,EAAgB,EAAM,oBLuBT,GAA2B,IAAO,KAAQ,AAAC,IAAQ,MAAS,0BAI5D,GAA2B,wBKxBhD,AAAI,EAAQ,OACJ,IAAiC,oCAInC,EAAc,WE8ElB,AAAI,EAAQ,OACV,AAAI,EAAQ,MACH,AAAY,EAAG,EAAG,EAAQ,KAG1B,AAAY,EADX,AAAY,EAAG,EAAG,EAAQ,MACT,EAAQ,OAGnC,AAAI,EAAQ,QACH,AAAY,EAAG,EAAG,EAAQ,OAG1B,AAAY,EADX,AAAY,EAAG,EAAI,EAAQ,QACV,EAAQ,eA0BrC,AAAU,UACH,EAAO,QAGZ,AAAQ,EAAM,OACd,AAAM,AAFE,EAAM,OAWd,AAAW,EAAS,AAAC,AADrB,EAAU,KACqB,IAAI,AAJN,EAAM,AAH1B,EAAI,IAGoC,OAIJ,AAAC,AAHjB,EAAM,AAH1B,EAAI,IAGoC,OAGQ,WAG3D,AAAI,EAAO,MAET,AAAS,EAAM,MACf,AAFS,EAAM,MAKf,AAAW,EAAS,AAAC,AAFrB,EAAU,KAEqB,IADlB,AAAU,EAAM,AAAC,EAAa,WAI7C,AAAI,EAAO,KAGT,AAAW,EAAS,AAFpB,EAAU,GAEqB,IADlB,AAAU,EAAM,AAAC,EAAc,WAK5C,AAAW,EAAS,AAFpB,EAAU,GAEqB,IADnB,AAAc,EAAd,WAlDd,AAAI,EAAQ,YACV,AAAI,EAAQ,UACH,AAAY,EAAI,EAAI,EAAQ,UAG5B,AAAY,EADX,AAAY,EAAI,EAAI,EAAQ,UACV,EAAQ,YAGpC,AAAI,EAAQ,aACH,AAAY,EAAI,EAAI,EAAQ,YAG5B,AAAY,EADX,AAAY,EAAI,EAAI,EAAQ,aACV,EAAQ,sBA4CtC,AAAU,UACH,EAAO,SAQZ,AAAS,AAHD,AAHA,AAAQ,EAAM,AADd,EAAM,QACY,UAGd,OAGC,MACb,AAAS,EAAI,MAIb,AAAc,AAAe,EAAM,AAAC,AAH3B,AAJD,EAAI,OAIC,IAGoC,SAIjD,AAAW,EAAS,AAAC,AADrB,EAAU,KACqB,IAAI,EAAU,AAH/B,AAAe,EAAM,AAAC,AAH3B,EAAI,IAGoC,OAGQ,OAMzD,AAAW,EAAS,AAAC,AADrB,EAAU,KACqB,IAAI,AAJzB,AAAe,EAAM,AAAC,EAAa,OAIA,AAHnC,AAAe,EAAM,AAAC,EAAa,OAGY,WAG3D,AAAW,EAAQ,GAAU,SA2E7B,AAAI,AAAC,KAAc,OAMnB,AAAI,EAHJ,AAAI,AADO,EAAQ,OAIf,AAHc,EAAC,kBAOjB,AAlEW,AAiEL,AAAQ,AADC,AAAe,AADf,OACwB,KACb,GAAG,MACZ,EAAO,KAIxB,AAAY,AADN,AAAQ,AADC,AAAe,IAAS,KACb,GAAG,MA3DV,EA4DK,KAE1B,AAAI,IAAM,AAAW,EAAK,MAEG,AAAtB,OASI,AAAO,SDjNT,AAAK,wBNnDK,GAA8B,IAAO,KAAQ,wBAI5C,GAA4B,sBKVnC,EAAgB,2BJ2DpB,AAAC,AAAU,EAAM,yBD5CN,GAA6B,uBK5BnD,AAAK,OAKC,AAAO,EAAQ,qBAJf,AAAO,EAAQ,oBACf,EAAmB,SACZ,IAKE,EAAiB,eRlBhB,AAAL,UD8KF,AAAQ,MAAb,EAAgB,EAAI,KAQlB,AAAI,AAPM,AACR,EACA,EACA,EACA,OACA,YAES,AAAQ,UACV,IAEU,EAAe,aAAlC,OAXqB,AAAE,aAaX,iBAsBd,AAAI,AADM,EAAyB,EAAU,EAAQ,SAE5C,MAGT,AAAY,AADF,EAAe,SACE,QAA4B,IAChD,+FSjOoB,gEL0ER,yDAXF,OACI,SACH,YDwBN,AAAL,OAKP,AAAI,EAAc,AAAK,QAAsC,eAChB,AAA7B,KAAiB,SCF7B,AAAI,QAAwB,aAClB,AAAD,IAEoC,AAAtC,QAAkB,aAwOmD,EAAZ,EAAY,GAArE,EAAsC,EAAY,GAAlD,EAAmB,EAAY,GAA/B,EAAY,SApOnB,AAAO,QAAuB,aAA0B,eACT,AAAxC,QAAkB,iCA6NlB,EAAkB,QACrB,YD9OI,AAAL,UF9EmD,AAA7C,KAAiB,AAAkB,YIugBhD,AAAI,EAAM,KAA+B,AAArB,OACpB,AAAa,IACb,AAAU,AAAQ,EAAc,GAAG,MACnC,AAAa,MACb,AAAO,EAAS,KAEd,AAAI,EADyB,SAAN,UACd,OACP,AAAW,AAAM,EAAN,GAAc,KACzB,EAAU,IACL,AAAI,AAAY,EAAK,MAAjB,EAAK,OACd,AAAO,EAAS,GAAK,mBACoC,SAA9C,AAAM,EAAN,GAAwC,QAAkB,GAA5C,AAAC,EAAK,GAAO,OACtC,EAAU,IACL,AAAI,AAAY,EAAK,MAAjB,EAAK,OACd,AAAO,EAAS,GAAK,mBAGH,SAIP,AAAM,EAAN,GALT,AAAC,EAA4B,GAAM,GACzB,QAAkB,GAAO,IACnC,EAAgB,SAAN,QAAkB,GAAQ,KACnC,EAAe,SAAN,QAAkB,KAC1B,OACqC,GAAhB,QAEzB,AAAW,AAAM,AADjB,EAAU,KACC,GAAc,AAAS,AAAC,EAAK,IAAf,QACzB,EAAU,IAEV,AAAO,EAAS,GAAK,mBAGH,SAFP,AAAM,EAAN,GACT,AAAC,EAA2B,GAAO,GACzB,QAAkB,GAAQ,IACnC,EAAe,SAAN,QAAkB,QAE9B,EAAU,YAGd,AAAO,AAAU,EAAV,mBAEP,AAAY,AADF,AAAQ,EAAQ,MACT,EAAK,IACtB,AAAO,IACsB,AAAtB,ST/hBT,AAAI,EAAO,AADG,AAAO,AADT,AAAkB,EAAM,aAIlC,AAAY,AADC,AAAQ,EAAM,SACP,EAAK,IACzB,AAAM,KAEN,EAAe,MAEV,UWvBL,ECyLA,AAAI,ADzLW,KC0Lf,AAAU,EAAM,KAChB,AAAU,EAAO,GAAI,GAAG,KACxB,AAAI,EAAK,KAET,AAAU,EAAO,GAAG,KACpB,AAAU,EAAO,GAAG,KACpB,AAAU,EAAO,GAAI,GAAG,KACxB,AAAU,EAAO,GAAI,GAAG,KACxB,AAAI,EAAK,KACT,AAAU,EAAO,GAAG,KACpB,AAAU,EAAO,GAAI,GAAG,KACxB,AAAI,EAAK,KAWT,AAAW,AAPH,AADO,EAAC,GAAO,KACvB,KAOiB,AAHF,AAAgB,MAAhB,WAIf,AAAW,EAAO,AAPlB,EAAK,GACA,MAMiB,GAAG,KACzB,AAAI,EAAK,KACT,AAAW,EAAO,GAAG,KACrB,AAAW,EAAO,GAAG,KACrB,AAAW,EAAO,GAAI,GAAI,KAC1B,AAAW,EAAO,GAAI,GAAG,KACzB,AAAI,EAAK,KACT,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAI,GAAI,KAC1B,AAAW,EAAO,GAAI,GAAI,KAC1B,AAAW,EAAO,GAAI,GAAI,KAC1B,AAAW,EAAO,GAAI,GAAI,KAI1B,AAAQ,AADJ,AAAK,AAAC,EAAO,GAAb,KACJ,KACA,EAAK,KAGL,AAAe,GAAW,AAAC,GAAY,QAChC,EAAK,MACV,AAAW,EAAM,KACjB,AAAW,EAAO,GAAG,KACrB,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAI,KACtB,EAAK,KACL,EAAQ,eKtPZ,AAAI,EAAU,AADI,OACY,MAC5B,AAAI,EAAU,MAAkB,MAAgC,cAIhE,AAAY,AADE,AAAU,AAFV,AAAkB,OAEC,AADf,EAAW,SAEP,GAAa,EAAG,EAAc,KACpD,AAAI,EAAY,KACd,AAAa,EAA0B,AAAS,OAChD,EAA+C,MAEjD,EAAgD,gBAoLhD,AAAW,EAAyB,AADpB,AADH,OACY,KACsB,IAC/C,AACe,KAAiB,AAAC,EAAiB,IAAe,AAAS,OAI1E,EAAe,SACR,aA+YP,AAAI,AADY,KAAe,KACf,KAAU,eAC1B,AAAgB,OAChB,AAAI,AAAC,KAAkB,AAAa,iBAEpC,AAAa,MACb,AAAa,IACb,IACa,IAAS,EAAY,OAAlC,EAAqC,EAAI,KAEvC,AAAI,EADI,AAAa,EAAY,AAAC,EAAY,iCAC1B,AAAU,IAAV,MAFwB,AAAE,WAIhD,AAAa,IACb,AAAa,AAA2B,AAAC,EAAS,AAAS,EAAT,IAAuB,GAAG,QACvE,AAAQ,MAAb,EAAgB,EAAI,KAElB,AAAI,EADI,AAAa,EAAY,AAAC,EAAY,iCAG5C,AACE,EAA4B,AAAC,EAAiB,IAC9C,EACA,AAJa,MAIM,KAErB,EAAU,MAEZ,AAAI,IACF,AACE,EAA4B,AAAC,EAAiB,IAC9C,EACA,EAAiB,KAEnB,EAAU,MAjBiB,AAAE,WAqBjC,AAAI,EADI,AAAa,EAAY,AAAC,EAAoB,iCAEpD,AACE,EAA4B,AAAC,EAAiB,IAC9C,EACA,AAAO,IAAoC,cAGxC,UAvKmB,EAAc,+BA9alC,EAAQ,WACd,AAEQ,IAAwB,cAGhC,EAAe,YCfjB,AAAa,AAHD,AAAQ,EAAmB,MAGnB,AAAS,AADhB,AAAQ,AADJ,EAAiB,KACD,WAEjC,EAA+C,KAC/C,EAAgD,KAChD,AAAW,EAA0B,KACrC,AAAI,IAAM,AAAY,EAAQ,EAAM,KAC7B,QVgOD,AAAI,AADQ,AADD,MACQ,KACP,KAER,AAAI,EAAc,AADV,EAAO,GAAS,KACE,GAAtB,EAAQ,MACR,AAAQ,EAAO,GAAe,OAGtC,AAAsB,mBAAC,OAAM,YAC7B,AAAO,AAAc,EAAQ,KAAtB,EAAS,OAAiB,mBAC1B,OC9PX,AAAO,EAAa,qBAEpB,AAAU,AAAQ,AAAC,AADT,EAAO,OACa,GAAM,GAAG,MACvC,AAAK,IAMH,AAAW,EAAK,AAAa,AADf,AAAC,AAFf,EAAQ,OAEc,IAAS,KACf,AAAC,AAFH,AAAC,EAAS,GAAM,KAEP,QALvB,AAAW,EAAK,MAOW,AAAtB,SAvBP,AAAI,AAAC,OAEH,AAAW,AADL,AAAQ,EAAG,MACD,KAChB,AAAW,EAAK,MAGhB,AAAW,AADL,AAAQ,EAAG,MACD,MAEW,AAAtB,0BAVkC,iBD8NrC,AAAW,MAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAgB,IAAxB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACA,AAAS,MACT,AAAS,MACT,AAAS,MAG2B,AAA7B,AADQ,AADN,IACM,EAAK,GAAS,EAAK,IAAQ,EAAK,SAGrC,GAAmC,MAAoB,0BApErE,AAAO,IAAmB,GAAe,OAAI,eAC7C,AAAiB,UACjB,AAAiC,QAG7B,AAAO,AADI,MACI,KAAM,eACrB,AAAI,AAAQ,GAAe,IAAvB,KACA,AAAQ,AACJ,AAAO,YAA2B,WAA+B,GACjE,QAAuB,GAAa,OAExC,AAAI,aACO,IAEX,EAAiB,KACV,EAAiB,sBACrB,AAAI,AAAQ,GAAgB,IAAxB,KACP,AAAI,KACc,ESpKN,eTsKZ,AAAI,QAAuB,EAAa,MACpC,EACI,AACI,AAAO,YAA2B,WAA+B,GACjE,QAAuB,GAAa,mBAIhD,EAAiB,SACjB,AAAa,wBArErB,IACA,SAAqB,mBACrB,IACA,AAAO,IAAmB,GAAe,OAAI,qBA7B7C,AAAI,IAAmB,GAAe,OAC3B,IAEX,AAAU,YACV,SAAqB,8BACrB,AAAI,KAAwB,MACxB,KACA,IAEA,AAAgB,MAChB,AAAO,IAAmB,GAAe,OACrC,AAAK,IAGD,AAAY,KAFZ,AAAO,IAAmB,GAAe,OAAI,gBAIjD,IACA,SAEJ,AAAO,IAAmB,GAAe,OAAI,gBAEjD,WACO,QAWP,AAAI,IAAmB,GAAe,OAC3B,IAEX,AAAU,YACV,SAAqB,8BACrB,AAAI,KAAuB,MACvB,KACA,IAEA,AAAgB,MAChB,AAAO,IAAmB,GAAe,OACrC,AAAK,IAGD,AAAY,KAFZ,AAAO,IAAmB,GAAe,OAAI,gBAIjD,SAEJ,AAAO,IAAmB,GAAe,OAAI,gBAEjD,WACO,KAIP,AAAI,IAAmB,GAAe,OAC3B,IAEX,KAAuB,QAAoB,YACpC,YAyIF,AAAQ,MAAb,EAAgB,EAAI,OAChB,AAAO,EAAe,IAAM,OAAiB,GAAe,IAAM,iBADtC,4BAxBhC,AAAI,IAAmB,GAAqB,OACxC,EAAmB,KACnB,KAAwB,QAAoB,IACrC,IAEX,AAAI,IAAmB,GAAoB,OACvC,EAAmB,KACnB,KAAwB,QAAoB,IACrC,IAGJ,SAhCP,AAAkB,IAClB,AAAgB,IAChB,AAAI,IAAmB,GAAe,OAElC,KADO,KAGX,AAAa,MACN,EAAU,OAAmB,IAAmB,SAGnD,AAAU,AAFC,IAEM,IADjB,EAAU,MAEV,WAEJ,AAAI,EAAS,KACT,KAAwB,QAAoB,EAAS,KAC9C,IAEJ,KAmBP,AAAI,IAAmB,GAAoB,OACvC,EAAmB,KACnB,KAAqB,UACd,IAEJ,OA/MP,IACa,iBACN,aACA,aACA,aACA,aAJP,AAKO,OACP,IACO,kBAnCP,AAAI,IACA,MAAa,+BAEb,MAAa,mBACb,KAAuB,KACvB,SAAoB,8BACpB,SAAqB,+BAGzB,AAAO,OAAmB,+BJ2kC9B,AAAU,cK5qBV,AAAU,IACV,AAAiB,IACjB,AAAU,AAAO,QACV,EAAM,MAEX,AAAI,AADI,AAAe,EAA0B,AAAC,EAAO,SACjD,MACN,EAAO,KAAK,MACP,AAAI,EAAI,MACb,EAAO,KAAK,MAEZ,AACE,AAA0B,EAAM,GAAI,KAApC,AAAC,EAAI,KAAW,QAChB,AAAC,AAAe,EAA0B,AAAC,AAAC,EAAM,GAAM,OAAM,KAAW,WAEzE,EAAO,KAAG,EAAO,IAEjB,EAAO,KAAK,cAIX,QA+CP,AAAU,AAAQ,AAAO,IAAiB,MAC1C,AAAiB,IACjB,AAAU,AAAO,MACjB,AAAiB,MACjB,AAAO,EAAM,KAEX,AAAI,AADK,AAAe,EAA0B,AAAC,EAAO,SACjD,MACP,AAAU,AAAM,EAAN,GAAW,KACrB,AAAE,OAAO,MACJ,AAAI,EAAK,MAEd,AAAU,AADA,AAAM,EAAN,KACK,EAAM,GAAI,OACzB,AAAU,EAAK,EAAK,GAAK,OACzB,EAAO,KAAK,MAEZ,AAAU,AAAM,EAAN,KACV,AAAI,AAA2B,EAAM,GAAI,KAArC,AAAC,EAAK,KAAW,QAEnB,AAAI,AAAC,AADI,AAAe,EAA0B,AAAC,AAAC,EAAM,GAAM,SACtD,KAAW,OAEnB,AAAU,EAAK,AADV,AAAU,AAAC,AAAC,EAAK,IAAW,GAA5B,KAAkC,AAAC,EAAK,OACxB,GAAU,OAC/B,AAAU,EAAK,EAAM,GAAK,GAAK,OAC/B,AAAU,EAAK,EAAO,GAAI,GAAK,OAC/B,AAAU,EAAK,EAAW,GAAK,OAC/B,EAAO,KAAG,EAAO,SAIrB,AAAU,EAAK,EAAM,GAAS,OAC9B,AAAU,EAAK,EAAM,GAAI,GAAK,OAC9B,AAAU,EAAK,EAAU,GAAK,OAC9B,EAAO,KAAK,aAGhB,AAAU,AAAM,EAAN,GAAW,KACd,KL5YP,AAAI,AADM,EAAyB,EAAU,EAAQ,SAE5C,MAE6C,AAA/B,QAA4B,YAzI5C,EAAyB,EAAmB,IAAiB,GAAG,sBAdhE,EAAe,eKsbf,cLsLE,KAAsB,iCWxajC,AAAI,AAAC,KAAc,OAGnB,AAAI,WAIF,AA9CW,AA6CL,AAAQ,AADC,AAAe,AADf,SAEW,GAAG,MACZ,EAAO,KAIxB,AAAY,AADN,AAAQ,AADC,AAAe,MACJ,GAAG,MAvCV,EAwCK,KAEG,AAAtB,OAqCI,AAAO,SD9GT,AAAK,6BVjIZ,AAAc,IAAiB,GAAG,IAAc,IAAmB,GAAG,sBA2FpE,EAAe,EAAK,wBA8jBpB,EAAe,EAAU,MAAM,yBAvqBjC,EAAe,EAAK,sBMtBtB,AAAS,GAAmB,QAC5B,AAAO,EAAgB,OAAW,OAAM,cACxC,EAAa,EAAc,IAC3B,EAAgB,GAAQ,sBGKpB,AAAW,EAA2B,EAAG,EAAG,MAE5C,AADc,UACG,8BACC,EAAwC,aAA1D,OACA,KAA4B,ELkC+B,IKjCjE,AACA,uBAUM,EAAc,gBAIpB,AAAK,OAKC,AAAO,EAAQ,sBAJf,AAAO,EAAQ,qBACf,EAAmB,SACZ,IAKE,EAAiB,qDAhBD,yDLuBR,0CAkJf,AAAW,MAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAgB,IAAxB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACA,AAAS,MACT,AAAS,MACT,AAAS,MAG2B,AAA7B,AADQ,AADN,IACM,EAAK,GAAS,EAAK,IAAQ,EAAK,SAGrC,GAAmC,MAAoB,0BApErE,AAAO,IAAmB,GAAe,OAAI,eAC7C,AAAiB,UACjB,AAAiC,QAG7B,AAAO,AADI,MACI,KAAM,eACrB,AAAI,AAAQ,GAAe,IAAvB,KACA,AAAQ,AACJ,AAAO,YAA2B,WAA+B,GACjE,QAAuB,GAAa,OAExC,AAAI,aACO,IAEX,EAAiB,KACV,EAAiB,sBACrB,AAAI,AAAQ,GAAgB,IAAxB,KACP,AAAI,KACc,ESpKN,eTsKZ,AAAI,QAAuB,EAAa,MACpC,EACI,AACI,AAAO,YAA2B,WAA+B,GACjE,QAAuB,GAAa,mBAIhD,EAAiB,SACjB,AAAa,wBArErB,IACA,SAAqB,mBACrB,IACA,AAAO,IAAmB,GAAe,OAAI,qBA7B7C,AAAI,IAAmB,GAAe,OAC3B,IAEX,AAAU,YACV,SAAqB,8BACrB,AAAI,KAAwB,MACxB,KACA,IAEA,AAAgB,MAChB,AAAO,IAAmB,GAAe,OACrC,AAAK,IAGD,AAAY,KAFZ,AAAO,IAAmB,GAAe,OAAI,gBAIjD,IACA,SAEJ,AAAO,IAAmB,GAAe,OAAI,gBAEjD,WACO,QAWP,AAAI,IAAmB,GAAe,OAC3B,IAEX,AAAU,YACV,SAAqB,8BACrB,AAAI,KAAuB,MACvB,KACA,IAEA,AAAgB,MAChB,AAAO,IAAmB,GAAe,OACrC,AAAK,IAGD,AAAY,KAFZ,AAAO,IAAmB,GAAe,OAAI,gBAIjD,SAEJ,AAAO,IAAmB,GAAe,OAAI,gBAEjD,WACO,KAIP,AAAI,IAAmB,GAAe,OAC3B,IAEX,KAAuB,QAAoB,YACpC,KAiHP,AAAI,IAAmB,GAAqB,OACxC,EAAmB,KACnB,KAAwB,QAAoB,IACrC,IAEX,AAAI,IAAmB,GAAoB,OACvC,EAAmB,KACnB,KAAwB,QAAoB,IACrC,IAGJ,KAIP,AAAI,IAAmB,GAAoB,OACvC,EAAmB,KACnB,KAAqB,UACd,IAEJ,OA/MP,IACa,iBACN,aACA,aACA,aACA,aAJP,AAKO,OACP,IACO,kBAnCP,AAAI,IACA,MAAa,+BAEb,MAAa,mBACb,KAAuB,KACvB,SAAoB,8BACpB,SAAqB,+BAGzB,AAAO,OAAmB,0BEjDH,AAAtB,uBOAC,EAAQ,WAMd,EAAe,UAuEf,AAQW,KAAiB,GAAgC,UApB5D,AAAa,OAMb,AAAW,EAAyB,EAAQ,GAAG,IAC/C,EAAqB,EAAO,IAC5B,AAAI,EAAS,KAAQ,EAAe,EAAQ,UErH1C,oBAJ2B,EAAgB,SAClB,EF8CH,aE3CN,EAAK,SF0DX,AAAL,QA+CuD,AAA/C,KAAiB,SALhC,AAAI,EAAc,AAAK,QAAuD,eAC7C,AAA1B,EAAqB,YEWxB,KAAiB,eVwErB,AAAiB,AAAW,AAAI,EAAO,YAAI,AAD1B,gBAEjB,AAAe,AAAW,AAAI,IAAK,YAAI,YACvC,AAAc,AAAW,IAAY,QAAa,KAGlD,AAAI,AAAC,AADC,AADM,AAAW,EAAY,QAAa,KAClC,QACwB,AAArB,OACjB,AAAI,AAAC,OAAW,EAAS,IAAe,OAAU,MAElD,AAAY,AADF,AAAQ,EAAK,MACN,EAA0B,GAAS,IACvB,AAAtB,SMuDT,AAAI,AAAC,KAAc,OAQnB,AAjCa,AA+BH,AAAQ,AADH,EAFf,AAAI,AADO,EAAQ,OAGW,AAFZ,EAAC,WAEoB,KACT,GAAG,MA/BZ,EAAK,IAkC1B,AAAI,IAAM,AAAW,EAAK,MACG,AAAtB,OA8CI,AAAO,SDpOT,AAAK,4BKHR,EAAW,KACX,AAAiB,IACZ,AAAQ,MAAb,EAAgB,EAAI,OAGhB,AADoB,EADT,EAAe,MACC,QAAQ,AAAQ,GAAe,IAAvB,YAA6B,AAAQ,GAAgB,IAAxB,SAE5D,EAAW,EAAc,EAAY,QACrC,AAAa,EAAI,KACjB,AAAI,AAAQ,GAAe,IAAvB,KACA,EAAW,MACR,AAAI,AAAQ,GAAgB,IAAxB,KACP,EAAW,MACR,AAAI,AAAQ,GAAgB,IAAxB,KACP,EAAW,MACR,AAAI,AAAQ,GAAgB,IAAxB,KACP,EAAW,MACR,AAAI,AAAQ,GAAgB,IAAxB,KACP,EAAW,MACR,AAAI,AAAQ,GAAgB,IAAxB,KACP,EAAW,MAGG,GAAyC,6BApBnC,WAwBhC,EAAW,EAAc,EAAY,UACrC,EAAW,qBAvCX,AAAK,KAAgB,OAAyB,OAG1C,KAAgB,OAAyB,GAAK,KAF9C,EAAW,MAIf,AAAI,EAAO,MACP,EAAiB,KACjB,EAAW,uBAnDf,EAAc,KACd,EAAiB,qBASjB,EAAc,KACd,EAAW,YAfe,AAAnB,KAAiB,UAPxB,AAAc,AADD,WAGb,AAAY,AAAO,AADN,EAAe,IAAoB,WACd,EAAS,cACpC,QN0ET,AAAW,EAA2B,EAAG,EAAG,MAE5C,AADc,UACG,8BACjB,MAAkB,EAA+C,mBACjE,KAA4B,ELJ+B,IKKjE,AAAa,IAIL,AAAc,MAEtB,AAAI,EAAU,MACF,EAAkB,EAAM,MAExB,EAAgB,MAIpB,AAAa,AADH,SACmB,AAAO,+CAU5C,AAAI,EAAQ,OACA,IAA+B,wCAInC,EAAgB,EAAM,sBAG9B,AAAI,EAAQ,OACJ,IAA+B,oCAIjC,EAAc,gBAIpB,AAAK,OAKC,AAAO,EAAQ,sBAJf,AAAO,EAAQ,qBACf,EAAmB,SACZ,IAKE,EAAiB,qDA7BD,gEL3BR,0CAkJf,AAAW,MAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAgB,IAAxB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACA,AAAS,MACT,AAAS,MACT,AAAS,MAG2B,AAA7B,AADQ,AADN,IACM,EAAK,GAAS,EAAK,IAAQ,EAAK,SAGrC,GAAmC,MAAoB,0BApErE,AAAO,IAAmB,GAAe,OAAI,eAC7C,AAAiB,UACjB,AAAiC,QAG7B,AAAO,AADI,MACI,KAAM,eACrB,AAAI,AAAQ,GAAe,IAAvB,KACA,AAAQ,AACJ,AAAO,YAA2B,WAA+B,GACjE,QAAuB,GAAa,OAExC,AAAI,aACO,IAEX,EAAiB,KACV,EAAiB,sBACrB,AAAI,AAAQ,GAAgB,IAAxB,KACP,AAAI,KACc,ESpKN,eTsKZ,AAAI,QAAuB,EAAa,MACpC,EACI,AACI,AAAO,YAA2B,WAA+B,GACjE,QAAuB,GAAa,mBAIhD,EAAiB,UACjB,AAAa,wBArErB,IACA,SAAqB,oBACrB,IACA,AAAO,IAAmB,GAAe,OAAI,qBA7B7C,AAAI,IAAmB,GAAe,OAC3B,IAEX,AAAU,YACV,SAAqB,8BACrB,AAAI,KAAwB,OACxB,KACA,IAEA,AAAgB,MAChB,AAAO,IAAmB,GAAe,OACrC,AAAK,IAGD,AAAY,KAFZ,AAAO,IAAmB,GAAe,OAAI,gBAIjD,KACA,UAEJ,AAAO,IAAmB,GAAe,OAAI,gBAEjD,WACO,QAWP,AAAI,IAAmB,GAAe,OAC3B,IAEX,AAAU,YACV,SAAqB,8BACrB,AAAI,KAAuB,MACvB,KACA,IAEA,AAAgB,MAChB,AAAO,IAAmB,GAAe,OACrC,AAAK,IAGD,AAAY,KAFZ,AAAO,IAAmB,GAAe,OAAI,gBAIjD,UAEJ,AAAO,IAAmB,GAAe,OAAI,gBAEjD,WACO,KAIP,AAAI,IAAmB,GAAe,OAC3B,IAEX,KAAuB,QAAoB,cACpC,KAiHP,AAAI,IAAmB,GAAqB,OACxC,EAAmB,KACnB,KAAwB,QAAoB,IACrC,IAEX,AAAI,IAAmB,GAAoB,OACvC,EAAmB,KACnB,KAAwB,QAAoB,IACrC,IAGJ,KAIP,AAAI,IAAmB,GAAoB,OACvC,EAAmB,KACnB,KAAqB,WACd,IAEJ,OA/MP,IACa,kBACN,cACA,cACA,cACA,aAJP,AAKO,QACP,IACO,kBAnCP,AAAI,IACA,MAAa,+BAEb,MAAa,mBACb,KAAuB,KACvB,SAAoB,8BACpB,SAAqB,+BAGzB,AAAO,QAAmB,8BP1DxB,EACD,OACA,OACA,OACA,OACA,OACA,OACA,QACA,SACA,SACA,UAAc,IACH,eAQlB,AAAI,AAAC,AAFU,SAEE,oBAGjB,AAAW,AAAe,AADhB,SAKV,AAAc,MAEP,AAA6B,OAClC,AAAO,AAAe,EAAO,UAC7B,AAAE,WAEJ,AAAI,EAAQ,KAEV,AAAI,AAAC,AAAE,UAAY,oBAGnB,AAAO,IAFA,AAAe,EAAO,SAGxB,AAAI,EAAQ,KAEjB,AAAI,AAAC,AAAE,UAAY,oBACZ,AAAe,EAAO,eAI/B,AAAK,IAwBE,AAAI,EAAa,EAAQ,GAArB,EAAQ,MAEV,qBAzBP,AAAI,AAAuB,EAAM,KAA7B,EAAQ,gBACF,AAAe,EAAM,QACtB,QACA,QAKA,QACA,QAKA,QACA,SAXH,EAAO,KAAG,EAAO,KACT,KAKR,EAAO,KAAG,EAAO,KACT,KAKR,EAAO,KAAG,EAAO,KACT,KAGO,IAEN,MAQjB,AAAa,MACb,EAAO,cASL,AAAI,AAPJ,AAAI,AAAuB,AADpB,AAAe,OACa,KAA/B,EAAQ,MACV,EAAQ,IACH,AAAI,AAAsB,EAAQ,MAA9B,EAAQ,OACjB,EAAQ,IACH,AAAI,AAAsB,EAAQ,MAA9B,EAAQ,OACjB,EAAQ,YAEE,KAEZ,AAAM,AAAc,GAAd,EAAM,OACZ,EAAO,aAGF,AAAO,EAAP,aasEE,AAAiB,EAAO,qBVs3B/B,AAAI,EAAK,UACA,IAUE,AAAgB,EUl4Be,qBVhBjC,AAAwB,EAAe,MAAM,yBAqiB7C,EAAe,EAAU,MAAM,6BMzqB1C,AAAS,GAAgB,QAElB,AADM,EAAa,ENuqBM,yBStkB5B,AAAW,EAA2B,EAAG,EAAG,MAE5C,AADc,WACG,8BACC,EAA6C,cAA/D,OACA,KAA4B,ELnE+B,KKoEjE,AAAa,AACb,UAKA,AAFsB,MAEJ,EAAM,SAGhB,AAAa,AADH,SACmB,AAAO,gDAW5C,AAAI,EAAQ,OACA,IAA+B,wCAG3C,AAAI,EAAQ,OACA,MAA4B,wCAIhC,EAAgB,EAAM,sBAG9B,AAAI,EAAQ,OACJ,IAA+B,oCAGvC,AAAI,EAAQ,OACJ,MAA4B,oCAI9B,EAAc,gBAIpB,AAAK,OAKC,AAAO,EAAQ,sBAJf,AAAO,EAAQ,qBACf,EAAmB,SACZ,IAKE,EAAiB,qDAtCD,uELtFR,0CAkJf,AAAW,MAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAgB,IAAxB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACA,AAAS,MACT,AAAS,MACT,AAAS,MAG2B,AAA7B,AADQ,AADN,IACM,EAAK,GAAS,EAAK,IAAQ,EAAK,SAGrC,GAAmC,MAAoB,0BApErE,AAAO,IAAmB,GAAe,OAAI,eAC7C,AAAiB,UACjB,AAAiC,QAG7B,AAAO,AADI,MACI,KAAM,eACrB,AAAI,AAAQ,GAAe,IAAvB,KACA,AAAQ,AACJ,AAAO,YAA2B,WAA+B,GACjE,QAAuB,GAAa,OAExC,AAAI,aACO,IAEX,EAAiB,KACV,EAAiB,sBACrB,AAAI,AAAQ,GAAgB,IAAxB,KACP,AAAI,KACc,ESpKN,eTsKZ,AAAI,QAAuB,EAAa,MACpC,EACI,AACI,AAAO,YAA2B,WAA+B,GACjE,QAAuB,GAAa,mBAIhD,EAAiB,UACjB,AAAa,wBArErB,IACA,SAAqB,oBACrB,IACA,AAAO,IAAmB,GAAe,OAAI,qBA7B7C,AAAI,IAAmB,GAAe,OAC3B,IAEX,AAAU,YACV,SAAqB,8BACrB,AAAI,KAAwB,OACxB,KACA,IAEA,AAAgB,MAChB,AAAO,IAAmB,GAAe,OACrC,AAAK,IAGD,AAAY,KAFZ,AAAO,IAAmB,GAAe,OAAI,gBAIjD,KACA,UAEJ,AAAO,IAAmB,GAAe,OAAI,gBAEjD,WACO,QAWP,AAAI,IAAmB,GAAe,OAC3B,IAEX,AAAU,YACV,SAAqB,8BACrB,AAAI,KAAuB,MACvB,KACA,IAEA,AAAgB,MAChB,AAAO,IAAmB,GAAe,OACrC,AAAK,IAGD,AAAY,KAFZ,AAAO,IAAmB,GAAe,OAAI,gBAIjD,UAEJ,AAAO,IAAmB,GAAe,OAAI,gBAEjD,WACO,KAIP,AAAI,IAAmB,GAAe,OAC3B,IAEX,KAAuB,QAAoB,cACpC,KAiHP,AAAI,IAAmB,GAAqB,OACxC,EAAmB,KACnB,KAAwB,QAAoB,IACrC,IAEX,AAAI,IAAmB,GAAoB,OACvC,EAAmB,KACnB,KAAwB,QAAoB,IACrC,IAGJ,KAIP,AAAI,IAAmB,GAAoB,OACvC,EAAmB,KACnB,KAAqB,WACd,IAEJ,OA/MP,IACa,kBACN,cACA,cACA,cACA,aAJP,AAKO,QACP,IACO,kBAnCP,AAAI,IACA,MAAa,+BAEb,MAAa,mBACb,KAAuB,KACvB,SAAoB,8BACpB,SAAqB,+BAGzB,AAAO,QAAmB,wCEvCzB,EAAa,EAAa,OAAM,MNkqBP,iCSlgB5B,AAAW,EAA2B,EAAG,EAAG,MAE5C,AADc,WACG,8BACC,EAA6C,cAA/D,OACA,KAA4B,ELvI+B,KKwIjE,AAAa,AACb,KAAgC,UAKhC,AAFsB,MAEJ,EAAM,SAGhB,AAAa,AADH,SACmB,AAAO,+CAW5C,AAAI,EAAQ,OACA,IAAuB,wCAGnC,AAAI,EAAQ,OACE,EAA2B,AAAa,EChDR,kBDoDtC,EAAgB,EAAM,sBAG9B,AAAI,EAAQ,OACJ,IAAuB,oCAG/B,AAAI,EAAQ,OACJ,EAA2B,WAI7B,EAAc,gBAIpB,AAAK,OAKC,AAAO,EAAQ,sBAJf,AAAO,EAAQ,qBACf,EAAmB,SACZ,IAKE,EAAiB,qDAtCD,uEL1JR,0CAkJf,AAAW,MAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAgB,IAAxB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACA,AAAS,MACT,AAAS,MACT,AAAS,MAG2B,AAA7B,AADQ,AADN,IACM,EAAK,GAAS,EAAK,IAAQ,EAAK,SAGrC,GAAmC,MAAoB,0BApErE,AAAO,IAAmB,GAAe,OAAI,eAC7C,AAAiB,UACjB,AAAiC,QAG7B,AAAO,AADI,MACI,KAAM,eACrB,AAAI,AAAQ,GAAe,IAAvB,KACA,AAAQ,AACJ,AAAO,YAA2B,WAA+B,GACjE,QAAuB,GAAa,OAExC,AAAI,aACO,IAEX,EAAiB,KACV,EAAiB,sBACrB,AAAI,AAAQ,GAAgB,IAAxB,KACP,AAAI,KACc,ESpKN,eTsKZ,AAAI,QAAuB,EAAa,MACpC,EACI,AACI,AAAO,YAA2B,WAA+B,GACjE,QAAuB,GAAa,mBAIhD,EAAiB,UACjB,AAAa,wBArErB,IACA,SAAqB,oBACrB,IACA,AAAO,IAAmB,GAAe,OAAI,qBA7B7C,AAAI,IAAmB,GAAe,OAC3B,IAEX,AAAU,YACV,SAAqB,8BACrB,AAAI,KAAwB,OACxB,KACA,IAEA,AAAgB,MAChB,AAAO,IAAmB,GAAe,OACrC,AAAK,IAGD,AAAY,KAFZ,AAAO,IAAmB,GAAe,OAAI,gBAIjD,KACA,UAEJ,AAAO,IAAmB,GAAe,OAAI,gBAEjD,WACO,QAWP,AAAI,IAAmB,GAAe,OAC3B,IAEX,AAAU,YACV,SAAqB,8BACrB,AAAI,KAAuB,MACvB,KACA,IAEA,AAAgB,MAChB,AAAO,IAAmB,GAAe,OACrC,AAAK,IAGD,AAAY,KAFZ,AAAO,IAAmB,GAAe,OAAI,gBAIjD,UAEJ,AAAO,IAAmB,GAAe,OAAI,gBAEjD,WACO,KAIP,AAAI,IAAmB,GAAe,OAC3B,IAEX,KAAuB,QAAoB,cACpC,KAiHP,AAAI,IAAmB,GAAqB,OACxC,EAAmB,KACnB,KAAwB,QAAoB,IACrC,IAEX,AAAI,IAAmB,GAAoB,OACvC,EAAmB,KACnB,KAAwB,QAAoB,IACrC,IAGJ,KAIP,AAAI,IAAmB,GAAoB,OACvC,EAAmB,KACnB,KAAqB,WACd,IAEJ,OA/MP,IACa,kBACN,cACA,cACA,cACA,aAJP,AAKO,QACP,IACO,kBAnCP,AAAI,IACA,MAAa,+BAEb,MAAa,mBACb,KAAuB,KACvB,SAAoB,8BACpB,SAAqB,+BAGzB,AAAO,QAAmB,0BJk4B0C,AAAjE,EAA4B,EAAiC,EAAG,iBMr6BzE,AAAS,GAAoB,WAAiB,OAAU,MAAK,OAAc,YAE3E,AAAO,AADU,EAAa,cACT,KAAQ,eAC7B,EAAa,OAAgB,EAAa,KAC1C,EAAa,EAAI,EAAa,EN0pBE,KM1pBI,6CAC7B,KSyCD,EAAW,IAAQ,MAAS,gBAlF5B,EAAc,KACd,EAAkB,eNmQpB,AAAW,EAA2B,EAAG,EAAG,MAE5C,AADc,WACG,8BACC,EAA4C,cAA9D,OACA,KAA4B,EL3M+B,KK4MjE,AAAa,AACb,KAAwB,UAKxB,AAFsB,MAEH,EAAM,KAGjB,AAAa,AADH,SACmB,AAAO,2CAW5C,AAAI,EAAQ,OACA,IAA4B,wCAGxC,AAAI,EAAQ,OACE,EAA2B,AAAa,ECpHR,kBDwHtC,EAAgB,EAAM,sBAG9B,AAAI,EAAQ,OACJ,IAA4B,oCAGpC,AAAI,EAAQ,OACJ,EAA2B,WAI7B,EAAc,gBAIpB,AAAK,OAKC,AAAO,EAAQ,sBAJf,AAAO,EAAQ,qBACf,EAAmB,SACZ,IAKE,EAAiB,qDAtCD,uEL9NR,0CAkJf,AAAW,MAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAgB,IAAxB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACA,AAAS,MACT,AAAS,MACT,AAAS,MAG2B,AAA7B,AADQ,AADN,IACM,EAAK,GAAS,EAAK,IAAQ,EAAK,SAGrC,GAAmC,MAAoB,0BApErE,AAAO,IAAmB,GAAe,OAAI,eAC7C,AAAiB,UACjB,AAAiC,QAG7B,AAAO,AADI,MACI,KAAM,eACrB,AAAI,AAAQ,GAAe,IAAvB,KACA,AAAQ,AACJ,AAAO,YAA2B,WAA+B,GACjE,QAAuB,GAAa,OAExC,AAAI,aACO,IAEX,EAAiB,KACV,EAAiB,sBACrB,AAAI,AAAQ,GAAgB,IAAxB,KACP,AAAI,KACc,ESpKN,eTsKZ,AAAI,QAAuB,EAAa,MACpC,EACI,AACI,AAAO,YAA2B,WAA+B,GACjE,QAAuB,GAAa,mBAIhD,EAAiB,UACjB,AAAa,wBArErB,IACA,SAAqB,oBACrB,IACA,AAAO,IAAmB,GAAe,OAAI,qBA7B7C,AAAI,IAAmB,GAAe,OAC3B,IAEX,AAAU,YACV,SAAqB,8BACrB,AAAI,KAAwB,OACxB,KACA,IAEA,AAAgB,MAChB,AAAO,IAAmB,GAAe,OACrC,AAAK,IAGD,AAAY,KAFZ,AAAO,IAAmB,GAAe,OAAI,gBAIjD,KACA,UAEJ,AAAO,IAAmB,GAAe,OAAI,gBAEjD,WACO,QAWP,AAAI,IAAmB,GAAe,OAC3B,IAEX,AAAU,YACV,SAAqB,8BACrB,AAAI,KAAuB,MACvB,KACA,IAEA,AAAgB,MAChB,AAAO,IAAmB,GAAe,OACrC,AAAK,IAGD,AAAY,KAFZ,AAAO,IAAmB,GAAe,OAAI,gBAIjD,UAEJ,AAAO,IAAmB,GAAe,OAAI,gBAEjD,WACO,KAIP,AAAI,IAAmB,GAAe,OAC3B,IAEX,KAAuB,QAAoB,cACpC,KAiHP,AAAI,IAAmB,GAAqB,OACxC,EAAmB,KACnB,KAAwB,QAAoB,IACrC,IAEX,AAAI,IAAmB,GAAoB,OACvC,EAAmB,KACnB,KAAwB,QAAoB,IACrC,IAGJ,KAIP,AAAI,IAAmB,GAAoB,OACvC,EAAmB,KACnB,KAAqB,WACd,IAEJ,OA/MP,IACa,kBACN,cACA,cACA,cACA,aAJP,AAKO,QACP,IACO,kBAnCP,AAAI,IACA,MAAa,+BAEb,MAAa,mBACb,KAAuB,KACvB,SAAoB,8BACpB,SAAqB,+BAGzB,AAAO,QAAmB,iCE1BhC,AAAS,GAAc,MAAU,OAAc,YAC/C,EAAa,OAAiB,OAAM,MAAS,oCACtC,QGyRH,AAAW,EAA2B,EAAG,EAAG,MAE5C,AADc,WACG,8BACC,EAA2C,cAA7D,OACA,KAA4B,EL/Q+B,KKgRjE,AAAa,AACb,KAA6B,UAK7B,AAFsB,MAEH,EAAM,KAGjB,AAAa,AADH,SACmB,AAAO,4CAY5C,AAAI,EAAQ,OACyB,wBAAzB,iBAGZ,AAAI,EAAQ,OACuB,wBAAvB,iBAGZ,AAAI,EAAQ,OACE,EAA2B,AAAa,EC7LR,kBDiMtC,EAAgB,EAAM,uBAG9B,AAAI,EAAQ,OACqB,wBAAzB,aAGR,AAAI,EAAQ,OACmB,wBAAvB,aAGR,AAAI,EAAQ,OACJ,EAA2B,WAI7B,EAAc,gBAIpB,AAAK,OAKC,AAAO,EAAQ,sBAJf,AAAO,EAAQ,qBACf,EAAmB,SACZ,IAKE,EAAiB,qDA/CD,8ELlSR,0CAkJf,AAAW,MAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAgB,IAAxB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACO,OAEX,AAAI,AAAQ,GAAe,IAAvB,KACA,AAAS,MACT,AAAS,MACT,AAAS,MAG2B,AAA7B,AADQ,AADN,IACM,EAAK,GAAS,EAAK,IAAQ,EAAK,SAGrC,GAAmC,MAAoB,0BApErE,AAAO,IAAmB,GAAe,OAAI,eAC7C,AAAiB,UACjB,AAAiC,QAG7B,AAAO,AADI,MACI,KAAM,eACrB,AAAI,AAAQ,GAAe,IAAvB,KACA,AAAQ,AACJ,AAAO,YAA2B,WAA+B,GACjE,QAAuB,GAAa,OAExC,AAAI,aACO,IAEX,EAAiB,KACV,EAAiB,sBACrB,AAAI,AAAQ,GAAgB,IAAxB,KACP,AAAI,KACc,ESpKN,eTsKZ,AAAI,QAAuB,EAAa,MACpC,EACI,AACI,AAAO,YAA2B,WAA+B,GACjE,QAAuB,GAAa,mBAIhD,EAAiB,UACjB,AAAa,wBArErB,IACA,SAAqB,oBACrB,IACA,AAAO,IAAmB,GAAe,OAAI,qBA7B7C,AAAI,IAAmB,GAAe,OAC3B,IAEX,AAAU,YACV,SAAqB,8BACrB,AAAI,KAAwB,OACxB,KACA,IAEA,AAAgB,MAChB,AAAO,IAAmB,GAAe,OACrC,AAAK,IAGD,AAAY,KAFZ,AAAO,IAAmB,GAAe,OAAI,gBAIjD,KACA,UAEJ,AAAO,IAAmB,GAAe,OAAI,gBAEjD,WACO,QAWP,AAAI,IAAmB,GAAe,OAC3B,IAEX,AAAU,YACV,SAAqB,8BACrB,AAAI,KAAuB,MACvB,KACA,IAEA,AAAgB,MAChB,AAAO,IAAmB,GAAe,OACrC,AAAK,IAGD,AAAY,KAFZ,AAAO,IAAmB,GAAe,OAAI,gBAIjD,UAEJ,AAAO,IAAmB,GAAe,OAAI,gBAEjD,WACO,KAIP,AAAI,IAAmB,GAAe,OAC3B,IAEX,KAAuB,QAAoB,cACpC,KAiHP,AAAI,IAAmB,GAAqB,OACxC,EAAmB,KACnB,KAAwB,QAAoB,IACrC,IAEX,AAAI,IAAmB,GAAoB,OACvC,EAAmB,KACnB,KAAwB,QAAoB,IACrC,IAGJ,KAIP,AAAI,IAAmB,GAAoB,OACvC,EAAmB,KACnB,KAAqB,WACd,IAEJ,OA/MP,IACa,kBACN,cACA,cACA,cACA,aAJP,AAKO,QACP,IACO,kBAnCP,AAAI,IACA,MAAa,+BAEb,MAAa,mBACb,KAAuB,KACvB,SAAoB,8BACpB,SAAqB,+BAGzB,AAAO,QAAmB,yCEnBhC,AAAO,AADU,EAAa,SACT,KAAQ,eAE7B,AAAO,EAAU,AADI,EAAa,EAAO,OAAM,cACd,eACjC,EAAa,EAAM,EAAa,KAChC,EAAa,EAAI,EAAa,EN0oBE,KM1oBI,qBAC7B,QG4VH,AAAW,EAA2B,EAAG,EAAG,MAE5C,AADc,WACG,8BACC,EAAgD,cAAlE,OACA,KAA4B,EL5V+B,KK6VjE,AAAa,AACb,KAA0B,KAAwB,UAKlD,AAFsB,MAEH,EAAM,KAGjB,AAAa,AADH,SACmB,AAAO","sourceRoot":"assemblyscript:///","sourceContents":["// Alignment guarantees\n\n// @ts-ignore: decorator\n@inline export const AL_BITS: u32 = 4; // 16 bytes to fit up to v128\n// @ts-ignore: decorator\n@inline export const AL_SIZE: usize = 1 << <usize>AL_BITS;\n// @ts-ignore: decorator\n@inline export const AL_MASK: usize = AL_SIZE - 1;\n\n// Extra debugging\n\n// @ts-ignore: decorator\n@inline export const DEBUG = true;\n\n// ╒════════════════ Common block layout (32-bit) ═════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │                           MM info                             │ -16\n// ├───────────────────────────────────────────────────────────────┤\n// │                           GC info                             │ -12\n// ├───────────────────────────────────────────────────────────────┤\n// │                          runtime id                           │ -8\n// ├───────────────────────────────────────────────────────────────┤\n// │                         runtime size                          │ -4\n// ╞═══════════════════════════════════════════════════════════════╡\n// │                              ...                              │ ref\n@unmanaged export class BLOCK {\n  /** Memory manager info. */\n  mmInfo: usize; // WASM64 needs adaption\n  /** Garbage collector info. */\n  gcInfo: u32;\n  /** Runtime class id. */\n  rtId: u32;\n  /** Runtime object size. */\n  rtSize: u32;\n}\n\n// @ts-ignore: decorator\n@inline export const BLOCK_OVERHEAD = (offsetof<BLOCK>() + AL_MASK) & ~AL_MASK;\n\n// @ts-ignore: decorator\n@inline export const BLOCK_MAXSIZE: usize = (1 << 30) - BLOCK_OVERHEAD;\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Value is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Value is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","import { AL_MASK, BLOCK, BLOCK_OVERHEAD, BLOCK_MAXSIZE } from \"rt/common\";\n\n// @ts-ignore: decorator\n@lazy\nvar startOffset: usize = (__heap_base + AL_MASK) & ~AL_MASK;\n\n// @ts-ignore: decorator\n@lazy\nvar offset: usize = startOffset;\n\n// @ts-ignore: decorator\n@unsafe @global\nexport function __alloc(size: usize, id: u32): usize {\n  if (size > BLOCK_MAXSIZE) unreachable();\n  var ptr = offset + BLOCK_OVERHEAD;\n  var newPtr = (ptr + max<usize>(size, 1) + AL_MASK) & ~AL_MASK;\n  var pagesBefore = memory.size();\n  if (newPtr > <usize>pagesBefore << 16) {\n    let pagesNeeded = ((newPtr - ptr + 0xffff) & ~0xffff) >>> 16;\n    let pagesWanted = max(pagesBefore, pagesNeeded); // double memory\n    if (memory.grow(pagesWanted) < 0) {\n      if (memory.grow(pagesNeeded) < 0) unreachable(); // out of memory\n    }\n  }\n  offset = newPtr;\n  var block = changetype<BLOCK>(ptr - BLOCK_OVERHEAD);\n  block.rtId = id;\n  block.rtSize = size;\n  return ptr;\n}\n\n// @ts-ignore: decorator\n@unsafe @global\nexport function __realloc(ref: usize, size: usize): usize {\n  var block = changetype<BLOCK>(ref - BLOCK_OVERHEAD);\n  var oldSize = <usize>block.rtSize;\n  if (size > oldSize) {\n    let newRef = __alloc(size, block.rtId);\n    memory.copy(newRef, ref, oldSize);\n    ref = newRef;\n  } else {\n    block.rtSize = size;\n  }\n  return ref;\n}\n\n// @ts-ignore: decorator\n@unsafe @global\nexport function __free(ref: usize): void {\n}\n\n// @ts-ignore: decorator\n@unsafe @global\nfunction __reset(): void { // special\n  offset = startOffset;\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __retain(ref: usize): usize {\n  return ref;\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __release(ref: usize): void {\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __visit(ref: usize, cookie: u32): void {\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __collect(): void {\n}\n","export function compareImpl(str1: string, index1: usize, str2: string, index2: usize, len: usize): i32 {\n  var result: i32 = 0;\n  var ptr1 = changetype<usize>(str1) + (index1 << 1);\n  var ptr2 = changetype<usize>(str2) + (index2 << 1);\n  while (len && !(result = <i32>load<u16>(ptr1) - <i32>load<u16>(ptr2))) {\n    --len, ptr1 += 2, ptr2 += 2;\n  }\n  return result;\n}\n\n// @ts-ignore: decorator\n@inline\nexport const enum CharCode {\n  PLUS = 0x2B,\n  MINUS = 0x2D,\n  DOT = 0x2E,\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n  A = 0x41,\n  B = 0x42,\n  E = 0x45,\n  N = 0x4E,\n  O = 0x4F,\n  X = 0x58,\n  Z = 0x5a,\n  a = 0x61,\n  b = 0x62,\n  e = 0x65,\n  n = 0x6E,\n  o = 0x6F,\n  x = 0x78,\n  z = 0x7A\n}\n\nexport function isWhiteSpaceOrLineTerminator(c: i32): bool {\n  switch (c) {\n    case 9:    // <TAB>\n    case 10:   // <LF>\n    case 13:   // <CR>\n    case 11:   // <VT>\n    case 12:   // <FF>\n    case 32:   // <SP>\n    case 160:  // <NBSP>\n    case 8232: // <LS>\n    case 8233: // <PS>\n    case 65279: return true; // <ZWNBSP>\n    default: return false;\n  }\n}\n\n/** Parses a string to an integer (usually), using the specified radix. */\nexport function strtol<T>(str: string, radix: i32 = 0): T {\n  var len: i32 = str.length;\n  // @ts-ignore: cast\n  if (!len) return <T>NaN;\n\n  var ptr = changetype<usize>(str) /* + HEAD -> offset */;\n  var code = <i32>load<u16>(ptr);\n\n  // determine sign\n  // @ts-ignore: cast\n  var sign: T = 1;\n  // trim white spaces\n  while (isWhiteSpaceOrLineTerminator(code)) {\n    code = <i32>load<u16>(ptr += 2);\n    --len;\n  }\n  if (code == CharCode.MINUS) {\n    // @ts-ignore: cast\n    if (!--len) return <T>NaN;\n    code = <i32>load<u16>(ptr += 2);\n    // @ts-ignore: type\n    sign = -1;\n  } else if (code == CharCode.PLUS) {\n    // @ts-ignore: cast\n    if (!--len) return <T>NaN;\n    code = <i32>load<u16>(ptr += 2);\n  }\n\n  // determine radix\n  if (!radix) {\n    if (code == CharCode._0 && len > 2) {\n      switch (<i32>load<u16>(ptr + 2)) {\n        case CharCode.B:\n        case CharCode.b: {\n          ptr += 4; len -= 2;\n          radix = 2;\n          break;\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          ptr += 4; len -= 2;\n          radix = 8;\n          break;\n        }\n        case CharCode.X:\n        case CharCode.x: {\n          ptr += 4; len -= 2;\n          radix = 16;\n          break;\n        }\n        default: radix = 10;\n      }\n    } else radix = 10;\n  } else if (radix < 2 || radix > 36) {\n    // @ts-ignore: cast\n    return <T>NaN;\n  }\n\n  // calculate value\n  // @ts-ignore: type\n  var num: T = 0;\n  while (len--) {\n    code = <i32>load<u16>(ptr);\n    if (code >= CharCode._0 && code <= CharCode._9) {\n      code -= CharCode._0;\n    } else if (code >= CharCode.A && code <= CharCode.Z) {\n      code -= CharCode.A - 10;\n    } else if (code >= CharCode.a && code <= CharCode.z) {\n      code -= CharCode.a - 10;\n    } else break;\n    if (code >= radix) break;\n    // @ts-ignore: type\n    num = num * radix + code;\n    ptr += 2;\n  }\n  // @ts-ignore: type\n  return sign * num;\n}\n\n// FIXME: naive implementation\nexport function strtod(str: string): f64 {\n  var len: i32 = str.length;\n  if (!len) return NaN;\n\n  var ptr = changetype<usize>(str);\n  var code = <i32>load<u16>(ptr);\n\n  // determine sign\n  var sign = 1.0;\n  // trim white spaces\n  while (isWhiteSpaceOrLineTerminator(code)) {\n    code = <i32>load<u16>(ptr += 2);\n    --len;\n  }\n  if (code == CharCode.MINUS) {\n    if (!--len) return NaN;\n    code = <i32>load<u16>(ptr += 2);\n    sign = -1.0;\n  } else if (code == CharCode.PLUS) {\n    if (!--len) return NaN;\n    code = <i32>load<u16>(ptr += 2);\n  }\n\n  // calculate value\n  var num = 0.0;\n  while (len--) {\n    code = <i32>load<u16>(ptr);\n    if (code == CharCode.DOT) {\n      ptr += 2;\n      let fac = 0.1; // precision :(\n      while (len--) {\n        code = <i32>load<u16>(ptr);\n        if (code == CharCode.E || code == CharCode.e) {\n          assert(false); // TODO\n        }\n        code -= CharCode._0;\n        if (<u32>code > 9) break;\n        num += <f64>code * fac;\n        fac *= 0.1;\n        ptr += 2;\n      }\n      break;\n    }\n    code -= CharCode._0;\n    if (<u32>code >= 10) break;\n    num = num * 10 + code;\n    ptr += 2;\n  }\n  return sign * num;\n}\n","import { CharCode } from \"util/string\";\nimport { u128 } from \"./integer/u128\";\nimport { u256 } from \"./integer/u256\";\n\nconst HEX_CHARS = '0123456789abcdef';\n\n@lazy const Pows10_64: u64[] = [\n  1,\n  10,\n  100,\n  1000,\n  10000,\n  100000,\n  1000000,\n  10000000,\n  100000000,\n  1000000000,\n\n  10000000000,\n  100000000000,\n  1000000000000,\n  10000000000000,\n  100000000000000,\n  1000000000000000,\n  10000000000000000,\n  100000000000000000,\n  1000000000000000000,\n  10000000000000000000,\n];\n\n@lazy const MaxBaseForExponent128: u64[] = [\n  u64.MAX_VALUE,       // 0\n  u64.MAX_VALUE,       // 1\n  u64.MAX_VALUE,       // 2\n  0x000006597FA94F5B,  // 3\n  0x00000000FFFFFFFF,  // 4\n  0x0000000003080C00,  // 5\n  0x0000000000285145,  // 6\n  0x000000000004E045,  // 7\n  0x000000000000FFFF,  // 8\n  0x0000000000004AA8,  // 9\n  0x0000000000001BDB,  // 10\n  0x0000000000000C6F,  // 11\n  0x0000000000000659,  // 12\n  0x0000000000000398,  // 13\n  0x0000000000000235,  // 14\n  0x0000000000000172,  // 15\n  0x00000000000000FF,  // 16\n  0x00000000000000B8,  // 17\n  0x000000000000008A,  // 18\n  0x000000000000006A,  // 19\n  0x0000000000000054,  // 20\n  0x0000000000000044,  // 21\n  0x0000000000000038,  // 22\n  0x000000000000002F,  // 23\n  0x0000000000000028,  // 24\n  0x0000000000000022,  // 25\n  0x000000000000001E,  // 26\n  0x000000000000001A,  // 27\n  0x0000000000000017,  // 28\n  0x0000000000000015,  // 29\n  0x0000000000000013,  // 30\n  0x0000000000000011,  // 31\n  0x000000000000000F,  // 32\n  0x000000000000000E,  // 33\n  0x000000000000000D,  // 34\n  0x000000000000000C,  // 35\n  0x000000000000000B,  // 36\n  0x000000000000000B,  // 37\n  0x000000000000000A,  // 38\n];\n\n// Use LUT wrapped by function for lazy compilation\n@lazy const RadixCharsTable: u8[] = [\n   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 36, 36, 36, 36, 36, 36,\n  36, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 36, 36, 36, 36,\n  36, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35\n];\n\nexport function isPowerOverflow128(base: u128, exponent: i32): bool {\n  if (!(exponent > 1 && base > u128.One)) return false;\n  if (base.hi != 0 || exponent >= 128)    return true;\n\n  var low = base.lo;\n  if (low <= 9) {\n    switch (<i32>low) {\n      case 2: return exponent > 127;\n      case 3: return exponent > 80;\n      case 4: return exponent > 63;\n      case 5: return exponent > 55;\n      case 6: return exponent > 49;\n      case 7: return exponent > 45;\n      case 8: return exponent > 42;\n      case 9: return exponent > 40;\n    }\n  }\n  return low > MaxBaseForExponent128[exponent];\n}\n\nexport function digits10(value: u64): i32 {\n  var l = 64 - <i32>clz(value); // log2\n  var t = l * 1233 >>> 12;      // l / log2(10)\n      t = t - <i32>(value < unchecked(Pows10_64[t]));\n  return t + 1;\n}\n\n// helper function for utoa\nfunction processU64(digits: Int8Array, value: u64): void {\n  var length = digits.length - 1;\n  for (let i = 63; i != -1; i--) {\n    let left_bit = value & (1 << i) ? 1 : 0;\n    for (let j = 0; j <= length; j++) {\n      digits[j] += digits[j] >= 5 ? 3 : 0;\n    }\n    for (let j = length; j != -1; j--) {\n      digits[j] <<= 1;\n      if (j < length) digits[j + 1] |= digits[j] > 15 ? 1 : 0;\n      digits[j] &= 15;\n    }\n    digits[0] += <u8>left_bit;\n  }\n}\n\nexport function u128toa10(value: u128): string {\n  var length = 40;\n  var digits = new Int8Array(length);\n\n  processU64(digits, value.hi);\n  processU64(digits, value.lo);\n\n  var result = \"\";\n  var start = false;\n  for (let i = length - 1; i != -1; i--) {\n    if (!start && digits[i] > 0) start = true;\n    if (start) result = result.concat(HEX_CHARS.charAt(digits[i]));\n  }\n  return result;\n}\n\nexport function u256toa10(value: u256): string {\n  var length = 78;\n  var digits = new Int8Array(length);\n\n  processU64(digits, value.hi2);\n  processU64(digits, value.hi1);\n  processU64(digits, value.lo2);\n  processU64(digits, value.lo1);\n\n  var result = \"\";\n  var start = false;\n  for (let i = length - 1; i != -1; i--) {\n    if (!start && digits[i] > 0) start = true;\n    if (start) result = result.concat(HEX_CHARS.charAt(digits[i]));\n  }\n  return result;\n}\n\nexport function atou128(str: string, radix: i32 = 0): u128 {\n  if (!radix) radix = 10;\n  if (radix < 2 || radix > 36) {\n    throw new Error(\"Invalid radix\");\n  }\n  var len = str.length;\n  if (!len) return u128.Zero;\n\n  var first = str.charCodeAt(0);\n  if (len == 1 && first == CharCode._0) {\n    return u128.Zero;\n  }\n  var isNeg = first == CharCode.MINUS;\n  var index = <i32>(isNeg || first == CharCode.PLUS);\n\n  if (str.charCodeAt(index) == CharCode._0) {\n    let second = str.charCodeAt(++index);\n    if (second == CharCode.x || second == CharCode.X) {\n      radix = 16; ++index;\n    } else if (second == CharCode.o || second == CharCode.O) {\n      radix = 8; ++index;\n    } else if (second == CharCode.b || second == CharCode.B) {\n      radix = 2; ++index;\n    }\n  }\n  var result = u128.Zero;\n  var table  = RadixCharsTable;\n\n  if (ASC_SHRINK_LEVEL >= 1) {\n    let radix128 = u128.fromU64(radix);\n    do {\n      let n: u32 = str.charCodeAt(index) - CharCode._0;\n      if (n > <u32>(CharCode.z - CharCode._0)) break;\n\n      let num = table[n];\n      if (num >= <u8>radix) break;\n\n      result *= radix128;\n      result += u128.fromU64(num);\n    } while (++index < len);\n  } else {\n    switch (radix) {\n      case 2: {\n        do {\n          let num: u32 = str.charCodeAt(index) - CharCode._0;\n          if (num >= 2) break;\n          result <<= 1;\n          result |= u128.fromU64(num);\n        } while (++index < len);\n        break;\n      }\n      case 10: {\n        do {\n          let num: u32 = str.charCodeAt(index) - CharCode._0;\n          if (num >= 10) break;\n          result  = (result << 3) + (result << 1);\n          result += u128.fromU64(num);\n        } while (++index < len);\n        break;\n      }\n      case 16: {\n        do {\n          let n: u32 = str.charCodeAt(index) - CharCode._0;\n          if (n > <u32>(CharCode.z - CharCode._0)) break;\n\n          let num = table[n];\n          if (num >= 16) break;\n\n          result <<= 4;\n          result |= u128.fromU64(num);\n        } while (++index < len);\n        break;\n      }\n      default: {\n        let radix128 = u128.fromU64(radix);\n        do {\n          let n: u32 = str.charCodeAt(index) - CharCode._0;\n          if (n > <u32>(CharCode.z - CharCode._0)) break;\n\n          let num = table[n];\n          if (num >= <u8>radix) break;\n\n          result *= radix128;\n          result += u128.fromU64(num);\n        } while (++index < len);\n        break;\n      }\n    }\n  }\n\n  return isNeg ? -result : result;\n}\n","import { u128 } from './integer/u128';\n\n/*\n * Current utility functions can be overloaded by imported from environment with same name and signatue.\n *\n * Example:\n *  declare function __floatuntidf(lo: u64, hi: u64): f64\n */\n\n// used for returning quotient and reminder from __divmod128\nexport var __divmod_quot_lo: u64 = 0;\nexport var __divmod_quot_hi: u64 = 0;\nexport var __divmod_rem:     u64 = 0;\n\n// used for returning low and high part of __mulq64, __multi3 etc\nexport var __res128_lo: u64 = 0;\nexport var __res128_hi: u64 = 0;\n\n/**\n * Convert 128-bit unsigned integer to 64-bit float\n * @param  lo lower  64-bit part of unsigned 128-bit integer\n * @param  hi higher 64-bit part of unsigned 128-bit integer\n * @return    64-bit float result\n */\n@global\nexport function __floatuntidf(lo: u64, hi: u64): f64 {\n  // __floatuntidf ported from LLVM sources\n  if (!(lo | hi)) return 0.0;\n\n  var v  = new u128(lo, hi);\n  var sd = 128 - __clz128(lo, hi);\n  var e  = sd - 1;\n\n  if (sd > 53) {\n    if (sd != 55) {\n      if (sd == 54) {\n        v = u128.shl(v, 1);\n      } else {\n        v = u128.or(\n          u128.shr(v, sd - 55),\n          u128.fromBool(u128.and(v, u128.shr(u128.Max, 128 + 55 - sd)).toBool())\n        );\n      }\n    }\n\n    v.lo |= (v.lo & 4) >> 2;\n    v.preInc();\n\n    v = u128.shr(v, 2);\n\n    if (v.lo & (1 << 53)) {\n      v = u128.shr(v, 1);\n      ++e;\n    }\n\n  } else {\n    v = u128.shl(v, 53 - sd);\n  }\n\n  var w: u64 = u128.shr(v, 32).lo & 0x000FFFFF;\n  var u: u64 = <u64>(((e + 1023) << 20) | w) << 32;\n  return reinterpret<f64>(u | (v.lo & 0xFFFFFFFF));\n}\n\n@global\nexport function __umulh64(u: u64, v: u64): u64 {\n  var u0 = u & 0xFFFFFFFF;\n  var v0 = v & 0xFFFFFFFF;\n\n  var u1 = u >> 32;\n  var v1 = v >> 32;\n\n  var l = u0 * v0;\n  var t = u1 * v0 + (l >> 32);\n  var w = u0 * v1 + (t & 0xFFFFFFFF);\n\n  t >>= 32;\n  w >>= 32;\n\n  return u1 * v1 + t + w;\n}\n\n@global\nexport function __umulq64(_res: usize, u: u64, v: u64): void {\n  var u1: u64 , v1: u64, w0: u64, w1: u64, t: u64;\n\n  u1 = u & 0xFFFFFFFF;\n  v1 = v & 0xFFFFFFFF;\n\n  u >>= 32;\n  v >>= 32;\n\n  t  = u1 * v1;\n  w0 = t & 0xFFFFFFFF;\n  t  = u * v1 + (t >> 32);\n  w1 = t >> 32;\n  t  = u1 * v + (t & 0xFFFFFFFF);\n\n  __res128_lo = (t << 32) + w0;\n  __res128_hi = u * v + w1 + (t >> 32);\n}\n\n@global\nexport function __multi3(_res: usize, al: u64, ah: u64, bl: u64, bh: u64): void {\n  var u = al, v = bl;\n  var w: u64, k: u64;\n\n  var u1 = u & 0xFFFFFFFF;\n  var v1 = v & 0xFFFFFFFF;\n  var t  = u1 * v1;\n  var w1 = t & 0xFFFFFFFF;\n\n  u = u >> 32;\n  t = u * v1 + (t >> 32);\n  k = t & 0xFFFFFFFF;\n  w = t >> 32;\n  v = v >> 32;\n  t = u1 * v + k;\n\n  var lo  = w1 + (t << 32);\n  var hi  = u  * v + w;\n      hi += ah * bl;\n      hi += al * bh;\n      hi += t >> 32;\n\n  __res128_lo = lo;\n  __res128_hi = hi;\n}\n\nexport var __float_u128_lo: u64 = 0;\nexport var __float_u128_hi: u64 = 0;\n\n@global\nexport function __floatuntfdi(value: f64): void {\n  var u = reinterpret<u64>(value);\n\n  // if (value < -1.7014118346046e38) { // -(2^127-1)\n  if (value < reinterpret<f64>(0xC7F0000000000000)) { // -(2^128-1)\n    // overflow negative\n    __float_u128_lo = 0;\n    // __float_u128_hi = <u64>-1; // for i128\n    __float_u128_hi = 0;\n    // } else if (value < -9.2233720368547e18) { // -2^63-1 // for i128\n  } else if (value < reinterpret<f64>(0xC3F0000000000000)) { // // -(2^64-1)\n    let lo: u64, hi: u64, m: u64;\n\n    m = (u & 0x000FFFFFFFFFFFFF) | (1 << 52);\n    u = (u & 0x7FFFFFFFFFFFFFFF) >> 52;\n\n    u -= 1075;\n    if (u > 64) {\n      lo = 0;\n      hi = m << (u - 64);\n    } else {\n      lo = m << u;\n      hi = m >> (64 - u);\n    }\n    __float_u128_lo = ~lo;\n    __float_u128_hi = ~hi;\n    // } else if (value < 9.2233720368547e18) { // 2^63-1 // for i128\n  } else if (value < reinterpret<f64>(0x43F0000000000000)) { // 2^64-1\n    // fit in a u64\n    __float_u128_lo = <u64>value;\n    // __float_u128_hi = (value < 0) ? -1 : 0; // for int\n    __float_u128_hi = 0;\n    // } else if (value < 1.7014118346046e38) {\n  } else if (value < reinterpret<f64>(0x47F0000000000000)) { // 2^128-1\n    let lo: u64, hi: u64, m: u64;\n\n    m = (u & 0x000FFFFFFFFFFFFF) | (1 << 52);\n    u = (u & 0x7FFFFFFFFFFFFFFF) >> 52;\n    u -= 1075;\n    if (u > 64) {\n      lo = 0;\n      hi = m << (u - 64);\n    } else {\n      lo = m << u;\n      hi = m >> (64 - u);\n    }\n    __float_u128_lo = lo;\n    __float_u128_hi = hi;\n  } else {\n    // overflow positive\n    __float_u128_lo = <u64>-1;\n    __float_u128_hi = <u64>-1; // 0x7FFFFFFFFFFFFFFF for i128\n  }\n}\n\n\n@global @inline\nexport function __clz128(lo: u64, hi: u64): i32 {\n  // return <i32>(hi ? clz(hi) : clz(lo) + 64);\n  // var mask: u64 = -(<u64>(hi == 0));\n  var mask: u64 = <i64>(hi ^ (hi - 1)) >> 63;\n  return <i32>clz((hi & ~mask) | (lo & mask)) + (<i32>mask & 64);\n}\n\n@global @inline\nexport function __ctz128(lo: u64, hi: u64): i32 {\n  // return <i32>(lo ? ctz(lo) : ctz(hi) + 64);\n  // var mask: u64 = -(<u64>(lo == 0));\n  var mask: u64 = <i64>(lo ^ (lo - 1)) >> 63;\n  return <i32>ctz((hi & mask) | (lo & ~mask)) + (<i32>mask & 64);\n}\n\n\n@global\nexport function __udivmod128(alo: u64, ahi: u64, blo: u64, bhi: u64): void {\n  var bzn = __clz128(blo, bhi); // N\n  if (bzn == 128)\n    unreachable(); // div by zero\n\n  var azn = __clz128(alo, ahi); // M\n  var btz = __ctz128(blo, bhi); // N\n\n  if (!(alo | ahi)) {\n    __divmod_quot_lo =\n    __divmod_quot_hi =\n    __divmod_rem     = 0;\n    return;\n  }\n\n  if (bzn == 127) {\n    __divmod_quot_lo = alo;\n    __divmod_quot_hi = ahi;\n    __divmod_rem     = 0;\n    return;\n  }\n\n  if (btz + bzn == 127) {\n    // TODO\n    // __divmod_quot = a >> btz\n    // b++\n    // __divmod_rem = a & b\n    return;\n  }\n\n  if (!(ahi | bhi)) {\n    __divmod_quot_hi = 0;\n\n    // if `b.lo` is power of two\n    if (!(blo & (blo - 1))) {\n      __divmod_quot_lo = alo >> btz;\n      __divmod_rem  = 0;\n    } else {\n      let dlo = alo / blo;\n      __divmod_quot_lo = dlo\n      __divmod_rem     = alo - dlo * blo;\n    }\n    return;\n  }\n\n  // if b.lo == 0 and `b.hi` is power of two\n  if (!blo && !(bhi & (bhi - 1))) {\n    __divmod_rem = 0;\n\n    // TODO\n\n    return;\n  }\n\n  var diff: i64 = ahi - bhi;\n  var cmp = <i32>(diff != 0 ? diff : alo - blo); // TODO optimize this\n\n  if (cmp < 0) {\n    __divmod_quot_lo =\n    __divmod_quot_hi =\n    __divmod_rem     = 0;\n    return;\n  } else if (cmp == 0) {\n    __divmod_quot_lo = 1;\n    __divmod_quot_hi =\n    __divmod_rem     = 0;\n    return;\n  }\n\n  if (bzn - azn <= 5) {\n    // TODO\n    // fast path\n    __udivmod128core(alo, ahi, blo, bhi);\n  } else {\n    __udivmod128core(alo, ahi, blo, bhi);\n  }\n}\n\n@global\nexport function __udivmod128core(alo: u64, ahi: u64, blo: u64, bhi: u64): void {\n  var a = new u128(alo, ahi);\n  var b = new u128(blo, bhi);\n  var q = u128.Zero;\n  var n = a.clone();\n  // get leading zeros for left alignment\n  var alz = __clz128(n.lo, n.hi);\n  var blz = __clz128(b.lo, b.hi);\n  var off = blz - alz;\n  var nb  = b << off;\n\n  // create a mask with the length of b\n  var mask = u128.One;\n  mask <<= 128 - blz;\n  --mask;\n  mask <<= off;\n\n  var i = 0;\n  while (n >= b) {\n    ++i;\n    q <<= 1;\n    if ((n & mask) >= nb) {\n      ++q;\n      n -= nb;\n    }\n\n    mask |= mask >> 1;\n    nb >>= 1;\n  }\n  q <<= (blz - alz - i + 1);\n\n  __divmod_quot_lo = q.lo;\n  __divmod_quot_hi = q.hi;\n  __divmod_rem     = n.lo;\n}\n\n@global\nexport function __udivmod128_10(_q: usize, _r: usize, lo: u64, hi: u64): void {\n  if (!hi) {\n    if (lo < 10) {\n      __divmod_quot_lo =\n      __divmod_quot_hi =\n      __divmod_rem     = 0;\n      return;\n    }\n    let qlo = lo / 10;\n    __divmod_quot_lo = qlo;\n    __divmod_quot_hi = 0;\n    __divmod_rem     = lo - qlo * 10;\n    return;\n  }\n\n  var q: u128, r: u128;\n  var n = new u128(lo, hi);\n\n  q  = n >> 1;\n  q += n >> 2;\n  q += q >> 4;\n  q += q >> 8;\n  q += q >> 16;\n  q += q >> 32;\n  q += u128.fromU64(q.hi); // q >> 64\n  q >>= 3;\n  r = n - (((q << 2) + q) << 1);\n  n = q + u128.fromBool(r.lo > 9);\n\n  __divmod_quot_lo = n.lo;\n  __divmod_quot_hi = n.hi;\n  __divmod_rem     = r.lo;\n}\n","import { u128 } from \"./bignum/integer/u128\";\n\nconst DEFAULT_SCRATCH_BUFFER_SIZE: usize = 1 << 16;\n\ntype DataTypeIndex = u32;\n\nconst DATA_TYPE_ORIGINATOR_ACCOUNT_ID: DataTypeIndex = 1;\nconst DATA_TYPE_CURRENT_ACCOUNT_ID: DataTypeIndex = 2;\nconst DATA_TYPE_STORAGE: DataTypeIndex = 3;\nconst DATA_TYPE_INPUT: DataTypeIndex = 4;\nconst DATA_TYPE_RESULT: DataTypeIndex = 5;\nconst DATA_TYPE_STORAGE_ITER: DataTypeIndex = 6;\n\n/**\n * Represents contract storage.\n */\nexport class Storage {\n  private _scratchBuf: Uint8Array = new Uint8Array(DEFAULT_SCRATCH_BUFFER_SIZE);\n\n  /**\n   * Internal method to fetch list of keys from the given iterator up the limit.\n   */\n  private _fetchIter(iterId: u32, limit: i32 = -1): string[] {\n    let result: string[] = new Array<string>();\n    while (limit-- != 0) {\n      let key = this._internalReadString(DATA_TYPE_STORAGE_ITER, 0, iterId);\n      if (key != null) {\n        result.push(key);\n      }\n      if (!storage_iter_next(iterId)) {\n        break;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Returns list of keys between the given start key and the end key. Both inclusive.\n   * NOTE: Must be very careful to avoid exploding amount of compute with this method.\n   * @param start The start key used as a lower bound in lexicographical order. Inclusive.\n   * @param end The end key used as a upper bound in lexicographical order. Inclusive.\n   * @param limit The maximum number of keys to return. Default is `-1`, means no limit.\n   */\n  keyRange(start: string, end: string, limit: i32 = -1): string[] {\n    return this._fetchIter(\n      storage_range(start.lengthUTF8 - 1, start.toUTF8(), end.lengthUTF8 - 1, end.toUTF8()),\n      limit,\n    );\n  }\n\n  /**\n   * Returns list of keys starting with given prefix.\n   * NOTE: Must be very careful to avoid exploding amount of compute with this method.\n   * @param prefix The key prefix.\n   * @param limit The maximum number of keys to return. Default is `-1`, means no limit.\n   */\n  keys(prefix: string, limit: i32 = -1): string[] {\n    return this._fetchIter(\n      storage_iter(prefix.lengthUTF8 - 1, prefix.toUTF8()),\n      limit,\n    );\n  }\n\n  /**\n   * @deprecated Use setString or set<string>\n   */\n  setItem(key: string, value: string): void {\n    this.setString(key, value);\n  }\n\n  /**\n   * @deprecated Use getString or get<string>\n   */\n  getItem(key: string): string {\n    return this.getString(key);\n  }\n\n  /**\n   * Store string value under given key. Both key and value are encoded as UTF-8 strings.\n   */\n  setString(key: string, value: string): void {\n    storage_write(key.lengthUTF8 - 1, key.toUTF8(), value.lengthUTF8 - 1, value.toUTF8());\n  }\n\n  /**\n   * Get string value stored under given key. Both key and value are encoded as UTF-8 strings.\n   */\n  getString(key: string): string {\n    return this._internalReadString(DATA_TYPE_STORAGE, key.lengthUTF8 - 1, key.toUTF8());\n  }\n\n  /**\n   * Store byte array under given key. Key is encoded as UTF-8 strings.\n   * Byte array stored as is.\n   *\n   * It's convenient to use this together with `domainObject.encode()`.\n   */\n  setBytes(key: string, value: Uint8Array): void {\n    storage_write(key.lengthUTF8 - 1, key.toUTF8(), value.byteLength, value.dataStart);\n  }\n\n  /**\n   * Get byte array stored under given key. Key is encoded as UTF-8 strings.\n   * Byte array stored as is.\n   *\n   * It's convenient to use this together with `DomainObject.decode()`.\n   */\n  getBytes(key: string): Uint8Array {\n    return this._internalReadBytes(DATA_TYPE_STORAGE, key.lengthUTF8 - 1, key.toUTF8());\n  }\n\n  /**\n   * Returns true if the given key is present in the storage.\n   */\n  contains(key: string): bool {\n    return storage_has_key(key.lengthUTF8 - 1, key.toUTF8());\n  }\n\n  @inline\n  hasKey(key: string): bool {\n    return this.contains(key);\n  }\n\n  delete(key: string): void {\n    storage_remove(key.lengthUTF8 - 1, key.toUTF8());\n  }\n\n  /**\n   * @deprecated Use #delete\n   */\n  @inline\n  remove(key: string): void {\n    this.delete(key);\n  }\n\n  /**\n   * @deprecated Use #delete\n   */\n  @inline\n  removeItem(key: string): void {\n    this.delete(key);\n  }\n\n  /**\n   * Store 64-bit unsigned int under given key. Key is encoded as UTF-8 strings.\n   * Number is encoded as decimal string.\n   */\n  setU64(key: string, value: u64): void {\n    this.setItem(key, value.toString());\n  }\n\n  /**\n   * Get 64-bit unsigned int stored under given key. Key is encoded as UTF-8 strings.\n   * Number is encoded as decimal string.\n   *\n   * @returns int value or 0 if value is not found\n   */\n  getU64(key: string): u64 {\n    return U64.parseInt(this.getItem(key) || \"0\");\n  }\n\n  /**\n   * Stores given generic value under the key. Key is encoded as UTF-8 strings.\n   * Supported types: bool, integer, string and data objects defined in model.ts.\n   *\n   * @param key A key to use for storage.\n   * @param value A value to store.\n   */\n  set<T>(key: string, value: T): void {\n    if (isString<T>()) {\n      this.setString(key, value);\n    } else if (isInteger<T>()) {\n      this.setString(key, value.toString());\n    } else {\n      this.setBytes(key, value.encode());\n    }\n  }\n\n  /**\n   * Gets given generic value stored under the key. Key is encoded as UTF-8 strings.\n   * Supported types: bool, integer, string and data objects defined in model.ts.\n   *\n   * @param key A key to read from storage.\n   * @param defaultValue The default value if the key is not available\n   * @returns A value of type T stored under the given key.\n   */\n  get<T>(key: string, defaultValue: T = null): T {\n    if (isString<T>() || isInteger<T>()) {\n      return near.parseFromString<T>(this.getString(key), defaultValue);\n    } else {\n      return near.parseFromBytes<T>(this.getBytes(key), defaultValue);\n    }\n  }\n\n  /**\n   * @hidden\n   * Reads given params into the internal scratch buffer and returns length.\n   */\n  private _internalBufferRead(dataType: DataTypeIndex, keyLen: usize, key: usize): usize {\n    for (let i = 0; i < 2; ++i) {\n      let len = data_read(\n        dataType,\n        keyLen,\n        key,\n        this._scratchBuf.byteLength,\n        this._scratchBuf.dataStart,\n      );\n      if (len <= <usize>(this._scratchBuf.byteLength)) {\n        return len;\n      }\n      this._scratchBuf = new Uint8Array(len);\n    }\n    assert(false, \"Internal scratch buffer was resized more than once\");\n    return 0;\n  }\n\n  /**\n   * @hidden\n   * Reads a string for the given params.\n   */\n  _internalReadString(dataType: DataTypeIndex, keyLen: usize, key: usize): string {\n    let len = this._internalBufferRead(dataType, keyLen, key);\n    if (len == 0) {\n      return null;\n    }\n    return String.fromUTF8(this._scratchBuf.dataStart, len);\n  }\n\n  /**\n   * @hidden\n   * Reads bytes for the given params.\n   */\n  _internalReadBytes(dataType: DataTypeIndex, keyLen: usize, key: usize): Uint8Array {\n    let len = this._internalBufferRead(dataType, keyLen, key);\n    if (len == 0) {\n      return null;\n    }\n    let res = new Uint8Array(len);\n    memory.copy(res.dataStart, this._scratchBuf.dataStart, len);\n    return res;\n  }\n}\n\n/**\n * An instance of a Storage class that is used for working with contract storage on the blockchain.\n */\nexport let storage: Storage = new Storage();\n\n/**\n * A namespace with classes and functions for persistent collections on the blockchain.\n */\nexport namespace collections {\n  const _KEY_LENGTH_SUFFIX = \":len\";\n  const _KEY_FRONT_INDEX_SUFFIX = \":front\";\n  const _KEY_BACK_INDEX_SUFFIX = \":back\";\n  const _KEY_ELEMENT_SUFFIX = \"::\";\n  const _KEY_RATING_SUFFIX = \":r\";\n  const _RATING_OFFSET: u64 = 2147483648;\n\n  /**\n   * A vector class that implements a persistent array.\n   */\n  export class Vector<T> {\n    private _elementPrefix: string;\n    private _lengthKey: string;\n    private _length: i32;\n\n    /**\n     * Creates or restores a persistent vector with a given storage prefix.\n     * Always use a unique storage prefix for different collections.\n     * @param prefix A prefix to use for every key of this vector.\n     */\n    constructor(prefix: string) {\n      this._elementPrefix = prefix + _KEY_ELEMENT_SUFFIX;\n      this._lengthKey = prefix + _KEY_LENGTH_SUFFIX;\n      this._length = -1;\n    }\n\n    /**\n     * @returns An interal key for a given index.\n     */\n    @inline\n    private _key(index: i32): string {\n      return this._elementPrefix + index.toString();\n    }\n\n    /**\n     * Removes the content of the element from storage without changing length of the vector.\n     * @param index The index of the element to remove.\n     */\n    delete(index: i32): void {\n      assert(this.containsIndex(index), \"Index out of range\");\n      storage.delete(this._key(index));\n    }\n\n    /**\n     * @param index The index to check.\n     * @returns True if the given index is within the range of the vector indices.\n     */\n    containsIndex(index: i32): bool {\n      return index >= 0 && index < this.length;\n    }\n\n    /**\n     * @returns True if the vector is empty.\n     */\n    get isEmpty(): bool {\n      return this.length == 0;\n    }\n\n    /**\n     * @returns The length of the vector.\n     */\n    get length(): i32 {\n      if (this._length < 0) {\n        this._length = storage.get<i32>(this._lengthKey, 0);\n      }\n      return this._length;\n    }\n\n    /**\n     * Internally sets the length of the vector\n     */\n    private set length(value: i32) {\n      this._length = value;\n      storage.set<i32>(this._lengthKey, value);\n    }\n\n    /**\n     * Returns the element of the vector for a given index. Asserts the given index is within the\n     * range of the vector.\n     * @param index The index of the element to return.\n     * @returns The element at the given index.\n     */\n    @operator(\"[]\")\n    private __get(index: i32): T {\n      assert(this.containsIndex(index), \"Index out of range\");\n      return this.__unchecked_get(index);\n    }\n\n    /**\n     * Returns the element of the vector for a given index without checks.\n     * @param index The index of the element to return.\n     * @returns The element at the given index.\n     */\n    @operator(\"{}\")\n    private __unchecked_get(index: i32): T {\n      return storage.get<T>(this._key(index));\n    }\n\n    /**\n     * Sets the value of an element at the given index. Asserts the given index is within the\n     * range of the vector.\n     * @param index The index of the element.\n     * @param value The new value.\n     */\n    @operator(\"[]=\")\n    private __set(index: i32, value: T): void {\n      assert(this.containsIndex(index), \"Index out of range\");\n      this.__unchecked_set(index, value);\n    }\n\n    /**\n     * Sets the value of an element at the given index without checks.\n     * @param index The index of the element.\n     * @param value The new value.\n     */\n    @operator(\"{}=\")\n    private __unchecked_set(index: i32, value: T): void {\n      storage.set<T>(this._key(index), value);\n    }\n\n    /**\n     * Adds a new element to the end of the vector. Increases the length of the vector.\n     * @param element A new element to add.\n     * @returns The index of a newly added element\n     */\n    push(element: T): i32 {\n      let index = this.length;\n      this.length = index + 1;\n      this.__unchecked_set(index, element);\n      return index;\n    }\n\n    /**\n     * Adds a new element to the end of the vector. Increases the length of the vector.\n     * @param element A new element to add.\n     * @returns The index of a newly added element\n     */\n    @inline\n    pushBack(element: T): i32 {\n      return this.push(element);\n    }\n\n    /**\n     * Removes the last element from the vector and returns it. Asserts that the vector is not empty.\n     * Decreases the length of the vector.\n     * @returns The removed last element of the vector.\n     */\n    pop(): T {\n      assert(this.length > 0, \"Vector is empty\");\n      let index = this.length - 1;\n      this.length = index;\n      let result = this.__unchecked_get(index);\n      storage.delete(this._key(index));\n      return result;\n    }\n\n    /**\n     * Removes the last element from the vector and returns it. Asserts that the vector is not empty.\n     * Decreases the length of the vector.\n     * @returns The removed last element of the vector.\n     */\n    @inline\n    popBack(): T {\n      return this.pop();\n    }\n\n    /**\n     * @returns The last element of the vector. Asserts that the vector is not empty.\n     */\n    get back(): T {\n      return this.__get(this.length - 1);\n    }\n\n    /**\n     * @returns The last element of the vector. Asserts that the vector is not empty.\n     */\n    @inline\n    get last(): T {\n      return this.back;\n    }\n\n    /**\n     * @returns The first element of the vector. Asserts that the vector is not empty.\n     */\n    get front(): T {\n      return this.__get(0);\n    }\n\n    /**\n     * @returns The first element of the vector. Asserts that the vector is not empty.\n     */\n    @inline\n    get first(): T {\n      return this.front;\n    }\n  }\n\n\n  /**\n   * A deque class that implements a persistent bidirectional queue.\n   */\n  export class Deque<T> {\n    private _elementPrefix: string;\n    private _frontIndexKey: string;\n    private _backIndexKey: string;\n    private _frontIndex: i32;\n    private _backIndex: i32;\n\n    /**\n     * Creates or restores a persistent deque with a given storage prefix.\n     * Always use a unique storage prefix for different collections.\n     * @param prefix A prefix to use for every key of this deque.\n     */\n    constructor(prefix: string) {\n      this._elementPrefix = prefix + _KEY_ELEMENT_SUFFIX;\n      this._frontIndexKey = prefix + _KEY_FRONT_INDEX_SUFFIX;\n      this._backIndexKey = prefix + _KEY_BACK_INDEX_SUFFIX;\n      this._frontIndex = i32.MIN_VALUE;\n      this._backIndex = i32.MAX_VALUE;\n    }\n\n    /**\n     * @returns An interal key for a given index.\n     */\n    @inline\n    private _key(index: i32): string {\n      return this._elementPrefix + index.toString();\n    }\n\n    /**\n     * @returns The index of the first/front element of the deque (inclusive).\n     */\n    private get frontIndex(): i32 {\n      if (this._frontIndex == i32.MIN_VALUE) {\n        this._frontIndex = storage.get<i32>(this._frontIndexKey, 0);\n      }\n      return this._frontIndex;\n    }\n\n    /**\n     * Internal. Sets the index of the first/front element.\n     */\n    private set frontIndex(value: i32) {\n      this._frontIndex = value;\n      storage.set<i32>(this._frontIndexKey, value);\n    }\n\n    /**\n     * @returns The index of the last/back element of the deque (inclusive).\n     */\n    private get backIndex(): i32 {\n      if (this._backIndex == i32.MAX_VALUE) {\n        this._backIndex = storage.get<i32>(this._backIndexKey, -1);\n      }\n      return this._backIndex;\n    }\n\n    /**\n     * Internal. Sets the index of the last/back element.\n     */\n    private set backIndex(value: i32) {\n      this._backIndex = value;\n      storage.set<i32>(this._backIndexKey, value);\n    }\n\n    /**\n     * @param index The index to check.\n     * @returns True if the given index is within the range of the deque indices.\n     */\n    containsIndex(index: i32): bool {\n      return index >= 0 && index < this.length;\n    }\n\n    /**\n     * Removes the content of the element from storage without changing length of the deque.\n     * @param index The index of the element to remove.\n     */\n    delete(index: i32): void {\n      assert(this.containsIndex(index), \"Index out of range\");\n      storage.delete(this._key(index + this.frontIndex));\n    }\n\n    /**\n     * @returns The length of the deque.\n     */\n    get length(): i32 {\n      return this.backIndex - this.frontIndex + 1;\n    }\n\n    /**\n     * @returns True if the deque is empty.\n     */\n    get isEmpty(): bool {\n      return this.length == 0;\n    }\n\n    /**\n     * Returns the element of the deque for a given index. Asserts the given index is within the\n     * range of the vector.\n     * @param index The index of the element to return.\n     * @returns The element at the given index.\n     */\n    @operator(\"[]\")\n    private __get(index: i32): T {\n      assert(this.containsIndex(index), \"Index out of range\");\n      return this.__unchecked_get(index);\n    }\n\n    /**\n     * Returns the element of the deque for a given index without checks.\n     * @param index The index of the element to return.\n     * @returns The element at the given index.\n     */\n    @operator(\"{}\")\n    private __unchecked_get(index: i32): T {\n      return storage.get<T>(this._key(index + this.frontIndex));\n    }\n\n    /**\n     * Sets the new value of an element at the given index. Asserts the given index is within the\n     * range of the deque.\n     * @param index The index of the element.\n     * @param value The new value.\n     */\n    @operator(\"[]=\")\n    private __set(index: i32, value: T): void {\n      assert(this.containsIndex(index), \"Index out of range\");\n      this.__unchecked_set(index, value);\n    }\n\n    /**\n     * Sets the new value of an element at the given index without checks.\n     * @param index The index of the element.\n     * @param value The new value.\n     */\n    @operator(\"{}=\")\n    private __unchecked_set(index: i32, value: T): void {\n      storage.set<T>(this._key(index + this.frontIndex), value);\n    }\n\n    /**\n     * Adds a new element in front of the deque. Increases the length of the deque.\n     * @param element A new element to add.\n     * @returns The index of a newly added element\n     */\n    pushFront(element: T): i32 {\n      this.frontIndex -= 1;\n      this.__unchecked_set(0, element);\n      return 0;\n    }\n\n    /**\n     * Removes the first/front element from the deque and returns it.\n     * Asserts that the deque is not empty. Decreases the length of the deque.\n     * @returns The removed first element of the queue.\n     */\n    popFront(): T {\n      assert(this.length > 0, \"Deque is empty\");\n      let result = this.__unchecked_get(0);\n      storage.delete(this._key(this.frontIndex));\n      this.frontIndex += 1;\n      return result;\n    }\n\n    /**\n     * @returns The first/front element of the deque.\n     */\n    get front(): T {\n      return this.__get(0);\n    }\n\n    /**\n     * @returns The first/front element of the deque.\n     */\n    @inline\n    get first(): T {\n      return this.front;\n    }\n\n    /**\n     * Adds a new element to the end of the deque. Increases the length of the deque.\n     * @param element A new element to add.\n     * @returns The index of a newly added element\n     */\n    pushBack(element: T): i32 {\n      let index = this.length;\n      this.backIndex += 1;\n      this.__unchecked_set(index, element);\n      return index;\n    }\n\n    /**\n     * Removes the last/back element from the deque and returns it.\n     * Asserts that the deque is not empty. Decreases the length of the deque.\n     * @returns The removed first element of the queue.\n     */\n    popBack(): T {\n      let index = this.length - 1;\n      assert(index >= 0, \"Deque is empty\");\n      let result = this.__unchecked_get(index);\n      storage.delete(this._key(this.backIndex));\n      this.backIndex -= 1;\n      return result;\n    }\n\n    /**\n     * @returns The last/back element of the deque.\n     */\n    get back(): T {\n      return this.__get(this.length - 1);\n    }\n\n    /**\n     * @returns The last/back element of the deque.\n     */\n    @inline\n    get last(): T {\n      return this.back;\n    }\n  }\n\n\n  /**\n   * A map class that implements a persistent unordered map.\n   * NOTE: The Map doesn't store keys, so if you need to retrive them, include keys in the values.\n   */\n  export class Map<K, V> {\n    private _elementPrefix: string;\n\n    /**\n     * Creates or restores a persistent map with a given storage prefix.\n     * Always use a unique storage prefix for different collections.\n     * @param prefix A prefix to use for every key of this map.\n     */\n    constructor(prefix: string) {\n      this._elementPrefix = prefix + _KEY_ELEMENT_SUFFIX;\n    }\n\n    /**\n     * @returns An interal string key for a given key of type K.\n     */\n    private _key(key: K): string {\n      return this._elementPrefix + key.toString();\n    }\n\n    /**\n     * Returns values of the map between the given start key and the end key.\n     * @param start Starting from which key to include values. Default is `null`, means from the beginning.\n     * @param end Up to which key include values (inclusive). Default is `null`, means to the end.\n     * @param limit The maximum number of values to return. Default is `-1`, means no limit.\n     * @param startInclusive Whether the start key is inclusive. Default is `true`, means include start key.\n     *     It's useful to set it to false for pagination.\n     */\n    values(start: K = null, end: K = null, limit: i32 = -1, startInclusive: bool = true): V[] {\n      let startKey = (start != null) ? this._key(start) : this._elementPrefix;\n      if (!startInclusive) {\n        startKey += String.fromCharCode(0);\n      }\n      let endKey = (end != null) ? this._key(end) : (this._elementPrefix + String.fromCharCode(255));\n      let keys = storage.keyRange(startKey, endKey, limit);\n      return keys.map<V>((key: string) => storage.get<V>(key));\n    }\n\n    /**\n     * @param key Key to check.\n     * @returns True if the given key present in the map.\n     */\n    contains(key: K): bool {\n      return storage.contains(this._key(key));\n    }\n\n    /**\n     * Removes value and the key from the map.\n     * @param key Key to remove.\n     */\n    delete(key: K): void {\n      storage.delete(this._key(key));\n    }\n\n    /**\n     * @param key Key of the element.\n     * @param defaultValue The default value if the key is not present.\n     * @returns Value for the given key or the default value.\n     */\n    get(key: K, defaultValue: V = null): V {\n      return storage.get<V>(this._key(key), defaultValue);\n    }\n\n    /**\n     * Sets the new value for the given key.\n     * @param key Key of the element.\n     * @param value The new value of the element.\n     */\n    set(key: K, value: V): void {\n      storage.set<V>(this._key(key), value);\n    }\n  }\n\n  /**\n   * A TopN class that can return first N keys of a type K sorted by rating. Rating is stored as i32.\n   * Default sort order is descending (highest rated keys), but can be changed to ascending (lowest rated keys).\n   */\n  export class TopN<K> {\n    // Internally, this prefix is used for storing padded ratings\n    private _orderPrefix: string;\n    // Whether the order is descending\n    private _descending: bool;\n    // Number of unique keys.\n    private _length: i32;\n    // The key to store length.\n    private _lengthKey: string;\n\n    // A map to store rating by key\n    private _ratings: Map<K, i32>;\n\n    /**\n     * Creates or restores a persistent top N collection with a given storage prefix.\n     * Always use a unique storage prefix for different collections.\n     * @param prefix A prefix to use for every key of this collection.\n     * @param descending Sorting order of keys for rating. Default is descending (the highest rated keys).\n     */\n    constructor(prefix: string, descending: bool = true) {\n      this._ratings = new Map<K, i32>(prefix + _KEY_RATING_SUFFIX);\n      this._orderPrefix = prefix + _KEY_ELEMENT_SUFFIX;\n      this._descending = descending;\n      this._lengthKey = prefix + _KEY_LENGTH_SUFFIX;\n      this._length = -1;\n    }\n\n    /**\n     * @returns A suffix for an internal key for a given external key of type K.\n     */\n    private _keySuffix(key: K): string {\n      return _KEY_ELEMENT_SUFFIX + key.toString();\n    }\n\n    /**\n     * @returns Converted integer rating into a padded string.\n     */\n    private _ratingKey(rating: i32): string {\n      let r: u32 = <u32>((<i64>rating) + _RATING_OFFSET);\n      if (this._descending) {\n        r = u32.MAX_VALUE - r;\n      }\n      return r.toString().padStart(10, \"0\");\n    }\n\n    /**\n     * Creates an internal key from a given rating and a given external key.\n     */\n    private _orderKey(rating: i32, key: K): string {\n      return this._orderPrefix + this._ratingKey(rating) + this._keySuffix(key);\n    }\n\n    /**\n     * @returns True if the TopN collection is empty.\n     */\n    get isEmpty(): bool {\n      return this.length == 0;\n    }\n\n    /**\n     * @returns The number of unique elements in the TopN collection.\n     */\n    get length(): i32 {\n      if (this._length < 0) {\n        this._length = storage.get<i32>(this._lengthKey, 0);\n      }\n      return this._length;\n    }\n\n    /**\n     * Internally sets the length of the collection.\n     */\n    private set length(value: i32) {\n      this._length = value;\n      storage.set<i32>(this._lengthKey, value);\n    }\n\n\n    /**\n     * @param key Key to check.\n     * @returns True if the given key is present.\n     */\n    contains(key: K): bool {\n      return this._ratings.contains(key);\n    }\n\n    /**\n     * Removes rating and the key from the collection.\n     * @param key Key to remove.\n     */\n    delete(key: K): void {\n      if (this.contains(key)) {\n        let rating = this._ratings.get(key);\n        this._ratings.delete(key);\n        storage.delete(this._orderKey(rating, key));\n        this.length -= 1;\n      }\n    }\n\n    /**\n     * @param keys The array of keys to lookup rating.\n     * @returns an array of key to rating pairs for the given keys.\n     */\n    keysToRatings(keys: K[]): near.MapEntry<K, i32>[] {\n      let result = Array.create<near.MapEntry<K, i32>>(keys.length);\n      for (let index = 0; index < keys.length; ++index) {\n        let key = keys[index];\n        result[index] = new near.MapEntry<K, i32>(key, this._ratings.get(key));\n      }\n      return result;\n    }\n\n    /**\n     * @param limit The maximum limit of keys to return.\n     * @returns The array of top rated keys.\n     */\n    getTop(limit: i32): K[] {\n      let orderKeys = storage.keys(this._orderPrefix, limit);\n      return orderKeys.map<K>((orderKey: string) => storage.get<K>(orderKey));\n    }\n\n    /**\n     * Returns a top list starting from the given key (exclusive). It's useful for pagination.\n     * @param limit The maximum limit of keys to return.\n     * @param fromKey The key from which return top list (exclisive).\n     * @returns The array of top rated keys starting from the given key.\n     */\n    getTopFromKey(limit: i32, fromKey: K): K[] {\n      let rating = this.getRating(fromKey, 0);\n      let orderKeys = storage.keyRange(\n        this._orderKey(rating, fromKey) + String.fromCharCode(0),\n        this._orderPrefix + String.fromCharCode(255),\n        limit);\n      return orderKeys.map<K>((orderKey: string) => storage.get<K>(orderKey));\n    }\n\n    /**\n     * @param limit The maximum limit of keys to return.\n     * @returns The array of top rated keys with their corresponding rating.\n     */\n    getTopWithRating(limit: i32): near.MapEntry<K, i32>[] {\n      return this.keysToRatings(this.getTop(limit));\n    }\n\n    /**\n     * Returns a top list with rating starting from the given key (exclusive).\n     * It's useful for pagination.\n     * @param limit The maximum limit of keys to return.\n     * @param fromKey The key from which return top list (exclisive).\n     * @returns The array of top rated keys with their rating starting from the given key.\n     */\n    getTopWithRatingFromKey(limit: i32, fromKey: K): near.MapEntry<K, i32>[] {\n      return this.keysToRatings(this.getTopFromKey(limit, fromKey));\n    }\n\n    /**\n     * @param key Key of the element.\n     * @param defaultRating The default rating to return if the key is not present.\n     * @returns Value for the given key or the defaultRating.\n     */\n    getRating(key: K, defaultRating: i32 = 0): i32 {\n      return this._ratings.get(key, defaultRating);\n    }\n\n    /**\n     * Sets the new rating for the given key.\n     * @param key The key to update.\n     * @param rating The new rating of the key.\n     */\n    setRating(key: K, rating: i32): void {\n      if (this.contains(key)) {\n        let oldRating = this.getRating(key);\n        storage.delete(this._orderKey(oldRating, key));\n      } else {\n        this.length += 1;\n      }\n      this._ratings.set(key, rating);\n      storage.set<K>(this._orderKey(rating, key), key);\n    }\n\n    /**\n     * Increments rating of the given key by the given increment (1 by default).\n     * @param key The key to update.\n     * @param increment The increment value for the rating (1 by default).\n     */\n    incrementRating(key: K, increment: i32 = 1): void {\n      let oldRating = 0;\n      if (this.contains(key)) {\n        oldRating = this.getRating(key);\n        storage.delete(this._orderKey(oldRating, key));\n      } else {\n        this.length += 1;\n      }\n      let rating = oldRating + increment;\n      this._ratings.set(key, rating);\n      storage.set<K>(this._orderKey(rating, key), key);\n    }\n  }\n\n  /**\n   * Creates or restores a persistent vector with a given storage prefix.\n   * Always use a unique storage prefix for different collections.\n   * @param prefix A prefix to use for every key of this vector.\n   */\n  export function vector<T>(prefix: string): Vector<T> {\n    return new Vector<T>(prefix);\n  }\n\n  /**\n   * Creates or restores a persistent deque with a given storage prefix.\n   * Always use a unique storage prefix for different collections.\n   * @param prefix A prefix to use for every key of this deque.\n   */\n  export function deque<T>(prefix: string): Deque<T> {\n    return new Deque<T>(prefix);\n  }\n\n  /**\n   * Creates or restores a persistent map with a given storage prefix.\n   * Always use a unique storage prefix for different collections.\n   * @param prefix A prefix to use for every key of this map.\n   */\n  export function map<K, V>(prefix: string): Map<K, V> {\n    return new Map<K, V>(prefix);\n  }\n\n  /**\n   * Creates or restores a persistent TopN with a given storage prefix.\n   * Always use a unique storage prefix for different collections.\n   * @param prefix A prefix to use for every key of this collection.\n   * @param descending Sorting order of keys for rating. Default is descending (the highest rated keys).\n   */\n  export function topN<K>(prefix: string, descending: bool = true): TopN<K> {\n    return new TopN<K>(prefix, descending);\n  }\n}\n\n/**\n * Provides context for contract execution, including information about transaction sender, etc.\n */\nclass Context {\n  /**\n   * Account ID of transaction sender.\n   */\n  get sender(): string {\n    return storage._internalReadString(DATA_TYPE_ORIGINATOR_ACCOUNT_ID, 0, 0);\n  }\n\n  /**\n   * Account ID of contract.\n   */\n  get contractName(): string {\n    return storage._internalReadString(DATA_TYPE_CURRENT_ACCOUNT_ID, 0, 0);\n  }\n\n  /**\n   * Current block index.\n   */\n  get blockIndex(): u64 {\n    return block_index();\n  }\n\n  /**\n   * The amount of tokens received with this execution call.\n   */\n  get receivedAmount(): u128 {\n    let buffer = new Uint8Array(16);\n    received_amount(buffer.dataStart);\n    return u128.fromBytes(<Uint8Array>buffer);\n  }\n\n  /**\n   * The amount of tokens that are locked in the account. Storage usage fee is deducted from this balance.\n   */\n  get frozenBalance(): u128 {\n    let buffer = new Uint8Array(16);\n    frozen_balance(buffer.dataStart);\n    return u128.fromBytes(<Uint8Array>buffer);\n  }\n\n  /**\n   * The amount of tokens that can be used for running wasm, creating transactions, and sending to other contracts\n   * through cross-contract calls.\n   */\n  get liquidBalance(): u128 {\n    let buffer = new Uint8Array(16);\n    liquid_balance(buffer.dataStart);\n    return u128.fromBytes(<Uint8Array>buffer);\n  }\n\n  /**\n   * The current storage usage in bytes.\n   */\n  get storageUsage(): u64 {\n    return storage_usage();\n  }\n\n  /**\n   * Moves assets from liquid balance to frozen balance.\n   * If there is enough liquid balance will deposit the maximum amount. Otherwise will deposit as much as possible.\n   * Will fail if there is less than minimum amount on the liquid balance. Returns the deposited amount.\n   */\n  deposit(minAmount: u128, maxAmount: u128): u128 {\n    let minAmountBuffer = minAmount.toUint8Array();\n    let maxAmountBuffer = maxAmount.toUint8Array();\n    let balanceBuffer = new Uint8Array(16);\n    deposit(minAmountBuffer.dataStart, maxAmountBuffer.dataStart, balanceBuffer.dataStart);\n    return u128.fromBytes(<Uint8Array>balanceBuffer);\n  }\n\n   /**\n   * Moves assets from frozen balance to liquid balance.\n   * If there is enough frozen balance will withdraw the maximum amount. Otherwise will withdraw as much as possible.\n   * Will fail if there is less than minimum amount on the frozen balance. Returns the withdrawn amount.\n   */\n  withdraw(minAmount: u128, maxAmount: u128): u128 {\n     let minAmountBuffer = minAmount.toUint8Array();\n     let maxAmountBuffer = maxAmount.toUint8Array();\n     let balanceBuffer = new Uint8Array(16);\n     withdraw(minAmountBuffer.dataStart, maxAmountBuffer.dataStart, balanceBuffer.dataStart);\n     return u128.fromBytes(<Uint8Array>balanceBuffer);\n  }\n}\n\nexport let context: Context = new Context();\n\nexport namespace near {\n\n  /**\n   * Parses the given string to return a value of the given generic type.\n   * Supported types: bool, integer, string and data objects defined in model.ts.\n   *\n   * @param s String to parse.\n   * @param defaultValue The default value if the string is null\n   * @returns A parsed value of type T.\n   */\n  export function parseFromString<T>(s: string, defaultValue: T = null): T {\n    if (s == null) {\n      return defaultValue;\n    }\n    if (isString<T>()) {\n      return s;\n    } else if (isInteger<T>()) {\n      if (defaultValue instanceof bool) {\n        return <T>(s == \"true\");\n      } else if (isSigned<T>()) {\n        return <T>I64.parseInt(s);\n      } else {\n        return <T>U64.parseInt(s);\n      }\n    } else {\n      let v = instantiate<T>();\n      return v.decode(stringToBytes(s));\n    }\n  }\n\n  /**\n   * Parses the given bytes array to return a value of the given generic type.\n   * Supported types: bool, integer, string and data objects defined in model.ts.\n   *\n   * @param bytes Bytes to parse.\n   * @param defaultValue The default value if the bytes are null\n   * @returns A parsed value of type T.\n   */\n  export function parseFromBytes<T>(bytes: Uint8Array, defaultValue: T = null): T {\n    if (bytes == null) {\n      return defaultValue;\n    }\n    if (isString<T>() || isInteger<T>()) {\n      return parseFromString<T>(bytesToString(bytes), defaultValue);\n    } else {\n      let v = instantiate<T>();\n      return v.decode(bytes);\n    }\n  }\n\n  export function bytesToString(bytes: Uint8Array): string {\n    return String.fromUTF8(bytes.dataStart, bytes.byteLength)\n  }\n\n  export function stringToBytes(s: string): Uint8Array {\n    let len = s.lengthUTF8 - 1;\n    let bytes = new Uint8Array(len);\n    memory.copy(bytes.dataStart, s.toUTF8(), len);\n    return bytes;\n  }\n\n  /**\n   * Helper class to store key->value pairs.\n   */\n  export class MapEntry<K, V> {\n    key: K;\n    value: V;\n\n    constructor(key: K, value: V) {\n      this.key = key;\n      this.value = value;\n    }\n  }\n\n  /**\n   * Hash given data. Returns hash as 32-byte array.\n   * @param data data can be passed as either Uint8Array or anything with .toString (hashed as UTF-8 string).\n   */\n  export function hash<T>(data: T): Uint8Array {\n    let result = new Uint8Array(32);\n    if (data instanceof Uint8Array) {\n      _near_hash(data.byteLength, data.dataStart, result.dataStart);\n    } else {\n      let str = data.toString();\n      _near_hash(str.lengthUTF8 - 1, str.toUTF8(), result.dataStart);\n    }\n    return result;\n  }\n\n  /**\n   * Hash given data. Returns hash as 32-bit integer.\n   * @param data data can be passed as either Uint8Array or anything with .toString (hashed as UTF-8 string).\n   */\n  export function hash32<T>(data: T): u32 {\n    let dataToHash : Uint8Array;\n    if (data instanceof Uint8Array) {\n      return _near_hash32(data.byteLength, data.dataStart);\n    } else {\n      let str = data.toString();\n      return _near_hash32(str.lengthUTF8 - 1, str.toUTF8());\n    }\n  }\n\n  /**\n   * Returns random byte buffer of given length.\n   */\n  export function randomBuffer(len: u32): Uint8Array {\n    let result = new Uint8Array(len);\n    _near_random_buf(len, result.dataStart);\n    return result;\n  }\n\n  /**\n   * Returns random 32-bit integer.\n   */\n  export function random32(): u32 {\n    return random32();\n  }\n\n  export function log(msg: string): void {\n    _near_log(<usize>msg);\n  }\n\n  export function str<T>(value: T): string {\n    let arr: Array<T> = [value];\n    return arr.toString();\n  }\n\n  export function base58(source: Uint8Array): string {\n    // Code converted from:\n    // https://github.com/cryptocoinjs/base-x/blob/master/index.js\n    const iFACTOR = 2; // TODO: Calculate precise value to avoid overallocating\n    const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n    let BASE = ALPHABET.length;\n    let LEADER = ALPHABET.charAt(0);\n\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    let pend = source.length\n\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n\n    // Allocate enough space in big-endian base58 representation.\n    let size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    let b58 = new Uint8Array(size)\n\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = i32(source[pbegin])\n\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (256 * b58[it]) >>> 0\n        b58[it] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n\n      assert(carry == 0, 'Non-zero carry');\n      length = i\n      pbegin++\n    }\n\n    // Skip leading zeroes in base58 result.\n    let it = size - length\n    while (it !== size && b58[it] === 0) {\n      it++\n    }\n\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it < size; ++it) str += ALPHABET.charAt(b58[it])\n\n    return str\n  }\n}\n\n/**\n * Class to make asynchronous calls to other contracts and receive callbacks.\n * Here is an example on how to create a new async call with the callback.\n * ```\n * export function callMetaNear(): void {\n *   let itemArgs: AddItemArgs = {\n *     accountId: \"alice.near\",\n *     itemId: \"Sword +9000\",s\n *   };\n *   let promise = ContractPromise.create(\n *     \"metanear\",\n *     \"addItem\",\n *     itemArgs.encode(),\n *     0,\n *   );\n *   // Setting up args for the callback\n *   let requestArgs: OnItemAddedArgs = {\n *     \"itemAddedRequestId\": \"UNIQUE_REQUEST_ID\",\n *   };\n *   let callbackPromise = promise.then(\n *      \"_onItemAdded\",\n *      requestArgs.encode(),\n *      2,  // Attaching 2 additional requests, in case we need to do another call\n *   );\n *   callbackPromise.returnAsResult();\n * }\n * ```\n * See docs on used methods for more details.\n */\nexport class ContractPromise {\n  // Session-based unique promise ID. Don't preserve it longer than this execution.\n  id: i32;\n\n  /**\n   * Creates a new async call promise. Returns an instance of `ContractPromise`.\n   * The call would be scheduled if the this current execution of the contract succeeds\n   * without errors or failed asserts.\n   * @param contractName Account ID of the remote contract to call. E.g. `metanear`.\n   * @param methodName Method name on the remote contract to call. E.g. `addItem`.\n   * @param args Serialized arguments to pass into the method. To get them create a new model\n   *     specific for the method you calling, e.g. `AddItemArgs`. Then create an instance of it\n   *     and populate arguments. After this, serialize it into bytes. E.g.\n   *     ```\n   *     let itemArgs: AddItemArgs = {\n   *       accountId: \"alice.near\",\n   *       itemId: \"Sword +9000\",\n   *     };\n   *     // Serialize args\n   *     let args = itemArgs.encode();\n   *     ```\n   * @param amount The amount of tokens from your contract to be sent to the remote contract with this call.\n   */\n  static create(\n      contractName: string,\n      methodName: string,\n      args: Uint8Array,\n      amount: u128 = 0\n  ): ContractPromise {\n    return {\n      id: promise_create(\n        contractName.lengthUTF8 - 1, contractName.toUTF8(),\n        methodName.lengthUTF8 - 1, methodName.toUTF8(),\n        args.byteLength, args.dataStart, amount.toUint8Array().dataStart)\n    };\n  }\n\n  /**\n   * Creating a callback for the AsyncCall Promise created with `create` method.\n   * @param methodName Method name on your contract to be called to receive the callback.\n   *     NOTE: Your callback method name can start with `_`, which would prevent other\n   *     contracts from calling it directly. Only callbacks can call methods with `_` prefix.\n   * @param args Serialized arguments on your callback method, see `create` for details.\n   * @param amount The amount of tokens from the called contract to be sent to the current contract with this call.\n   */\n  then(\n      methodName: string,\n      args: Uint8Array,\n      amount: u128\n  ): ContractPromise {\n    return {\n      id: promise_then(\n        this.id,\n        methodName.lengthUTF8 - 1, methodName.toUTF8(),\n        args.byteLength, args.dataStart,\n        amount.toUint8Array().dataStart)\n    };\n  }\n\n  /**\n   * Returns the promise as a result of your function. Don't return any other results from the function.\n   * Your current function should be `void` and shouldn't return anything else. E.g.\n   * ```\n   * export function callMetaNear(): void {\n   *   let itemArgs: AddItemArgs = {\n   *     accountId: \"alice.near\",\n   *     itemId: \"Sword +9000\",\n   *   };\n   *   let promise = ContractPromise.create(\n   *     \"metanear\",\n   *     \"addItem\",\n   *     itemArgs.encode(),\n   *     0,\n   *     0,\n   *   );\n   *   promise.returnAsResult();\n   * }\n   * ```\n   *\n   * Now when you call `callMetaNear` method, it creates new promise to `metanear` contract.\n   * And saying that the result of the current execution depends on the result `addItem`.\n   * Even though this contract is not going to be called with a callback, the contract which\n   * calling `callMetaNear` would receive the result from `addItem`. This call essentially acts\n   * as a proxy.\n   *\n   * You can also attach a callback on top of the promise before returning it, e.g.\n   *\n   * ```\n   *   ...\n   *   let promise = ContractPromise.create(\n   *      ...\n   *   );\n   *   // Setting up args for the callback\n   *   let requestArgs: OnItemAddedArgs = {\n   *     \"itemAddedRequestId\": \"UNIQUE_REQUEST_ID\",\n   *   };\n   *   let callbackPromise = promise.then(\n   *      \"_onItemAdded\",\n   *      requestArgs.encode(),\n   *      2,  // Attaching 2 additional requests, in case we need to do another call\n   *   );\n   *   callbackPromise.returnAsResult();\n   * }\n   * ```\n   */\n  returnAsResult(): void {\n    return_promise(this.id);\n  }\n\n  /**\n   * Joins multiple async call promises into one, to aggregate results before the callback.\n   * NOTE: Given promises can only be new async calls and can't be callbacks.\n   * Joined promise can't be returned as a result\n   * @param promises List of async call promises to join.\n   */\n  static all(promises: ContractPromise[]): ContractPromise {\n    assert(promises.length > 0);\n    let id = promises[0].id;\n    for (let i = 1; i < promises.length; i++) {\n      id = promise_and(id, promises[i].id);\n    }\n    return { id };\n  }\n\n  /**\n   * Method to receive async (one or multiple) results from the remote contract in the callback.\n   * Example of using it.\n   * ```\n   * // This function is prefixed with `_`, so other contracts or people can't call it directly.\n   * export function _onItemAdded(itemAddedRequestId: string): bool {\n   *   // Get all results\n   *   let results = ContractPromise.getResults();\n   *   let addItemResult = results[0];\n   *   // Verifying the remote contract call succeeded.\n   *   if (addItemResult.success) {\n   *     // Decoding data from the bytes buffer into the local object.\n   *     let data = AddItemResult.decode(addItemResult.buffer);\n   *     if (data.itemPower > 9000) {\n   *       return true;\n   *     }\n   *   }\n   *   return false;\n   * }\n   * ```\n   * @returns An array of results based on the number of promises the callback was created on.\n   *     If the callback using `then` was scheduled only on one result, then one result will be returned.\n   */\n  static getResults() : ContractPromiseResult[] {\n    let count = <i32>result_count();\n    let results = Array.create<ContractPromiseResult>(count);\n    for (let i = 0; i < count; i++) {\n      let isOk = result_is_ok(i);\n      if (!isOk) {\n        results[i] = { success: false }\n        continue;\n      }\n      let buffer = storage._internalReadBytes(DATA_TYPE_RESULT, 0, i);\n      results[i] = { success: isOk, buffer: buffer };\n    }\n    return results;\n  }\n}\n\n/**\n * Class to store results of the async calls on the remote contracts.\n */\nexport class ContractPromiseResult {\n  // Whether the execution of the remote call succeeded.\n  success: bool;\n  // Bytes data returned by the remote contract. Can be empty or null, if the remote\n  // method returns `void`.\n  buffer: Uint8Array;\n}\n\n@external(\"env\", \"storage_write\")\ndeclare function storage_write(key_len: usize, key_ptr: usize, value_len: usize, value_ptr: usize): void;\n@external(\"env\", \"storage_remove\")\ndeclare function storage_remove(key_len: usize, key_ptr: usize): void;\n@external(\"env\", \"storage_has_key\")\ndeclare function storage_has_key(key_len: usize, key_ptr: usize): bool;\n@external(\"env\", \"storage_iter\")\ndeclare function storage_iter(prefix_len: usize, prefix_ptr: usize): u32;\n@external(\"env\", \"storage_range\")\ndeclare function storage_range(start_len: usize, start_ptr: usize, end_len: usize, end_ptr: usize): u32;\n@external(\"env\", \"storage_iter_next\")\ndeclare function storage_iter_next(id: u32): u32;\n\n@external(\"env\", \"result_count\")\ndeclare function result_count(): u32;\n@external(\"env\", \"result_is_ok\")\ndeclare function result_is_ok(index: u32): bool;\n\n@external(\"env\", \"return_value\")\ndeclare function return_value(value_len: usize, value_ptr: usize): void;\n@external(\"env\", \"return_promise\")\ndeclare function return_promise(promise_index: u32): void;\n\n@external(\"env\", \"data_read\")\ndeclare function data_read(type_index: u32, key_len: usize, key: usize, max_buf_len: usize, buf_ptr: usize): usize;\n\n@external(\"env\", \"promise_create\")\ndeclare function promise_create(\n    account_id_len: usize, account_id_ptr: usize,\n    method_name_len: usize, method_name_ptr: usize,\n    args_len: usize, args_ptr: usize,\n    amount_ptr: usize): u32;\n\n@external(\"env\", \"promise_then\")\ndeclare function promise_then(\n    promise_index: u32,\n    method_name_len: usize, method_name_ptr: usize,\n    args_len: usize, args_ptr: usize,\n    amount_ptr: usize): u32;\n\n@external(\"env\", \"promise_and\")\ndeclare function promise_and(promise_index1: u32, promise_index2: u32): u32;\n\n@external(\"env\", \"check_ethash\")\ndeclare function check_ethash(\n    block_number: u64,\n    header_hash_ptr: usize, header_hash_len: u32,\n    nonce: u64,\n    mix_hash_ptr: usize, mix_hash_len: u32,\n    difficulty: u64\n): bool;\n\n/**\n * @hidden\n * Hash buffer is 32 bytes\n */\n@external(\"env\", \"hash\")\ndeclare function _near_hash(value_len: usize, value_ptr: usize, buf_ptr: usize): void;\n\n/**\n * @hidden\n */\n@external(\"env\", \"hash32\")\ndeclare function _near_hash32(value_len: usize, value_ptr: usize): u32;\n\n/**\n * @hidden\n * Fills given buffer with random u8.\n */\n@external(\"env\", \"random_buf\")\ndeclare function _near_random_buf(buf_len: u32, buf_ptr: usize): void\n\n/**\n * @hidden\n */\n@external(\"env\", \"random32\")\ndeclare function random32(): u32;\n\n/**\n * @hidden\n */\n@external(\"env\", \"log\")\ndeclare function _near_log(msg_ptr: usize): void;\n\n/**\n * @hidden\n */\n@external(\"env\", \"frozen_balance\")\ndeclare function frozen_balance(balance_ptr: usize): void;\n\n/**\n * @hidden\n */\n@external(\"env\", \"liquid_balance\")\ndeclare function liquid_balance(balance_ptr: usize): void;\n\n/**\n * @hidden\n */\n@external(\"env\", \"storage_usage\")\ndeclare function storage_usage(): u64;\n\n/**\n * @hidden\n */\n@external(\"env\", \"deposit\")\ndeclare function deposit(min_amount_ptr: usize, max_amount_ptr: usize, balance_ptr: usize): void;\n\n/**\n * @hidden\n */\n@external(\"env\", \"withdraw\")\ndeclare function withdraw(min_amount_ptr: usize, max_amount_ptr: usize, balance_ptr: usize): void;\n\n/**\n * @hidden\n */\n@external(\"env\", \"received_amount\")\ndeclare function received_amount(balance_ptr: usize): void;\n\n/**\n * @hidden\n */\n@external(\"env\", \"block_index\")\ndeclare function block_index(): u64;\n\n// adapted from https://gist.github.com/Juszczak/63e6d9e01decc850de03\n/**\n * base64 encoding/decoding\n */\nexport namespace base64 {\n  const PADCHAR: string = '=';\n  const ALPHA: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n  function getByte64(s: string, i: u32): u32 {\n    return this.ALPHA.indexOf(s.charAt(i));\n  }\n\n  /**\n   * Decode base64-encoded string and return a Uint8Array.\n   * @param s Base64 encoded string.\n   */\n  export function decode (s: string): Uint8Array {\n    let i: u32, b10: u32;\n    let pads = 0,\n        imax = s.length as u32;\n\n    if (imax == 0) {\n      return new Uint8Array(0);\n    }\n\n    if (s.charAt(imax - 1) == this.PADCHAR) {\n      pads = 1;\n      if (s.charAt(imax - 2) == this.PADCHAR) {\n        pads = 2;\n      }\n      imax -= 4;\n    }\n\n    let main_chunk = imax % 4 == 0 ? imax / 4 * 3 : (imax / 4 + 1) * 3;\n    let pad_size = pads > 0 ? 3 - pads : 0;\n    let size = main_chunk + pad_size;\n\n    let x = new Uint8Array(size),\n        index = 0;\n\n    for (i = 0; i < imax; i += 4) {\n      b10 = (this.getByte64(s, i) << 18) | (this.getByte64(s, i + 1) << 12) | (this.getByte64(s, i + 2) << 6) | this.getByte64(s, i + 3);\n      x[index++] = b10 >> 16;\n      x[index++] = (b10 >> 8) & 255;\n      x[index++] = b10 & 255;\n    }\n    switch (pads) {\n      case 1:\n        b10 = (this.getByte64(s, i) << 18) | (this.getByte64(s, i + 1) << 12) | (this.getByte64(s, i + 2) << 6);\n        x[index++] = b10 >> 16;\n        x[index++] = (b10 >> 8) & 255;\n        break;\n      case 2:\n        b10 = (this.getByte64(s, i) << 18) | (this.getByte64(s, i + 1) << 12);\n        x[index++] = b10 >> 16;\n        break;\n    }\n\n    return x;\n  }\n\n  /**\n   * Encode Uint8Array in base64.\n   * @param bytes Byte array of type Uint8Array.\n   */\n  export function encode(bytes: Uint8Array): string {\n    let i: i32, b10: u32;\n    let x = new Array<string>(),\n        imax = bytes.length - bytes.length % 3;\n\n    if (bytes.length == 0) {\n      return \"\";\n    }\n\n    for (i = 0; i < imax; i += 3) {\n      b10 = (bytes[i] as u32 << 16) | (bytes[i+1] as u32 << 8) | bytes[i+2] as u32;\n      x.push(this.ALPHA.charAt(b10 >> 18));\n      x.push(this.ALPHA.charAt((b10 >> 12) & 63));\n      x.push(this.ALPHA.charAt((b10 >> 6) & 63));\n      x.push(this.ALPHA.charAt(b10 & 63));\n    }\n\n    switch (bytes.length - imax) {\n      case 1:\n        b10 = bytes[i] as u32 << 16;\n        x.push(this.ALPHA.charAt(b10 >> 18));\n        x.push(this.ALPHA.charAt((b10 >> 12) & 63));\n        x.push(this.PADCHAR);\n        x.push(this.PADCHAR);\n        break;\n      case 2:\n        b10 = (bytes[i] as u32 << 16) | (bytes[i+1] as u32 << 8);\n        x.push(this.ALPHA.charAt(b10 >> 18));\n        x.push(this.ALPHA.charAt((b10 >> 12) & 63));\n        x.push(this.ALPHA.charAt((b10 >> 6) & 63));\n        x.push(this.PADCHAR);\n        break;\n    }\n\n    return x.join('');\n  }\n}\n","/// <reference path=\"./rt/index.d.ts\" />\n\nimport { BLOCK, BLOCK_MAXSIZE, BLOCK_OVERHEAD } from \"./rt/common\";\nimport { idof } from \"./builtins\";\nimport { E_INVALIDLENGTH } from \"./util/error\";\n\nexport abstract class ArrayBufferView {\n\n  @unsafe data: ArrayBuffer;\n  @unsafe dataStart: usize;\n  @unsafe dataLength: u32;\n\n  protected constructor(length: i32, alignLog2: i32) {\n    if (<u32>length > <u32>BLOCK_MAXSIZE >>> alignLog2) throw new RangeError(E_INVALIDLENGTH);\n    var buffer = __alloc(length = length << alignLog2, idof<ArrayBuffer>());\n    this.data = changetype<ArrayBuffer>(buffer); // retains\n    this.dataStart = buffer;\n    this.dataLength = length;\n  }\n\n  get byteOffset(): i32 {\n    return <i32>(this.dataStart - changetype<usize>(this.data));\n  }\n\n  get byteLength(): i32 {\n    return this.dataLength;\n  }\n\n  get length(): i32 {\n    ERROR(\"missing implementation: subclasses must implement ArrayBufferView#length\");\n    return unreachable();\n  }\n}\n\n@sealed export class ArrayBuffer {\n\n  static isView<T>(value: T): bool {\n    if (value) {\n      if (value instanceof Int8Array) return true;\n      if (value instanceof Uint8Array) return true;\n      if (value instanceof Uint8ClampedArray) return true;\n      if (value instanceof Int16Array) return true;\n      if (value instanceof Uint16Array) return true;\n      if (value instanceof Int32Array) return true;\n      if (value instanceof Uint32Array) return true;\n      if (value instanceof Int64Array) return true;\n      if (value instanceof Uint64Array) return true;\n      if (value instanceof Float32Array) return true;\n      if (value instanceof Float64Array) return true;\n      if (value instanceof DataView) return true;\n    }\n    return false;\n  }\n\n  constructor(length: i32) {\n    if (<u32>length > <u32>BLOCK_MAXSIZE) throw new RangeError(E_INVALIDLENGTH);\n    var buffer = __alloc(<usize>length, idof<ArrayBuffer>());\n    memory.fill(buffer, 0, <usize>length);\n    return changetype<ArrayBuffer>(buffer); // retains\n  }\n\n  get byteLength(): i32 {\n    return changetype<BLOCK>(changetype<usize>(this) - BLOCK_OVERHEAD).rtSize;\n  }\n\n  slice(begin: i32 = 0, end: i32 = BLOCK_MAXSIZE): ArrayBuffer {\n    var length = this.byteLength;\n    begin = begin < 0 ? max(length + begin, 0) : min(begin, length);\n    end   = end   < 0 ? max(length + end  , 0) : min(end  , length);\n    var outSize = <usize>max(end - begin, 0);\n    var out = __alloc(outSize, idof<ArrayBuffer>());\n    memory.copy(out, changetype<usize>(this) + <usize>begin, outSize);\n    return changetype<ArrayBuffer>(out); // retains\n  }\n\n  toString(): string {\n    return \"[object ArrayBuffer]\";\n  }\n}\n","// Common error messages for use accross the standard library. Keeping error messages compact\n// and reusing them where possible ensures minimal static data in binaries.\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_INDEXOUTOFRANGE: string = \"Index out of range\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_INVALIDLENGTH: string = \"Invalid length\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_EMPTYARRAY: string = \"Array is empty\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_HOLEYARRAY: string = \"Element type must be nullable if array is holey\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_NOTIMPLEMENTED: string = \"Not implemented\";\n","import { COMPARATOR, SORT as SORT_IMPL } from \"./util/sort\";\nimport { E_INDEXOUTOFRANGE } from \"./util/error\";\nimport { idof } from \"./builtins\";\nimport { ArrayBufferView } from \"./arraybuffer\";\n\nexport class Int8Array extends ArrayBufferView {\n  [key: number]: i8;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<i8>();\n\n  constructor(length: i32) {\n    super(length, alignof<i8>());\n  }\n\n  get buffer(): ArrayBuffer {\n    return this.data;\n  }\n\n  get length(): i32 {\n    return this.byteLength;\n  }\n\n  @operator(\"[]\") // unchecked is built-in\n  private __get(index: i32): i8 {\n    if (<u32>index >= <u32>this.dataLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i8>(this.dataStart + <usize>index);\n  }\n\n  @operator(\"[]=\") // unchecked is built-in\n  private __set(index: i32, value: native<i8>): void {\n    if (<u32>index >= <u32>this.dataLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<i8>(this.dataStart + <usize>index, value);\n  }\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int8Array {\n    return FILL<Int8Array, i8>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i8, b: i8) => i32 = COMPARATOR<i8>()): Int8Array {\n    return SORT<Int8Array, i8>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Int8Array {\n    return SUBARRAY<Int8Array, i8>(this, begin, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: i8, index: i32, array: Int8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int8Array, i8, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: i8, index: i32, array: Int8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int8Array, i8, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: i8, index: i32, self: Int8Array) => i8): Int8Array {\n    return MAP<Int8Array, i8>(this, fn);\n  }\n\n  findIndex(fn: (value: i8, index: i32, self: Int8Array) => bool): i32 {\n    return FIND_INDEX<Int8Array, i8>(this, fn);\n  }\n\n  some(fn: (value: i8, index: i32, self: Int8Array) => bool): bool {\n    return SOME<Int8Array, i8>(this, fn);\n  }\n\n  every(fn: (value: i8, index: i32, self: Int8Array) => bool): bool {\n    return EVERY<Int8Array, i8>(this, fn);\n  }\n\n  forEach(fn: (value: i8, index: i32, self: Int8Array) => void): void {\n    FOREACH<Int8Array, i8>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, i8>(this);\n  }\n}\n\nexport class Uint8Array extends ArrayBufferView {\n  [key: number]: u8;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u8>();\n\n  constructor(length: i32) {\n    super(length, alignof<u8>());\n  }\n\n  get buffer(): ArrayBuffer {\n    return this.data;\n  }\n\n  get length(): i32 {\n    return this.byteLength;\n  }\n\n  @operator(\"[]\") // unchecked is built-in\n  private __get(index: i32): u8 {\n    if (<u32>index >= <u32>this.dataLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u8>(this.dataStart + <usize>index);\n  }\n\n  @operator(\"[]=\") // unchecked is built-in\n  private __set(index: i32, value: native<u8>): void {\n    if (<u32>index >= <u32>this.dataLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u8>(this.dataStart + <usize>index, value);\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8Array {\n    return FILL<Uint8Array, u8>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u8, b: u8) => i32 = COMPARATOR<u8>()): Uint8Array {\n    return SORT<Uint8Array, u8>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Uint8Array {\n    return SUBARRAY<Uint8Array, u8>(this, begin, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u8, index: i32, array: Uint8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint8Array, u8, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u8, index: i32, array: Uint8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint8Array, u8, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u8, index: i32, self: Uint8Array) => u8): Uint8Array {\n    return MAP<Uint8Array, u8>(this, fn);\n  }\n\n  findIndex(fn: (value: u8, index: i32, self: Uint8Array) => bool): i32 {\n    return FIND_INDEX<Uint8Array, u8>(this, fn);\n  }\n\n  some(fn: (value: u8, index: i32, self: Uint8Array) => bool): bool {\n    return SOME<Uint8Array, u8>(this, fn);\n  }\n\n  every(fn: (value: u8, index: i32, self: Uint8Array) => bool): bool {\n    return EVERY<Uint8Array, u8>(this, fn);\n  }\n\n  forEach(fn: (value: u8, index: i32, self: Uint8Array) => void): void {\n    FOREACH<Uint8Array, u8>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u8>(this);\n  }\n}\n\nexport class Uint8ClampedArray extends ArrayBufferView {\n  [key: number]: u8;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u8>();\n\n  constructor(length: i32) {\n    super(length, alignof<u8>());\n  }\n\n  get buffer(): ArrayBuffer {\n    return this.data;\n  }\n\n  get length(): i32 {\n    return this.byteLength;\n  }\n\n  @operator(\"[]\") // unchecked is built-in\n  private __get(index: i32): u8 {\n    if (<u32>index >= <u32>this.dataLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u8>(this.dataStart + <usize>index);\n  }\n\n  @operator(\"[]=\") // unchecked is built-in\n  private __set(index: i32, value: native<u8>): void {\n    if (<u32>index >= <u32>this.dataLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u8>(this.dataStart + <usize>index, ~(<i32>value >> 31) & (((255 - value) >> 31) | value));\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8ClampedArray {\n    return FILL<Uint8ClampedArray, u8>(this, value, start, end);\n  }\n\n  sort(fn: (a: u8, b: u8) => i32 = COMPARATOR<u8>()): Uint8ClampedArray {\n    return SORT<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  subarray(start: i32 = 0, end: i32 = 0x7fffffff): Uint8ClampedArray {\n    return SUBARRAY<Uint8ClampedArray, u8>(this, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u8, index: i32, array: Uint8ClampedArray) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint8ClampedArray, u8, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u8, index: i32, array: Uint8ClampedArray) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint8ClampedArray, u8, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u8, index: i32, self: Uint8ClampedArray) => u8): Uint8ClampedArray {\n    return MAP<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  findIndex(fn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): i32 {\n    return FIND_INDEX<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  some(fn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): bool {\n    return SOME<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  every(fn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): bool {\n    return EVERY<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  forEach(fn: (value: u8, index: i32, self: Uint8ClampedArray) => void): void {\n    FOREACH<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u8>(this);\n  }\n}\n\nexport class Int16Array extends ArrayBufferView {\n  [key: number]: i16;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<i16>();\n\n  constructor(length: i32) {\n    super(length, alignof<i16>());\n  }\n\n  get buffer(): ArrayBuffer {\n    return this.data;\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<i16>();\n  }\n\n  @operator(\"[]\") // unchecked is built-in\n  private __get(index: i32): i16 {\n    if (<u32>index >= <u32>this.dataLength >>> alignof<i16>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i16>(this.dataStart + (<usize>index << alignof<i16>()));\n  }\n\n  @operator(\"[]=\") // unchecked is built-in\n  private __set(index: i32, value: native<i16>): void {\n    if (<u32>index >= <u32>this.dataLength >>> alignof<i16>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<i16>(this.dataStart + (<usize>index << alignof<i16>()), value);\n  }\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int16Array {\n    return FILL<Int16Array, i16>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i16, b: i16) => i32 = COMPARATOR<i16>()): Int16Array {\n    return SORT<Int16Array, i16>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Int16Array {\n    return SUBARRAY<Int16Array, i16>(this, begin, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: i16, index: i32, array: Int16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int16Array, i16, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: i16, index: i32, array: Int16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int16Array, i16, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: i16, index: i32, self: Int16Array) => i16): Int16Array {\n    return MAP<Int16Array, i16>(this, fn);\n  }\n\n  findIndex(fn: (value: i16, index: i32, self: Int16Array) => bool): i32 {\n    return FIND_INDEX<Int16Array, i16>(this, fn);\n  }\n\n  some(fn: (value: i16, index: i32, self: Int16Array) => bool): bool {\n    return SOME<Int16Array, i16>(this, fn);\n  }\n\n  every(fn: (value: i16, index: i32, self: Int16Array) => bool): bool {\n    return EVERY<Int16Array, i16>(this, fn);\n  }\n\n  forEach(fn: (value: i16, index: i32, self: Int16Array) => void): void {\n    FOREACH<Int16Array, i16>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, i16>(this);\n  }\n}\n\nexport class Uint16Array extends ArrayBufferView {\n  [key: number]: u16;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u16>();\n\n  constructor(length: i32) {\n    super(length, alignof<u16>());\n  }\n\n  get buffer(): ArrayBuffer {\n    return this.data;\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<u16>();\n  }\n\n  @operator(\"[]\") // unchecked is built-in\n  private __get(index: i32): u16 {\n    if (<u32>index >= <u32>this.dataLength >>> alignof<u16>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u16>(this.dataStart + (<usize>index << alignof<u16>()));\n  }\n\n  @operator(\"[]=\") // unchecked is built-in\n  private __set(index: i32, value: native<u16>): void {\n    if (<u32>index >= <u32>this.dataLength >>> alignof<u16>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u16>(this.dataStart + (<usize>index << alignof<u16>()), value);\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint16Array {\n    return FILL<Uint16Array, u16>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u16, b: u16) => i32 = COMPARATOR<u16>()): Uint16Array {\n    return SORT<Uint16Array, u16>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Uint16Array {\n    return SUBARRAY<Uint16Array, u16>(this, begin, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u16, index: i32, array: Uint16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint16Array, u16, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u16, index: i32, array: Uint16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint16Array, u16, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u16, index: i32, self: Uint16Array) => u16): Uint16Array {\n    return MAP<Uint16Array, u16>(this, fn);\n  }\n\n  findIndex(fn: (value: u16, index: i32, self: Uint16Array) => bool): i32 {\n    return FIND_INDEX<Uint16Array, u16>(this, fn);\n  }\n\n  some(fn: (value: u16, index: i32, self: Uint16Array) => bool): bool {\n    return SOME<Uint16Array, u16>(this, fn);\n  }\n\n  every(fn: (value: u16, index: i32, self: Uint16Array) => bool): bool {\n    return EVERY<Uint16Array, u16>(this, fn);\n  }\n\n  forEach(fn: (value: u16, index: i32, self: Uint16Array) => void): void {\n    FOREACH<Uint16Array, u16>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u16>(this);\n  }\n}\n\nexport class Int32Array extends ArrayBufferView {\n  [key: number]: i32;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<i32>();\n\n  constructor(length: i32) {\n    super(length, alignof<i32>());\n  }\n\n  get buffer(): ArrayBuffer {\n    return this.data;\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<i32>();\n  }\n\n  @operator(\"[]\") // unchecked is built-in\n  private __get(index: i32): i32 {\n    if (<u32>index >= <u32>this.dataLength >>> alignof<i32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i32>(this.dataStart + (<usize>index << alignof<i32>()));\n  }\n\n  @operator(\"[]=\") // unchecked is built-in\n  private __set(index: i32, value: i32): void {\n    if (<u32>index >= <u32>this.dataLength >>> alignof<i32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<i32>(this.dataStart + (<usize>index << alignof<i32>()), value);\n  }\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int32Array {\n    return FILL<Int32Array, i32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i32, b: i32) => i32 = COMPARATOR<i32>()): Int32Array {\n    return SORT<Int32Array, i32>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Int32Array {\n    return SUBARRAY<Int32Array, i32>(this, begin, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: i32, index: i32, array: Int32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int32Array, i32, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: i32, index: i32, array: Int32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int32Array, i32, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: i32, index: i32, self: Int32Array) => i32): Int32Array {\n    return MAP<Int32Array, i32>(this, fn);\n  }\n\n  findIndex(fn: (value: i32, index: i32, self: Int32Array) => bool): i32 {\n    return FIND_INDEX<Int32Array, i32>(this, fn);\n  }\n\n  some(fn: (value: i32, index: i32, self: Int32Array) => bool): bool {\n    return SOME<Int32Array, i32>(this, fn);\n  }\n\n  every(fn: (value: i32, index: i32, self: Int32Array) => bool): bool {\n    return EVERY<Int32Array, i32>(this, fn);\n  }\n\n  forEach(fn: (value: i32, index: i32, self: Int32Array) => void): void {\n    FOREACH<Int32Array, i32>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, i32>(this);\n  }\n}\n\nexport class Uint32Array extends ArrayBufferView {\n  [key: number]: u32;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u32>();\n\n  constructor(length: i32) {\n    super(length, alignof<u32>());\n  }\n\n  get buffer(): ArrayBuffer {\n    return this.data;\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<u32>();\n  }\n\n  @operator(\"[]\") // unchecked is built-in\n  private __get(index: i32): u32 {\n    if (<u32>index >= <u32>this.dataLength >>> alignof<u32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u32>(this.dataStart + (<usize>index << alignof<u32>()));\n  }\n\n  @operator(\"[]=\") // unchecked is built-in\n  private __set(index: i32, value: u32): void {\n    if (<u32>index >= <u32>this.dataLength >>> alignof<u32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u32>(this.dataStart + (<usize>index << alignof<u32>()), value);\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint32Array {\n    return FILL<Uint32Array, u32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u32, b: u32) => i32 = COMPARATOR<u32>()): Uint32Array {\n    return SORT<Uint32Array, u32>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Uint32Array {\n    return SUBARRAY<Uint32Array, u32>(this, begin, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u32, index: i32, array: Uint32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint32Array, u32, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u32, index: i32, array: Uint32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint32Array, u32, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u32, index: i32, self: Uint32Array) => u32): Uint32Array {\n    return MAP<Uint32Array, u32>(this, fn);\n  }\n\n  findIndex(fn: (value: u32, index: i32, self: Uint32Array) => bool): i32 {\n    return FIND_INDEX<Uint32Array, u32>(this, fn);\n  }\n\n  some(fn: (value: u32, index: i32, self: Uint32Array) => bool): bool {\n    return SOME<Uint32Array, u32>(this, fn);\n  }\n\n  every(fn: (value: u32, index: i32, self: Uint32Array) => bool): bool {\n    return EVERY<Uint32Array, u32>(this, fn);\n  }\n\n  forEach(fn: (value: u32, index: i32, self: Uint32Array) => void): void {\n    FOREACH<Uint32Array, u32>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u32>(this);\n  }\n}\n\nexport class Int64Array extends ArrayBufferView {\n  [key: number]: i64;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<i64>();\n\n  constructor(length: i32) {\n    super(length, alignof<i64>());\n  }\n\n  get buffer(): ArrayBuffer {\n    return this.data;\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<i64>();\n  }\n\n  @operator(\"[]\") // unchecked is built-in\n  private __get(index: i32): i64 {\n    if (<u32>index >= <u32>this.dataLength >>> alignof<i64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i64>(this.dataStart + (<usize>index << alignof<i64>()));\n  }\n\n  @operator(\"[]=\") // unchecked is built-in\n  private __set(index: i32, value: i64): void {\n    if (<u32>index >= <u32>this.dataLength >>> alignof<i64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<i64>(this.dataStart + (<usize>index << alignof<i64>()), value);\n  }\n\n  fill(value: i64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int64Array {\n    return FILL<Int64Array, i64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i64, b: i64) => i32 = COMPARATOR<i64>()): Int64Array {\n    return SORT<Int64Array, i64>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Int64Array {\n    return SUBARRAY<Int64Array, i64>(this, begin, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: i64, index: i32, array: Int64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int64Array, i64, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: i64, index: i32, array: Int64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int64Array, i64, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: i64, index: i32, self: Int64Array) => i64): Int64Array {\n    return MAP<Int64Array, i64>(this, fn);\n  }\n\n  findIndex(fn: (value: i64, index: i32, self: Int64Array) => bool): i32 {\n    return FIND_INDEX<Int64Array, i64>(this, fn);\n  }\n\n  some(fn: (value: i64, index: i32, self: Int64Array) => bool): bool {\n    return SOME<Int64Array, i64>(this, fn);\n  }\n\n  every(fn: (value: i64, index: i32, self: Int64Array) => bool): bool {\n    return EVERY<Int64Array, i64>(this, fn);\n  }\n\n  forEach(fn: (value: i64, index: i32, self: Int64Array) => void): void {\n    FOREACH<Int64Array, i64>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, i64>(this);\n  }\n}\n\nexport class Uint64Array extends ArrayBufferView {\n  [key: number]: u64;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u64>();\n\n  constructor(length: i32) {\n    super(length, alignof<u64>());\n  }\n\n  get buffer(): ArrayBuffer {\n    return this.data;\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<u64>();\n  }\n\n  @operator(\"[]\") // unchecked is built-in\n  private __get(index: i32): u64 {\n    if (<u32>index >= <u32>this.dataLength >>> alignof<u64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u64>(this.dataStart + (<usize>index << alignof<u64>()));\n  }\n\n  @operator(\"[]=\") // unchecked is built-in\n  private __set(index: i32, value: u64): void {\n    if (<u32>index >= <u32>this.dataLength >>> alignof<u64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u64>(this.dataStart + (<usize>index << alignof<u64>()), value);\n  }\n\n  fill(value: u64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint64Array {\n    return FILL<Uint64Array, u64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u64, b: u64) => i32 = COMPARATOR<u64>()): Uint64Array {\n    return SORT<Uint64Array, u64>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Uint64Array {\n    return SUBARRAY<Uint64Array, u64>(this, begin, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u64, index: i32, array: Uint64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint64Array, u64, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u64, index: i32, array: Uint64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint64Array, u64, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u64, index: i32, self: Uint64Array) => u64): Uint64Array {\n    return MAP<Uint64Array, u64>(this, fn);\n  }\n\n  findIndex(fn: (value: u64, index: i32, self: Uint64Array) => bool): i32 {\n    return FIND_INDEX<Uint64Array, u64>(this, fn);\n  }\n\n  some(fn: (value: u64, index: i32, self: Uint64Array) => bool): bool {\n    return SOME<Uint64Array, u64>(this, fn);\n  }\n\n  every(fn: (value: u64, index: i32, self: Uint64Array) => bool): bool {\n    return EVERY<Uint64Array, u64>(this, fn);\n  }\n\n  forEach(fn: (value: u64, index: i32, self: Uint64Array) => void): void {\n    FOREACH<Uint64Array, u64>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u64>(this);\n  }\n}\n\nexport class Float32Array extends ArrayBufferView {\n  [key: number]: f32;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<f32>();\n\n  constructor(length: i32) {\n    super(length, alignof<f32>());\n  }\n\n  get buffer(): ArrayBuffer {\n    return this.data;\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<f32>();\n  }\n\n  @operator(\"[]\") // unchecked is built-in\n  private __get(index: i32): f32 {\n    if (<u32>index >= <u32>this.dataLength >>> alignof<f32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<f32>(this.dataStart + (<usize>index << alignof<f32>()));\n  }\n\n  @operator(\"[]=\") // unchecked is built-in\n  private __set(index: i32, value: f32): void {\n    if (<u32>index >= <u32>this.dataLength >>> alignof<f32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<f32>(this.dataStart + (<usize>index << alignof<f32>()), value);\n  }\n\n  fill(value: f32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Float32Array {\n    return FILL<Float32Array, f32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: f32, b: f32) => i32 = COMPARATOR<f32>()): Float32Array {\n    return SORT<Float32Array, f32>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Float32Array {\n    return SUBARRAY<Float32Array, f32>(this, begin, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: f32, index: i32, array: Float32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Float32Array, f32, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: f32, index: i32, array: Float32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Float32Array, f32, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: f32, index: i32, self: Float32Array) => f32): Float32Array {\n    return MAP<Float32Array, f32>(this, fn);\n  }\n\n  findIndex(fn: (value: f32, index: i32, self: Float32Array) => bool): i32 {\n    return FIND_INDEX<Float32Array, f32>(this, fn);\n  }\n\n  some(fn: (value: f32, index: i32, self: Float32Array) => bool): bool {\n    return SOME<Float32Array, f32>(this, fn);\n  }\n\n  every(fn: (value: f32, index: i32, self: Float32Array) => bool): bool {\n    return EVERY<Float32Array, f32>(this, fn);\n  }\n\n  forEach(fn: (value: f32, index: i32, self: Float32Array) => void): void {\n    FOREACH<Float32Array, f32>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, f32>(this);\n  }\n}\n\nexport class Float64Array extends ArrayBufferView {\n  [key: number]: f64;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<f64>();\n\n  constructor(length: i32) {\n    super(length, alignof<f64>());\n  }\n\n  get buffer(): ArrayBuffer {\n    return this.data;\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<f64>();\n  }\n\n  @operator(\"[]\") // unchecked is built-in\n  private __get(index: i32): f64 {\n    if (<u32>index >= <u32>this.dataLength >>> alignof<f64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<f64>(this.dataStart + (<usize>index << alignof<f64>()));\n  }\n\n  @operator(\"[]=\") // unchecked is built-in\n  private __set(index: i32, value: f64): void {\n    if (<u32>index >= <u32>this.dataLength >>> alignof<f64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<f64>(this.dataStart + (<usize>index << alignof<f64>()), value);\n  }\n\n  fill(value: f64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Float64Array {\n    return FILL<Float64Array, f64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: f64, b: f64) => i32 = COMPARATOR<f64>()): Float64Array {\n    return SORT<Float64Array, f64>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Float64Array {\n    return SUBARRAY<Float64Array, f64>(this, begin, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: f64, index: i32, array: Float64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Float64Array, f64, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: f64, index: i32, array: Float64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Float64Array, f64, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: f64, index: i32, self: Float64Array) => f64): Float64Array {\n    return MAP<Float64Array, f64>(this, fn);\n  }\n\n  findIndex(fn: (value: f64, index: i32, self: Float64Array) => bool): i32 {\n    return FIND_INDEX<Float64Array, f64>(this, fn);\n  }\n\n  some(fn: (value: f64, index: i32, self: Float64Array) => bool): bool {\n    return SOME<Float64Array, f64>(this, fn);\n  }\n\n  every(fn: (value: f64, index: i32, self: Float64Array) => bool): bool {\n    return EVERY<Float64Array, f64>(this, fn);\n  }\n\n  forEach(fn: (value: f64, index: i32, self: Float64Array) => void): void {\n    FOREACH<Float64Array, f64>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, f64>(this);\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nfunction FILL<TArray extends ArrayBufferView, T extends number>(\n  array: TArray,\n  value: native<T>,\n  start: i32,\n  end: i32\n): TArray {\n  var dataStart = array.dataStart;\n  var length = array.length;\n  start = start < 0 ? max(length + start, 0) : min(start, length);\n  end   = end   < 0 ? max(length + end,   0) : min(end,   length);\n  if (sizeof<T>() == 1) {\n    if (start < end) memory.fill(dataStart + <usize>start, <u8>value, <usize>(end - start));\n  } else {\n    for (; start < end; ++start) {\n      store<T>(dataStart + (<usize>start << alignof<T>()), value);\n    }\n  }\n  return array;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction SORT<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  comparator: (a: T, b: T) => i32\n): TArray {\n  var length = array.length;\n  if (length <= 1) return array;\n  var base = array.dataStart;\n  if (length == 2) {\n    let a: T = load<T>(base, sizeof<T>()); // a = arr[1]\n    let b: T = load<T>(base); // b = arr[0]\n    if (comparator(a, b) < 0) {\n      store<T>(base, b, sizeof<T>()); // arr[1] = b\n      store<T>(base, a); // arr[0] = a\n    }\n    return array;\n  }\n  SORT_IMPL<T>(base, length, comparator);\n  return array;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction SUBARRAY<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  begin: i32,\n  end: i32\n): TArray {\n  var len = <i32>array.length;\n  begin = begin < 0 ? max(len + begin, 0) : min(begin, len);\n  end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n  end   = max(end, begin);\n  var out = changetype<TArray>(__alloc(offsetof<TArray>(), idof<TArray>())); // retains\n  out.data = array.data; // retains\n  out.dataStart = array.dataStart + (<usize>begin << alignof<T>());\n  out.dataLength = (end - begin) << alignof<T>();\n  return out;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction REDUCE<TArray extends ArrayBufferView, T, TRet>(\n  array: TArray,\n  fn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\n  initialValue: TRet\n): TRet {\n  var dataStart = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    initialValue = fn(initialValue, load<T>(dataStart + (<usize>i << alignof<T>())), i, array);\n  }\n  return initialValue;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction REDUCE_RIGHT<TArray extends ArrayBufferView, T, TRet>(\n  array: TArray,\n  fn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\n  initialValue: TRet\n): TRet {\n  var dataStart = array.dataStart;\n  for (let i = array.length - 1; i >= 0; i--) {\n    initialValue = fn(initialValue, load<T>(dataStart + (<usize>i << alignof<T>())), i, array);\n  }\n  return initialValue;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction MAP<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, self: TArray) => T,\n): TArray {\n  var length = array.length;\n  var dataStart = array.dataStart;\n  var out = instantiate<TArray>(length);\n  var outDataStart = out.dataStart;\n  for (let i = 0; i < length; i++) {\n    store<T>(\n      outDataStart + (<usize>i << alignof<T>()),\n      fn(load<T>(dataStart + (<usize>i << alignof<T>())), i, array)\n    );\n  }\n  return out;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction FIND_INDEX<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, array: TArray) => bool,\n): i32 {\n  var dataStart = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    if (fn(load<T>(dataStart + (<usize>i << alignof<T>())), i, array)) return i;\n  }\n  return -1;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction SOME<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, array: TArray) => bool,\n): bool {\n  var dataStart = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    if (fn(load<T>(dataStart + (<usize>i << alignof<T>())), i, array)) return true;\n  }\n  return false;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction EVERY<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, array: TArray) => bool,\n): bool {\n  var dataStart = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    if (fn(load<T>(dataStart + (<usize>i << alignof<T>())), i, array)) continue;\n    return false;\n  }\n  return true;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction FOREACH<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, array: TArray) => void,\n): void {\n  var dataStart = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    fn(load<T>(dataStart + (<usize>i << alignof<T>())), i, array);\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function REVERSE<TArray extends ArrayBufferView, T>(array: TArray): TArray {\n  var dataStart = array.dataStart;\n  for (let front = 0, back = array.length - 1; front < back; ++front, --back) {\n    let frontPtr = dataStart + (<usize>front << alignof<T>());\n    let backPtr = dataStart + (<usize>back << alignof<T>());\n    let temp = load<T>(frontPtr);\n    store<T>(frontPtr, load<T>(backPtr));\n    store<T>(backPtr, temp);\n  }\n  return array;\n}\n","declare function logStr(str: string): void;\ndeclare function logF64(val: f64): void;\n\n/**\n * Extend from this class to handle events from parser.\n * Default implementation traverses whole object tree and does nothing.\n */\nexport abstract class JSONHandler {\n    setString(name: string, value: string): void {\n    }\n\n    setBoolean(name: string, value: bool): void {\n    }\n\n    setNull(name: string): void {\n    }\n\n    setInteger(name: string, value: i64): void {\n    }\n\n    pushArray(name: string): bool {\n        return true;\n    }\n\n    popArray(): void {\n    }\n\n    pushObject(name: string): bool {\n        return true;\n    }\n\n    popObject(): void {\n    }\n}\n\n/**\n * Extend from this class to handle events from parser.\n * This implementation crashes on every unimplemented set/push method\n * to allow easier validation of input.\n */\nexport class ThrowingJSONHandler extends JSONHandler {\n    setString(name: string, value: string): void {\n       assert(false, 'Unexpected string field ' + name + ' : \"' + value + '\"');\n    }\n\n    setBoolean(name: string, value: bool): void {\n       assert(false, 'Unexpected bool field ' + name + ' : ' + (value ? 'true' : 'false'));\n    }\n\n    setNull(name: string): void {\n       assert(false, 'Unexpected null field ' + name);\n    }\n\n    setInteger(name: string, value: i64): void {\n       assert(false, 'Unexpected integer field ' + name + ' : ' + value.toString());\n    }\n\n    pushArray(name: string): bool {\n        assert(false, 'Unexpected array field ' + name);\n        return true;\n    }\n\n    pushObject(name: string): bool {\n        assert(false, 'Unexpected object field ' + name);\n        return true;\n    }\n}\n\nconst TRUE_STR = \"true\";\nconst FALSE_STR = \"false\";\nconst NULL_STR = \"null\";\nlet CHAR_0 = \"0\".charCodeAt(0);\nlet CHAR_9 = \"9\".charCodeAt(0);\nlet CHAR_A = \"A\".charCodeAt(0);\nlet CHAR_A_LOWER = \"a\".charCodeAt(0);\n\nexport class DecoderState {\n    readIndex: i32 = 0;\n    buffer: Uint8Array = null;\n    lastKey: string = null;\n}\n\nexport class JSONDecoder<JSONHandlerT extends JSONHandler> {\n\n    handler: JSONHandlerT;\n    state: DecoderState;\n\n    constructor(handler: JSONHandlerT) {\n        this.handler = handler;\n    }\n\n    deserialize(buffer: Uint8Array, decoderState: DecoderState = null): void {\n        if (decoderState) {\n            this.state = decoderState;\n        } else {\n            this.state = new DecoderState();\n            this.state.readIndex = 0;\n            this.state.buffer = buffer;\n            this.state.lastKey = null;\n        }\n\n        assert(this.parseValue(), \"Cannot parse JSON\");\n\n        // TODO: Error if input left\n    }\n\n    private peekChar(): i32 {\n        if (this.state.readIndex >= this.state.buffer.length) {\n          return -1;\n        }\n        return this.state.buffer[this.state.readIndex];\n    }\n\n    private readChar(): i32 {\n        assert(this.state.readIndex < this.state.buffer.length, \"Unexpected input end\");\n        return this.state.buffer[this.state.readIndex++];\n    }\n\n    private parseValue(): bool {\n        this.skipWhitespace();\n        let result = this.parseObject()\n            || this.parseArray()\n            || this.parseString()\n            || this.parseBoolean()\n            || this.parseNumber()\n            || this.parseNull()\n        this.skipWhitespace();\n        return result;\n    }\n\n    private parseObject(): bool {\n        if (this.peekChar() != \"{\".charCodeAt(0)) {\n            return false;\n        }\n        let key = this.state.lastKey;\n        this.state.lastKey = null;\n        if (this.handler.pushObject(key)) {\n            this.readChar();\n            this.skipWhitespace();\n\n            let firstItem = true;\n            while (this.peekChar() != \"}\".charCodeAt(0)) {\n                if (!firstItem) {\n                    assert(this.readChar() == \",\".charCodeAt(0), \"Expected ','\");\n                } else {\n                    firstItem = false;\n                }\n                this.parseKey();\n                this.parseValue();\n            }\n            assert(this.readChar() == \"}\".charCodeAt(0), \"Unexpected end of object\");\n        }\n        this.handler.popObject();\n        return true;\n    }\n\n    private parseKey(): void {\n        this.skipWhitespace();\n        this.state.lastKey = this.readString();\n        this.skipWhitespace();\n        assert(this.readChar() == \":\".charCodeAt(0), \"Expected ':'\");\n    }\n\n    private parseArray(): bool {\n        if (this.peekChar() != \"[\".charCodeAt(0)) {\n            return false;\n        }\n        let key = this.state.lastKey;\n        this.state.lastKey = null;\n        if (this.handler.pushArray(key)) {\n            this.readChar();\n            this.skipWhitespace();\n\n            let firstItem = true;\n            while (this.peekChar() != \"]\".charCodeAt(0)) {\n                if (!firstItem) {\n                    assert(this.readChar() == \",\".charCodeAt(0), \"Expected ','\");\n                } else {\n                    firstItem = false;\n                }\n                this.parseValue();\n            }\n            assert(this.readChar() == \"]\".charCodeAt(0), \"Unexpected end of array\");\n        }\n        this.handler.popArray();\n        return true;;\n    }\n\n    private parseString(): bool {\n        if (this.peekChar() != '\"'.charCodeAt(0)) {\n            return false;\n        }\n        this.handler.setString(this.state.lastKey, this.readString());\n        return true;\n    }\n\n    private readString(): string {\n        assert(this.readChar() == '\"'.charCodeAt(0), \"Expected double-quoted string\");\n        let savedIndex = this.state.readIndex;\n        let stringParts: Array<string> = null;\n        for (;;) {\n            let byte = this.readChar();\n            assert(byte >= 0x20, \"Unexpected control character\");\n            if (byte == '\"'.charCodeAt(0)) {\n                let s = String.fromUTF8(\n                    <usize>this.state.buffer.buffer + this.state.buffer.byteOffset + savedIndex,\n                    this.state.readIndex - savedIndex - 1\n                );\n                if (stringParts == null) {\n                    return s;\n                }\n                stringParts.push(s);\n                return stringParts.join(\"\");\n            } else if (byte == \"\\\\\".charCodeAt(0)) {\n                if (stringParts == null) {\n                    stringParts = new Array<string>();\n                }\n                if (this.state.readIndex > savedIndex + 1) {\n                    stringParts.push(\n                        String.fromUTF8(\n                            <usize>this.state.buffer.buffer + this.state.buffer.byteOffset + savedIndex,\n                            this.state.readIndex - savedIndex - 1\n                        )\n                    );\n                }\n                stringParts.push(this.readEscapedChar());\n                savedIndex = this.state.readIndex;\n            }\n        }\n        // Should never happen\n        return \"\";\n    }\n\n    private readEscapedChar(): string {\n        let byte = this.readChar();\n        // TODO: Use lookup table for anything except \\u\n        if (byte == '\"'.charCodeAt(0)) {\n            return '\"';\n        }\n        if (byte == \"\\\\\".charCodeAt(0)) {\n            return \"\\\\\";\n        }\n        if (byte == \"/\".charCodeAt(0)) {\n            return \"/\";\n        }\n        if (byte == \"b\".charCodeAt(0)) {\n            return \"\\b\";\n        }\n        if (byte == \"n\".charCodeAt(0)) {\n            return \"\\n\";\n        }\n        if (byte == \"r\".charCodeAt(0)) {\n            return \"\\r\";\n        }\n        if (byte == \"t\".charCodeAt(0)) {\n            return \"\\t\";\n        }\n        if (byte == \"u\".charCodeAt(0)) {\n            let d1 = this.readHexDigit();\n            let d2 = this.readHexDigit();\n            let d3 = this.readHexDigit();\n            let d4 = this.readHexDigit();\n            let charCode = d1 * 0x1000 + d2 * 0x100 + d3 * 0x10 + d4;\n            return String.fromCodePoint(charCode);\n        }\n        assert(false, \"Unexpected escaped character: \" + String.fromCharCode(byte));\n        return \"\";\n    }\n\n    private readHexDigit(): i32 {\n        let byte = this.readChar();\n        let digit = byte - CHAR_0;\n        if (digit > 9) {\n            digit = byte - CHAR_A + 10;\n            if (digit < 10 || digit > 15) {\n                digit = byte - CHAR_A_LOWER + 10;\n            }\n        }\n        let arr: Array<i32> = [byte, digit];\n        assert(digit >= 0 && digit < 16, \"Unexpected \\\\u digit\");\n        return digit;\n    }\n\n    private parseNumber(): bool {\n        // TODO: Parse floats\n        let number: i64 = 0;\n        let sign: i64 = 1;\n        if (this.peekChar() == \"-\".charCodeAt(0)) {\n            sign = -1;\n            this.readChar();\n        }\n        let digits = 0;\n        while (CHAR_0 <= this.peekChar() && this.peekChar() <= CHAR_9 ) {\n            let byte = this.readChar();\n            number *= 10;\n            number += byte - CHAR_0;\n            digits++;\n        }\n        if (digits > 0) {\n            this.handler.setInteger(this.state.lastKey, number * sign);\n            return true;\n        }\n        return false;\n    }\n\n    private parseBoolean(): bool {\n        if (this.peekChar() == FALSE_STR.charCodeAt(0)) {\n            this.readAndAssert(FALSE_STR);\n            this.handler.setBoolean(this.state.lastKey, false);\n            return true;\n        }\n        if (this.peekChar() == TRUE_STR.charCodeAt(0)) {\n            this.readAndAssert(TRUE_STR);\n            this.handler.setBoolean(this.state.lastKey, true);\n            return true;\n        }\n\n        return false;\n    }\n\n    private parseNull(): bool {\n        if (this.peekChar() == NULL_STR.charCodeAt(0)) {\n            this.readAndAssert(NULL_STR);\n            this.handler.setNull(this.state.lastKey);\n            return true;\n        }\n        return false;\n    }\n\n    private readAndAssert(str: string): void {\n        for (let i = 0; i < str.length; i++) {\n            assert(str.charCodeAt(i) == this.readChar(), \"Expected '\" + str + \"'\");\n        }\n    }\n\n    private skipWhitespace(): void {\n        while (this.isWhitespace(this.peekChar())) {\n            this.readChar();\n        }\n    }\n\n    private isWhitespace(charCode: i32): bool {\n        return charCode == 0x9 || charCode == 0xa || charCode == 0xd || charCode == 0x20;\n    }\n}\n","/// <reference path=\"./rt/index.d.ts\" />\n\nimport { BLOCK, BLOCK_OVERHEAD, BLOCK_MAXSIZE } from \"./rt/common\";\nimport { compareImpl, strtol, strtod, isWhiteSpaceOrLineTerminator } from \"./util/string\";\nimport { E_INVALIDLENGTH } from \"./util/error\";\nimport { ArrayBufferView } from \"./arraybuffer\";\nimport { idof } from \"./builtins\";\n\n@sealed export abstract class String {\n\n  @lazy static readonly MAX_LENGTH: i32 = BLOCK_MAXSIZE >>> alignof<u16>();\n\n  static fromCharCode(unit: i32, surr: i32 = -1): string {\n    var out: usize;\n    if (~surr) {\n      out = __alloc(4, idof<string>());\n      store<u16>(out, <u16>unit);\n      store<u16>(out, <u16>surr, 2);\n    } else {\n      out = __alloc(2, idof<string>());\n      store<u16>(out, <u16>unit);\n    }\n    return changetype<string>(out); // retains\n  }\n\n  static fromCodePoint(code: i32): string {\n    assert(<u32>code <= 0x10FFFF);\n    var sur = code > 0xFFFF;\n    var out = __alloc((i32(sur) + 1) << 1, idof<string>());\n    if (!sur) {\n      store<u16>(out, <u16>code);\n    } else {\n      code -= 0x10000;\n      let hi: u32 = (code >>> 10) + 0xD800;\n      let lo: u32 = (code & 0x3FF) + 0xDC00;\n      store<u32>(out, (hi << 16) | lo);\n    }\n    return changetype<string>(out); // retains\n  }\n\n  get length(): i32 {\n    return changetype<BLOCK>(changetype<usize>(this) - BLOCK_OVERHEAD).rtSize >> 1;\n  }\n\n  @operator(\"[]\") charAt(pos: i32): String {\n    if (<u32>pos >= <u32>this.length) return changetype<String>(\"\");\n    var out = __alloc(2, idof<String>());\n    store<u16>(out, load<u16>(changetype<usize>(this) + (<usize>pos << 1)));\n    return changetype<String>(out); // retains\n  }\n\n  charCodeAt(pos: i32): i32 {\n    if (<u32>pos >= <u32>this.length) return -1; // (NaN)\n    return load<u16>(changetype<usize>(this) + (<usize>pos << 1));\n  }\n\n  codePointAt(pos: i32): i32 {\n    if (<u32>pos >= <u32>this.length) return -1; // (undefined)\n    var first = <i32>load<u16>(changetype<usize>(this) + (<usize>pos << 1));\n    if (first < 0xD800 || first > 0xDBFF || pos + 1 == this.length) return first;\n    var second = <i32>load<u16>(changetype<usize>(this) + ((<usize>pos + 1) << 1));\n    if (second < 0xDC00 || second > 0xDFFF) return first;\n    return ((first - 0xD800) << 10) + (second - 0xDC00) + 0x10000;\n  }\n\n  @operator(\"+\") private static __concat(left: String, right: String): String {\n    return select<String>(left, changetype<String>(\"null\"), left !== null).concat(right);\n  }\n\n  concat(other: String): String {\n    if (other === null) other = changetype<String>(\"null\");\n    var thisSize: isize = this.length << 1;\n    var otherSize: isize = other.length << 1;\n    var outSize: usize = thisSize + otherSize;\n    if (outSize == 0) return changetype<String>(\"\");\n    var out = changetype<String>(__alloc(outSize, idof<String>())); // retains\n    memory.copy(changetype<usize>(out), changetype<usize>(this), thisSize);\n    memory.copy(changetype<usize>(out) + thisSize, changetype<usize>(other), otherSize);\n    return out;\n  }\n\n  endsWith(search: String, end: i32 = String.MAX_LENGTH): bool {\n    if (search === null) return false;\n    end = min(max(end, 0), this.length);\n    var searchLength = <isize>search.length;\n    var searchStart = <isize>end - searchLength;\n    if (searchStart < 0) return false;\n    // @ts-ignore: string <-> String\n    return !compareImpl(this, searchStart, search, 0, searchLength);\n  }\n\n  @operator(\"==\") private static __eq(left: String | null, right: String | null): bool {\n    if (left === right) return true;\n    if (left === null || right === null) return false;\n    var leftLength = left.length;\n    if (leftLength != right.length) return false;\n    // @ts-ignore: string <-> String\n    return !compareImpl(left, 0, right, 0, leftLength);\n  }\n\n  @operator.prefix(\"!\")\n  private static __not(str: String | null): bool {\n    return str === null || !str.length;\n  }\n\n  @operator(\"!=\")\n  private static __ne(left: String | null, right: String | null): bool {\n    return !this.__eq(left, right);\n  }\n\n  @operator(\">\") private static __gt(left: String | null, right: String | null): bool {\n    if (left === right || left === null || right === null) return false;\n    var leftLength  = left.length;\n    var rightLength = right.length;\n    if (!leftLength)  return false;\n    if (!rightLength) return true;\n    // @ts-ignore: string <-> String\n    return compareImpl(left, 0, right, 0, min(leftLength, rightLength)) > 0;\n  }\n\n  @operator(\">=\") private static __gte(left: String, right: String): bool {\n    return !this.__lt(left, right);\n  }\n\n  @operator(\"<\") private static __lt(left: String, right: String): bool {\n    if (left === right || left === null || right === null) return false;\n    var leftLength  = left.length;\n    var rightLength = right.length;\n    if (!rightLength) return false;\n    if (!leftLength)  return true;\n    // @ts-ignore: string <-> String\n    return compareImpl(left, 0, right, 0, min(leftLength, rightLength)) < 0;\n  }\n\n  @operator(\"<=\") private static __lte(left: String, right: String): bool {\n    return !this.__gt(left, right);\n  }\n\n  includes(search: String, start: i32 = 0): bool {\n    return this.indexOf(search, start) != -1;\n  }\n\n  indexOf(search: String, start: i32 = 0): i32 {\n    var searchLen = <isize>search.length;\n    if (!searchLen) return 0;\n    var len = <isize>this.length;\n    if (!len) return -1;\n    var searchStart = min(max(<isize>start, 0), len);\n    for (len -= searchLen; searchStart <= len; ++searchStart) {\n      // @ts-ignore: string <-> String\n      if (!compareImpl(this, searchStart, search, 0, searchLen)) return <i32>searchStart;\n    }\n    return -1;\n  }\n\n  lastIndexOf(search: String, start: i32 = i32.MAX_VALUE): i32 {\n    var searchLen = <isize>search.length;\n    if (!searchLen) return this.length;\n    var len = this.length;\n    if (!len) return -1;\n    var searchStart = min(max(<isize>start, 0), <isize>len - searchLen);\n    for (; searchStart >= 0; --searchStart) {\n      // @ts-ignore: string <-> String\n      if (!compareImpl(this, searchStart, search, 0, searchLen)) return <i32>searchStart;\n    }\n    return -1;\n  }\n\n  startsWith(search: String, start: i32 = 0): bool {\n    if (search === null) search = changetype<String>(\"null\");\n    var len = <isize>this.length;\n    var searchStart = min(max(<isize>start, 0), len);\n    var searchLength = <isize>search.length;\n    if (searchLength + searchStart > len) return false;\n    // @ts-ignore: string <-> String\n    return !compareImpl(this, searchStart, search, 0, searchLength);\n  }\n\n  substr(start: i32, length: i32 = i32.MAX_VALUE): String { // legacy\n    var intStart: isize = start;\n    var end: isize = length;\n    var size: isize = this.length;\n    if (intStart < 0) intStart = max(size + intStart, 0);\n    var resultLength = min(max(end, 0), size - intStart);\n    if (resultLength <= 0) return changetype<String>(\"\");\n    var out = __alloc(resultLength << 1, idof<String>());\n    memory.copy(out, changetype<usize>(this) + intStart, resultLength);\n    return changetype<String>(out); // retains\n  }\n\n  substring(start: i32, end: i32 = i32.MAX_VALUE): String {\n    var len: isize = this.length;\n    var finalStart = min<isize>(max(start, 0), len);\n    var finalEnd = min<isize>(max(end, 0), len);\n    var fromPos = min<isize>(finalStart, finalEnd) << 1;\n    var toPos = max<isize>(finalStart, finalEnd) << 1;\n    len = toPos - fromPos;\n    if (!len) return changetype<String>(\"\");\n    if (!fromPos && toPos == this.length << 1) return this;\n    var out = __alloc(len, idof<String>());\n    memory.copy(out, changetype<usize>(this) + fromPos, len);\n    return changetype<String>(out); // retains\n  }\n\n  trim(): String {\n    var length = this.length;\n    var size: usize = length << 1;\n    while (\n      size &&\n      isWhiteSpaceOrLineTerminator(\n        load<u16>(changetype<usize>(this) + size)\n      )\n    ) {\n      size -= 2;\n    }\n    var offset: usize = 0;\n    while (\n      offset < size &&\n      isWhiteSpaceOrLineTerminator(\n        load<u16>(changetype<usize>(this) + offset)\n      )\n    ) {\n      offset += 2; size -= 2;\n    }\n    if (!size) return changetype<String>(\"\");\n    if (!start && size == length << 1) return this;\n    var out = __alloc(size, idof<String>());\n    memory.copy(out, changetype<usize>(this) + offset, size);\n    return changetype<String>(out); // retains\n  }\n\n  @inline\n  trimLeft(): String {\n    return this.trimStart();\n  }\n\n  @inline\n  trimRight(): String {\n    return this.trimEnd();\n  }\n\n  trimStart(): String {\n    var size = <usize>this.length << 1;\n    var offset: usize = 0;\n    while (\n      offset < size &&\n      isWhiteSpaceOrLineTerminator(\n        load<u16>(changetype<usize>(this) + offset)\n      )\n    ) {\n      offset += 2;\n    }\n    if (!offset) return this;\n    size -= offset;\n    if (!size) return changetype<String>(\"\");\n    var out = __alloc(size, idof<String>());\n    memory.copy(out, changetype<usize>(this) + offset, size);\n    return changetype<String>(out); // retains\n  }\n\n  trimEnd(): String {\n    var originalSize = <usize>this.length << 1;\n    var size = originalSize;\n    while (\n      size &&\n      isWhiteSpaceOrLineTerminator(\n        load<u16>(changetype<usize>(this) + size)\n      )\n    ) {\n      size -= 2;\n    }\n    if (!size) return changetype<String>(\"\");\n    if (size == originalSize) return this;\n    var out = __alloc(size, idof<String>());\n    memory.copy(out, changetype<usize>(this), size);\n    return changetype<String>(out); // retains\n  }\n\n  padStart(length: i32, pad: string = \" \"): String {\n    var thisSize = <usize>this.length << 1;\n    var targetSize = <usize>length << 1;\n    var padSize = <usize>pad.length << 1;\n    if (targetSize < thisSize || !padSize) return this;\n    var prependSize = targetSize - thisSize;\n    var out = __alloc(targetSize, idof<String>());\n    if (prependSize > padSize) {\n      let repeatCount = (prependSize - 2) / padSize;\n      let restBase = repeatCount * padSize;\n      let restSize = prependSize - restBase;\n      memory.repeat(out, changetype<usize>(pad), padSize, repeatCount);\n      memory.copy(out + restBase, changetype<usize>(pad), restSize);\n    } else {\n      memory.copy(out, changetype<usize>(pad), prependSize);\n    }\n    memory.copy(out + prependSize, changetype<usize>(this), thisSize);\n    return changetype<String>(out); //  retains\n  }\n\n  padEnd(length: i32, pad: string = \" \"): String {\n    var thisSize = <usize>this.length << 1;\n    var targetSize = <usize>length << 1;\n    var padSize = <usize>pad.length << 1;\n    if (targetSize < thisSize || !padSize) return this;\n    var appendSize = targetSize - thisSize;\n    var out = __alloc(targetSize, idof<String>());\n    memory.copy(out, changetype<usize>(this), thisSize);\n    if (appendSize > padSize) {\n      let repeatCount = (appendSize - 2) / padSize;\n      let restBase = repeatCount * padSize;\n      let restSize = appendSize - restBase;\n      memory.repeat(out + thisSize, changetype<usize>(pad), padSize, repeatCount);\n      memory.copy(out + thisSize + restBase, changetype<usize>(pad), restSize);\n    } else {\n      memory.copy(out + thisSize, changetype<usize>(pad), appendSize);\n    }\n    return changetype<String>(out); // retains\n  }\n\n  repeat(count: i32 = 0): String {\n    var length = this.length;\n\n    // Most browsers can't handle strings 1 << 28 chars or longer\n    if (count < 0 || <u64>length * count > (1 << 28)) {\n      throw new RangeError(E_INVALIDLENGTH);\n    }\n\n    if (count == 0 || !length) return changetype<String>(\"\");\n    if (count == 1) return this;\n    var out = __alloc((length * count) << 1, idof<String>());\n    memory.repeat(out, changetype<usize>(this), <usize>length << 1, count);\n    return changetype<String>(out); // retains\n  }\n\n  replace(search: String, replacement: String): String {\n    var len: usize = this.length;\n    var slen: usize = search.length;\n    if (len <= slen) {\n      return len < slen ? this : select<String>(replacement, this, search == this);\n    }\n    var index: isize = this.indexOf(search);\n    if (~index) {\n      let rlen: usize = replacement.length;\n      len -= slen;\n      let olen = len + rlen;\n      if (olen) {\n        let out = __alloc(olen << 1, idof<String>());\n        memory.copy(out, changetype<usize>(this), index << 1);\n        memory.copy(\n          out + (index << 1),\n          changetype<usize>(replacement),\n          rlen << 1\n        );\n        memory.copy(\n          out + ((index + rlen) << 1),\n          changetype<usize>(this) + ((index + slen) << 1),\n          (len - index) << 1\n        );\n        return changetype<String>(out);\n      }\n    }\n    return this;\n  }\n\n  replaceAll(search: String, replacement: String): String {\n    var len: usize = this.length;\n    var slen: usize = search.length;\n    if (len <= slen) {\n      return len < slen ? this : select<String>(replacement, this, search == this);\n    }\n    var rlen: usize = replacement.length;\n    if (!slen) {\n      if (!rlen) return this;\n      // Special case: 'abc'.replaceAll('', '-') -> '-a-b-c-'\n      let out = __alloc((len + (len + 1) * rlen) << 1, idof<String>());\n      memory.copy(out, changetype<usize>(replacement), rlen << 1);\n      let offset = rlen;\n      for (let i: usize = 0; i < len; ++i) {\n        store<u16>(\n          changetype<usize>(out) + (offset++ << 1),\n          load<u16>(changetype<usize>(this) + (i << 1))\n        );\n        memory.copy(\n          out + (offset << 1),\n          changetype<usize>(replacement),\n          rlen << 1\n        );\n        offset += rlen;\n      }\n      return changetype<String>(out);\n    }\n    var prev: isize = 0, next: isize = 0;\n    if (slen == rlen) {\n      // Fast path when search and replacement have same length\n      let size = len << 1;\n      let out = __alloc(size, idof<String>());\n      memory.copy(out, changetype<usize>(this), size);\n      while (~(next = <isize>this.indexOf(search, <i32>prev))) {\n        memory.copy(out + (next << 1), changetype<usize>(replacement), rlen << 1);\n        prev = next + slen;\n      }\n      return changetype<String>(out);\n    }\n    var out: usize = 0, offset: usize = 0, resLen = len;\n    while (~(next = <isize>this.indexOf(search, <i32>prev))) {\n      if (!out) out = __alloc(len << 1, idof<String>());\n      if (offset > resLen) {\n        let newLength = resLen << 1;\n        out = __realloc(out, newLength << 1);\n        resLen = newLength;\n      }\n      let chunk = next - prev;\n      memory.copy(\n        out + (offset << 1),\n        changetype<usize>(this) + (prev << 1),\n        chunk << 1\n      );\n      offset += chunk;\n      memory.copy(\n        out + (offset << 1),\n        changetype<usize>(replacement),\n        rlen << 1\n      );\n      offset += rlen;\n      prev = next + slen;\n    }\n    if (offset) {\n      if (offset > resLen) {\n        let newLength = resLen << 1;\n        out = __realloc(out, newLength << 1);\n        resLen = newLength;\n      }\n      let rest = len - prev;\n      if (rest) {\n        memory.copy(\n          out + (offset << 1),\n          changetype<usize>(this) + (prev << 1),\n          rest << 1\n        );\n      }\n      rest += offset;\n      if (resLen > rest) out = __realloc(out, rest << 1);\n      return changetype<String>(out);\n    }\n    return this;\n  }\n\n  slice(start: i32, end: i32 = i32.MAX_VALUE): String {\n    var len = this.length;\n    start = start < 0 ? max(start + len, 0) : min(start, len);\n    end   = end   < 0 ? max(end   + len, 0) : min(end,   len);\n    len   = end - start;\n    if (len <= 0) return changetype<String>(\"\");\n    var out = __alloc(len << 1, idof<String>());\n    memory.copy(out, changetype<usize>(this) + (<usize>start << 1), <usize>len << 1);\n    return changetype<String>(out); // retains\n  }\n\n  split(separator: String | null = null, limit: i32 = i32.MAX_VALUE): String[] {\n    if (!limit) return changetype<Array<String>>(__allocArray(0, alignof<String>(), idof<Array<String>>())); // retains\n    if (separator === null) return <String[]>[this];\n    var length: isize = this.length;\n    var sepLen: isize = separator.length;\n    if (limit < 0) limit = i32.MAX_VALUE;\n    if (!sepLen) {\n      if (!length) return changetype<Array<String>>(__allocArray(0, alignof<String>(), idof<Array<String>>()));  // retains\n      // split by chars\n      length = min<isize>(length, <isize>limit);\n      let result = __allocArray(length, alignof<String>(), idof<Array<String>>());\n      let resultStart = changetype<ArrayBufferView>(result).dataStart;\n      for (let i: isize = 0; i < length; ++i) {\n        let charStr = __alloc(2, idof<String>());\n        store<u16>(charStr, load<u16>(changetype<usize>(this) + (<usize>i << 1)));\n        store<usize>(resultStart + (<usize>i << alignof<usize>()), charStr); // result[i] = charStr\n        if (isManaged<String>()) __retain(charStr);\n      }\n      return changetype<Array<String>>(result); // retains\n    } else if (!length) {\n      let result = __allocArray(1, alignof<String>(), idof<Array<String>>());\n      store<usize>(changetype<ArrayBufferView>(result).dataStart, changetype<usize>(\"\")); // static \"\"\n      return changetype<Array<String>>(result); // retains\n    }\n    var result = changetype<Array<String>>(__allocArray(0, alignof<String>(), idof<Array<String>>())); // retains\n    var end = 0, start = 0, i = 0;\n    while (~(end = this.indexOf(separator, start))) {\n      let len = end - start;\n      if (len > 0) {\n        let out = __alloc(<usize>len << 1, idof<String>());\n        memory.copy(out, changetype<usize>(this) + (<usize>start << 1), <usize>len << 1);\n        result.push(changetype<String>(out));\n      } else {\n        result.push(changetype<String>(\"\"));\n      }\n      if (++i == limit) return changetype<Array<String>>(result); // retains\n      start = end + sepLen;\n    }\n    if (!start) { // also means: loop above didn't do anything\n      result.push(this);\n      return changetype<Array<String>>(result); // retains\n    }\n    var len = length - start;\n    if (len > 0) {\n      let out = __alloc(<usize>len << 1, idof<String>());\n      memory.copy(out, changetype<usize>(this) + (<usize>start << 1), <usize>len << 1);\n      result.push(changetype<String>(out)); // retains\n    } else {\n      result.push(changetype<String>(\"\")); // static \"\"\n    }\n    return changetype<Array<String>>(result); // retains\n    // releases result\n  }\n\n  toString(): String {\n    return this;\n  }\n\n  get lengthUTF8(): i32 {\n    var len = 1; // null terminated\n    var pos: usize = 0;\n    var end = <usize>this.length;\n    while (pos < end) {\n      let c = <u32>load<u16>(changetype<usize>(this) + (pos << 1));\n      if (c < 128) {\n        len += 1; ++pos;\n      } else if (c < 2048) {\n        len += 2; ++pos;\n      } else {\n        if (\n          (c & 0xFC00) == 0xD800 && pos + 1 < end &&\n          (<u32>load<u16>(changetype<usize>(this) + ((pos + 1) << 1)) & 0xFC00) == 0xDC00\n        ) {\n          len += 4; pos += 2;\n        } else {\n          len += 3; ++pos;\n        }\n      }\n    }\n    return len;\n  }\n\n  static fromUTF8(ptr: usize, len: usize): String {\n    if (len < 1) return changetype<String>(\"\");\n    var ptrPos = <usize>0;\n    var buf = __alloc(<usize>len << 1, 0);\n    var bufPos = <usize>0;\n    while (ptrPos < len) {\n      let cp = <u32>load<u8>(ptr + ptrPos++);\n      if (cp < 128) {\n        store<u16>(buf + bufPos, cp);\n        bufPos += 2;\n      } else if (cp > 191 && cp < 224) {\n        assert(ptrPos + 1 <= len);\n        store<u16>(buf + bufPos, (cp & 31) << 6 | load<u8>(ptr + ptrPos++) & 63);\n        bufPos += 2;\n      } else if (cp > 239 && cp < 365) {\n        assert(ptrPos + 3 <= len);\n        cp = (\n          (cp                       &  7) << 18 |\n          (load<u8>(ptr + ptrPos++) & 63) << 12 |\n          (load<u8>(ptr + ptrPos++) & 63) <<  6 |\n           load<u8>(ptr + ptrPos++) & 63\n        ) - 0x10000;\n        store<u16>(buf + bufPos, 0xD800 + (cp >> 10));\n        bufPos += 2;\n        store<u16>(buf + bufPos, 0xDC00 + (cp & 1023));\n        bufPos += 2;\n      } else {\n        assert(ptrPos + 2 <= len);\n        store<u16>(buf + bufPos,\n          (cp                       & 15) << 12 |\n          (load<u8>(ptr + ptrPos++) & 63) <<  6 |\n           load<u8>(ptr + ptrPos++) & 63\n        );\n        bufPos += 2;\n      }\n    }\n    assert(ptrPos == len);\n    var out = __alloc(bufPos, idof<String>());\n    memory.copy(out, buf, bufPos);\n    __free(buf);\n    return changetype<String>(out); // retains\n  }\n\n  toUTF8(): usize {\n    var buf = __alloc(<usize>this.lengthUTF8, 0);\n    var pos: usize = 0;\n    var end = <usize>this.length;\n    var off: usize = 0;\n    while (pos < end) {\n      let c1 = <u32>load<u16>(changetype<usize>(this) + (pos << 1));\n      if (c1 < 128) {\n        store<u8>(buf + off, c1);\n        ++off; ++pos;\n      } else if (c1 < 2048) {\n        let ptr = buf + off;\n        store<u8>(ptr, c1 >> 6 | 192);\n        store<u8>(ptr, c1 & 63 | 128, 1);\n        off += 2; ++pos;\n      } else {\n        let ptr = buf + off;\n        if ((c1 & 0xFC00) == 0xD800 && pos + 1 < end) {\n          let c2 = <u32>load<u16>(changetype<usize>(this) + ((pos + 1) << 1));\n          if ((c2 & 0xFC00) == 0xDC00) {\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\n            store<u8>(ptr, c1 >> 18      | 240);\n            store<u8>(ptr, c1 >> 12 & 63 | 128, 1);\n            store<u8>(ptr, c1 >>  6 & 63 | 128, 2);\n            store<u8>(ptr, c1       & 63 | 128, 3);\n            off += 4; pos += 2;\n            continue;\n          }\n        }\n        store<u8>(ptr, c1 >> 12     | 224);\n        store<u8>(ptr, c1 >> 6 & 63 | 128, 1);\n        store<u8>(ptr, c1      & 63 | 128, 2);\n        off += 3; ++pos;\n      }\n    }\n    store<u8>(buf + off, 0);\n    return buf;\n  }\n}\n\n// @ts-ignore: nolib\nexport type string = String;\n\nexport function parseInt(str: string, radix: i32 = 0): f64 {\n  return strtol<f64>(str, radix);\n}\n\nexport function parseFloat(str: string): f64 {\n  return strtod(str);\n}\n","import { collections, context, storage, near } from \"./near\";\n\n// NFT for films\n// Value built into the token\n// (trade it on the open market)\n\n// // Name of the token\n// const NAME = 'BSTR';\n\n// // Fixed initial supply\n// const TOTAL_SUPPLY:u32 = 100_000;\n\n// // Keep a ledger of account balances\n// let ledger = collections.map<string, u64>(\"l\");\n\n// export function getName():string {\n//   return NAME;\n// }\n\n// export function getTotalSupply():string {\n//   return TOTAL_SUPPLY.toString();\n// }\n\n// Leave to marketplace\n// Buy the token\n// Sell the token\n\n// We'll transact here\n\n// Send the Token\n// Check my balance\n// List the contributers by account name (TopN)\n\n// BONUS\n// List contributers by real name\n// Optionally hide identity\n\n// --- contract code goes below\n\nlet balances = collections.map<string, u64>(\"b:\");\nlet approves = collections.map<string, u64>(\"a:\");\n\nlet TOTAL_SUPPLY: u64 = 100_000;\n\nexport function init(initialOwner: string): void {\n  near.log(\"initialOwner: \" + initialOwner);\n  assert(storage.getItem(\"init\") == null, \"Already initialized token supply\");\n  balances.set(initialOwner, TOTAL_SUPPLY);\n  storage.setItem(\"init\", \"done\");\n}\n\nexport function totalSupply(): string {\n  return TOTAL_SUPPLY.toString();\n}\n\nexport function balanceOf(tokenOwner: string): u64 {\n  near.log(\"balanceOf: \" + tokenOwner);\n  let result = balances.get(tokenOwner);\n  return result;\n}\n\nexport function allowance(tokenOwner: string, spender: string): u64 {\n  return approves.get(tokenOwner + \":\" + spender);\n}\n\nexport function transfer(to: string, tokens: u64): boolean {\n  near.log(\"transfer from: \" + context.sender + \" to: \" + to + \" tokens: \" + tokens.toString());\n  let fromAmount = balances.get(context.sender);\n  assert(fromAmount >= tokens, \"not enough tokens on account\");\n  balances.set(context.sender, fromAmount - tokens);\n  balances.set(to, balances.get(to) + tokens);\n  return true;\n}\n\nexport function approve(spender: string, tokens: u64): boolean {\n  near.log(\"approve: \" + spender + \" tokens: \" + tokens.toString());\n  approves.set(context.sender + \":\" + spender, tokens);\n  return true;\n}\n\nexport function transferFrom(from: string, to: string, tokens: u64): boolean {\n  let fromAmount = balances.get(from);\n  assert(fromAmount >= tokens, \"not enough tokens on account\");\n  let approvedAmount = approves.get(from + \":\" + to);\n  assert(tokens <= approvedAmount, \"not enough tokens approved to transfer\");\n  balances.set(from, fromAmount - tokens);\n  balances.set(to, balances.get(to) + tokens);\n  return true;\n}\n","import { memcmp, memmove, memset } from \"./util/memory\";\nimport { E_NOTIMPLEMENTED } from \"./util/error\";\n\n/** Memory manager interface. */\nexport namespace memory {\n\n  /** Gets the size of the memory in pages. */\n  // @ts-ignore: decorator\n  @builtin\n  export declare function size(): i32;\n\n  /** Grows the memory by the given size in pages and returns the previous size in pages. */\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function grow(pages: i32): i32;\n\n  /** Fills a section in memory with the specified byte value. */\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export function fill(dst: usize, c: u8, n: usize): void {\n    memset(dst, c, n); // fallback if \"bulk-memory\" isn't enabled\n  }\n\n  /** Copies a section of memory to another. Has move semantics. */\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export function copy(dst: usize, src: usize, n: usize): void {\n    memmove(dst, src, n); // fallback if \"bulk-memory\" isn't enabled\n  }\n\n  /** Initializes a memory segment. */\n  // @ts-ignore: decorator\n  @unsafe\n  export function init(segmentIndex: u32, srcOffset: usize, dstOffset: usize, n: usize): void {\n    throw new Error(E_NOTIMPLEMENTED);\n  }\n\n  /** Drops a memory segment. */\n  // @ts-ignore: decorator\n  @unsafe\n  export function drop(segmentIndex: u32): void {\n    throw new Error(E_NOTIMPLEMENTED);\n  }\n\n  /** Repeats a section of memory at a specific address. */\n  // @ts-ignore: decorator\n  @unsafe\n  export function repeat(dst: usize, src: usize, srcLength: usize, count: usize): void {\n    var index: usize = 0;\n    var total = srcLength * count;\n    while (index < total) {\n      memory.copy(dst + index, src, srcLength);\n      index += srcLength;\n    }\n  }\n\n  /** Compares a section of memory to another. */\n  // @ts-ignore: decorator\n  @inline\n  export function compare(vl: usize, vr: usize, n: usize): i32 {\n    return memcmp(vl, vr, n);\n  }\n}\n","export function memcpy(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memcpy.c\n  if (ASC_SHRINK_LEVEL > 1) {\n    while (n) {\n      store<u8>(dest++, load<u8>(src++));\n      --n;\n    }\n  } else {\n    let w: u32, x: u32;\n\n    // copy 1 byte each until src is aligned to 4 bytes\n    while (n && (src & 3)) {\n      store<u8>(dest++, load<u8>(src++));\n      n--;\n    }\n\n    // if dst is aligned to 4 bytes as well, copy 4 bytes each\n    if ((dest & 3) == 0) {\n      while (n >= 16) {\n        store<u32>(dest     , load<u32>(src     ));\n        store<u32>(dest +  4, load<u32>(src +  4));\n        store<u32>(dest +  8, load<u32>(src +  8));\n        store<u32>(dest + 12, load<u32>(src + 12));\n        src += 16; dest += 16; n -= 16;\n      }\n      if (n & 8) {\n        store<u32>(dest    , load<u32>(src    ));\n        store<u32>(dest + 4, load<u32>(src + 4));\n        dest += 8; src += 8;\n      }\n      if (n & 4) {\n        store<u32>(dest, load<u32>(src));\n        dest += 4; src += 4;\n      }\n      if (n & 2) { // drop to 2 bytes each\n        store<u16>(dest, load<u16>(src));\n        dest += 2; src += 2;\n      }\n      if (n & 1) { // drop to 1 byte\n        store<u8>(dest++, load<u8>(src++));\n      }\n      return;\n    }\n\n    // if dst is not aligned to 4 bytes, use alternating shifts to copy 4 bytes each\n    // doing shifts if faster when copying enough bytes (here: 32 or more)\n    if (n >= 32) {\n      switch (dest & 3) {\n        // known to be != 0\n        case 1: {\n          w = load<u32>(src);\n          store<u8>(dest++, load<u8>(src++));\n          store<u8>(dest++, load<u8>(src++));\n          store<u8>(dest++, load<u8>(src++));\n          n -= 3;\n          while (n >= 17) {\n            x = load<u32>(src + 1);\n            store<u32>(dest, w >> 24 | x << 8);\n            w = load<u32>(src + 5);\n            store<u32>(dest + 4, x >> 24 | w << 8);\n            x = load<u32>(src + 9);\n            store<u32>(dest + 8, w >> 24 | x << 8);\n            w = load<u32>(src + 13);\n            store<u32>(dest + 12, x >> 24 | w << 8);\n            src += 16; dest += 16; n -= 16;\n          }\n          break;\n        }\n        case 2: {\n          w = load<u32>(src);\n          store<u8>(dest++, load<u8>(src++));\n          store<u8>(dest++, load<u8>(src++));\n          n -= 2;\n          while (n >= 18) {\n            x = load<u32>(src + 2);\n            store<u32>(dest, w >> 16 | x << 16);\n            w = load<u32>(src + 6);\n            store<u32>(dest + 4, x >> 16 | w << 16);\n            x = load<u32>(src + 10);\n            store<u32>(dest + 8, w >> 16 | x << 16);\n            w = load<u32>(src + 14);\n            store<u32>(dest + 12, x >> 16 | w << 16);\n            src += 16; dest += 16; n -= 16;\n          }\n          break;\n        }\n        case 3: {\n          w = load<u32>(src);\n          store<u8>(dest++, load<u8>(src++));\n          n -= 1;\n          while (n >= 19) {\n            x = load<u32>(src + 3);\n            store<u32>(dest, w >> 8 | x << 24);\n            w = load<u32>(src + 7);\n            store<u32>(dest + 4, x >> 8 | w << 24);\n            x = load<u32>(src + 11);\n            store<u32>(dest + 8, w >> 8 | x << 24);\n            w = load<u32>(src + 15);\n            store<u32>(dest + 12, x >> 8 | w << 24);\n            src += 16; dest += 16; n -= 16;\n          }\n          break;\n        }\n      }\n    }\n\n    // copy remaining bytes one by one\n    if (n & 16) {\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n    }\n    if (n & 8) {\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n    }\n    if (n & 4) {\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n    }\n    if (n & 2) {\n      store<u8>(dest++, load<u8>(src++));\n      store<u8>(dest++, load<u8>(src++));\n    }\n    if (n & 1) {\n      store<u8>(dest++, load<u8>(src++));\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function memmove(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memmove.c\n  if (dest === src) return;\n  if (ASC_SHRINK_LEVEL < 1) {\n    if (src + n <= dest || dest + n <= src) {\n      memcpy(dest, src, n);\n      return;\n    }\n  }\n  if (dest < src) {\n    if ((src & 7) == (dest & 7)) {\n      while (dest & 7) {\n        if (!n) return;\n        --n;\n        store<u8>(dest++, load<u8>(src++));\n      }\n      while (n >= 8) {\n        store<u64>(dest, load<u64>(src));\n        n    -= 8;\n        dest += 8;\n        src  += 8;\n      }\n    }\n    while (n) {\n      store<u8>(dest++, load<u8>(src++));\n      --n;\n    }\n  } else {\n    if ((src & 7) == (dest & 7)) {\n      while ((dest + n) & 7) {\n        if (!n) return;\n        store<u8>(dest + --n, load<u8>(src + n));\n      }\n      while (n >= 8) {\n        n -= 8;\n        store<u64>(dest + n, load<u64>(src + n));\n      }\n    }\n    while (n) {\n      store<u8>(dest + --n, load<u8>(src + n));\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function memset(dest: usize, c: u8, n: usize): void { // see: musl/src/string/memset\n  if (ASC_SHRINK_LEVEL > 1) {\n    while (n) {\n      store<u8>(dest++, c);\n      --n;\n    }\n  } else {\n    // fill head and tail with minimal branching\n    if (!n) return;\n    store<u8>(dest, c);\n    store<u8>(dest + n - 1, c);\n    if (n <= 2) return;\n\n    store<u8>(dest + 1, c);\n    store<u8>(dest + 2, c);\n    store<u8>(dest + n - 2, c);\n    store<u8>(dest + n - 3, c);\n    if (n <= 6) return;\n    store<u8>(dest + 3, c);\n    store<u8>(dest + n - 4, c);\n    if (n <= 8) return;\n\n    // advance pointer to align it at 4-byte boundary\n    let k: usize = -dest & 3;\n    dest += k;\n    n -= k;\n    n &= -4;\n\n    let c32: u32 = <u32>-1 / 255 * c;\n\n    // fill head/tail up to 28 bytes each in preparation\n    store<u32>(dest, c32);\n    store<u32>(dest + n - 4, c32);\n    if (n <= 8) return;\n    store<u32>(dest + 4, c32);\n    store<u32>(dest + 8, c32);\n    store<u32>(dest + n - 12, c32);\n    store<u32>(dest + n - 8, c32);\n    if (n <= 24) return;\n    store<u32>(dest + 12, c32);\n    store<u32>(dest + 16, c32);\n    store<u32>(dest + 20, c32);\n    store<u32>(dest + 24, c32);\n    store<u32>(dest + n - 28, c32);\n    store<u32>(dest + n - 24, c32);\n    store<u32>(dest + n - 20, c32);\n    store<u32>(dest + n - 16, c32);\n\n    // align to a multiple of 8\n    k = 24 + (dest & 4);\n    dest += k;\n    n -= k;\n\n    // copy 32 bytes each\n    let c64: u64 = <u64>c32 | (<u64>c32 << 32);\n    while (n >= 32) {\n      store<u64>(dest, c64);\n      store<u64>(dest + 8, c64);\n      store<u64>(dest + 16, c64);\n      store<u64>(dest + 24, c64);\n      n -= 32;\n      dest += 32;\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function memcmp(vl: usize, vr: usize, n: usize): i32 { // see: musl/src/string/memcmp.c\n  if (vl == vr) return 0;\n  while (n != 0 && load<u8>(vl) == load<u8>(vr)) {\n    n--; vl++; vr++;\n  }\n  return n ? <i32>load<u8>(vl) - <i32>load<u8>(vr) : 0;\n}\n","\n      import { storage, near, base64 } from \"./near\";\n      import { JSONEncoder } from \"./json/encoder\";\n      import { JSONDecoder, ThrowingJSONHandler, DecoderState } from \"./json/decoder\";\n      import {init as wrapped_init, totalSupply as wrapped_totalSupply, balanceOf as wrapped_balanceOf, allowance as wrapped_allowance, transfer as wrapped_transfer, approve as wrapped_approve, transferFrom as wrapped_transferFrom} from \"./main\";\n      \n      // Runtime functions\n      @external(\"env\", \"return_value\")\n      declare function return_value(value_len: usize, value_ptr: usize): void;\n    \nimport {collections as collections,context as context,storage as storage,near as near} from \"./near\";\nexport class __near_ArgsParser_init extends ThrowingJSONHandler {\n        buffer: Uint8Array;\n        decoder: JSONDecoder<__near_ArgsParser_init>;\n        handledRoot: boolean = false;\n      \n__near_param_initialOwner: String;\nsetString(name: string, value: String): void {\nif (name == \"initialOwner\") {\n            this.__near_param_initialOwner = <String>value;\n            return;\n          }\n\n        super.setString(name, value);\n      }\nsetNull(name: string): void {\nif (name == \"initialOwner\") {\n        this.__near_param_initialOwner = <String>null;\n        return;\n      }\n\n      super.setNull(name);\n    }\n\n      pushObject(name: string): bool {\nif (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }\n\n        return super.pushObject(name);\n      }\n\n      pushArray(name: string): bool {\n\n        return super.pushArray(name);\n      }\n}\nexport function init(): void {\n      // Reading input bytes.\n      let json = storage._internalReadBytes(4, 0, 0);\n      let handler = new __near_ArgsParser_init();\n      handler.buffer = json;\n      handler.decoder = new JSONDecoder<__near_ArgsParser_init>(handler);\n      handler.decoder.deserialize(json);\nwrapped_init(\nhandler.__near_param_initialOwner\n);\n}\nexport class __near_ArgsParser_totalSupply extends ThrowingJSONHandler {\n        buffer: Uint8Array;\n        decoder: JSONDecoder<__near_ArgsParser_totalSupply>;\n        handledRoot: boolean = false;\n      \nsetNull(name: string): void {\n\n      super.setNull(name);\n    }\n\n      pushObject(name: string): bool {\nif (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }\n\n        return super.pushObject(name);\n      }\n\n      pushArray(name: string): bool {\n\n        return super.pushArray(name);\n      }\n}\nexport function totalSupply(): void {\n      // Reading input bytes.\n      let json = storage._internalReadBytes(4, 0, 0);\n      let handler = new __near_ArgsParser_totalSupply();\n      handler.buffer = json;\n      handler.decoder = new JSONDecoder<__near_ArgsParser_totalSupply>(handler);\n      handler.decoder.deserialize(json);\nlet result = wrapped_totalSupply(\n\n);\n\n        let encoder = new JSONEncoder();\n      \nif (result != null) {\n            encoder.setString(null, result);\n          } else {\n            encoder.setNull(null);\n          }\n\n        let val = encoder.serialize();\n        return_value(val.byteLength, <usize>val.buffer);\n      \n}\nexport class __near_ArgsParser_balanceOf extends ThrowingJSONHandler {\n        buffer: Uint8Array;\n        decoder: JSONDecoder<__near_ArgsParser_balanceOf>;\n        handledRoot: boolean = false;\n      \n__near_param_tokenOwner: String;\nsetString(name: string, value: String): void {\nif (name == \"tokenOwner\") {\n            this.__near_param_tokenOwner = <String>value;\n            return;\n          }\n\n        super.setString(name, value);\n      }\nsetNull(name: string): void {\nif (name == \"tokenOwner\") {\n        this.__near_param_tokenOwner = <String>null;\n        return;\n      }\n\n      super.setNull(name);\n    }\n\n      pushObject(name: string): bool {\nif (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }\n\n        return super.pushObject(name);\n      }\n\n      pushArray(name: string): bool {\n\n        return super.pushArray(name);\n      }\n}\nexport function balanceOf(): void {\n      // Reading input bytes.\n      let json = storage._internalReadBytes(4, 0, 0);\n      let handler = new __near_ArgsParser_balanceOf();\n      handler.buffer = json;\n      handler.decoder = new JSONDecoder<__near_ArgsParser_balanceOf>(handler);\n      handler.decoder.deserialize(json);\nlet result = wrapped_balanceOf(\nhandler.__near_param_tokenOwner\n);\n\n        let encoder = new JSONEncoder();\n      \nencoder.setString(null, result.toString());\n\n        let val = encoder.serialize();\n        return_value(val.byteLength, <usize>val.buffer);\n      \n}\nexport class __near_ArgsParser_allowance extends ThrowingJSONHandler {\n        buffer: Uint8Array;\n        decoder: JSONDecoder<__near_ArgsParser_allowance>;\n        handledRoot: boolean = false;\n      \n__near_param_tokenOwner: String;\n__near_param_spender: String;\nsetString(name: string, value: String): void {\nif (name == \"tokenOwner\") {\n            this.__near_param_tokenOwner = <String>value;\n            return;\n          }\nif (name == \"spender\") {\n            this.__near_param_spender = <String>value;\n            return;\n          }\n\n        super.setString(name, value);\n      }\nsetNull(name: string): void {\nif (name == \"tokenOwner\") {\n        this.__near_param_tokenOwner = <String>null;\n        return;\n      }\nif (name == \"spender\") {\n        this.__near_param_spender = <String>null;\n        return;\n      }\n\n      super.setNull(name);\n    }\n\n      pushObject(name: string): bool {\nif (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }\n\n        return super.pushObject(name);\n      }\n\n      pushArray(name: string): bool {\n\n        return super.pushArray(name);\n      }\n}\nexport function allowance(): void {\n      // Reading input bytes.\n      let json = storage._internalReadBytes(4, 0, 0);\n      let handler = new __near_ArgsParser_allowance();\n      handler.buffer = json;\n      handler.decoder = new JSONDecoder<__near_ArgsParser_allowance>(handler);\n      handler.decoder.deserialize(json);\nlet result = wrapped_allowance(\nhandler.__near_param_tokenOwner,handler.__near_param_spender\n);\n\n        let encoder = new JSONEncoder();\n      \nencoder.setString(null, result.toString());\n\n        let val = encoder.serialize();\n        return_value(val.byteLength, <usize>val.buffer);\n      \n}\nexport class __near_ArgsParser_transfer extends ThrowingJSONHandler {\n        buffer: Uint8Array;\n        decoder: JSONDecoder<__near_ArgsParser_transfer>;\n        handledRoot: boolean = false;\n      \n__near_param_to: String;\n__near_param_tokens: u64;\nsetString(name: string, value: String): void {\nif (name == \"to\") {\n            this.__near_param_to = <String>value;\n            return;\n          }\nif (name == \"tokens\") {\n              this.__near_param_tokens = U64.parseInt(value);\n              return;\n            }\n\n        super.setString(name, value);\n      }\nsetNull(name: string): void {\nif (name == \"to\") {\n        this.__near_param_to = <String>null;\n        return;\n      }\nif (name == \"tokens\") {\n        this.__near_param_tokens = <u64>null;\n        return;\n      }\n\n      super.setNull(name);\n    }\n\n      pushObject(name: string): bool {\nif (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }\n\n        return super.pushObject(name);\n      }\n\n      pushArray(name: string): bool {\n\n        return super.pushArray(name);\n      }\n}\nexport function transfer(): void {\n      // Reading input bytes.\n      let json = storage._internalReadBytes(4, 0, 0);\n      let handler = new __near_ArgsParser_transfer();\n      handler.buffer = json;\n      handler.decoder = new JSONDecoder<__near_ArgsParser_transfer>(handler);\n      handler.decoder.deserialize(json);\nlet result = wrapped_transfer(\nhandler.__near_param_to,handler.__near_param_tokens\n);\n\n        let encoder = new JSONEncoder();\n      \nencoder.setBoolean(null, result);\n\n        let val = encoder.serialize();\n        return_value(val.byteLength, <usize>val.buffer);\n      \n}\nexport class __near_ArgsParser_approve extends ThrowingJSONHandler {\n        buffer: Uint8Array;\n        decoder: JSONDecoder<__near_ArgsParser_approve>;\n        handledRoot: boolean = false;\n      \n__near_param_spender: String;\n__near_param_tokens: u64;\nsetString(name: string, value: String): void {\nif (name == \"spender\") {\n            this.__near_param_spender = <String>value;\n            return;\n          }\nif (name == \"tokens\") {\n              this.__near_param_tokens = U64.parseInt(value);\n              return;\n            }\n\n        super.setString(name, value);\n      }\nsetNull(name: string): void {\nif (name == \"spender\") {\n        this.__near_param_spender = <String>null;\n        return;\n      }\nif (name == \"tokens\") {\n        this.__near_param_tokens = <u64>null;\n        return;\n      }\n\n      super.setNull(name);\n    }\n\n      pushObject(name: string): bool {\nif (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }\n\n        return super.pushObject(name);\n      }\n\n      pushArray(name: string): bool {\n\n        return super.pushArray(name);\n      }\n}\nexport function approve(): void {\n      // Reading input bytes.\n      let json = storage._internalReadBytes(4, 0, 0);\n      let handler = new __near_ArgsParser_approve();\n      handler.buffer = json;\n      handler.decoder = new JSONDecoder<__near_ArgsParser_approve>(handler);\n      handler.decoder.deserialize(json);\nlet result = wrapped_approve(\nhandler.__near_param_spender,handler.__near_param_tokens\n);\n\n        let encoder = new JSONEncoder();\n      \nencoder.setBoolean(null, result);\n\n        let val = encoder.serialize();\n        return_value(val.byteLength, <usize>val.buffer);\n      \n}\nexport class __near_ArgsParser_transferFrom extends ThrowingJSONHandler {\n        buffer: Uint8Array;\n        decoder: JSONDecoder<__near_ArgsParser_transferFrom>;\n        handledRoot: boolean = false;\n      \n__near_param_from: String;\n__near_param_to: String;\n__near_param_tokens: u64;\nsetString(name: string, value: String): void {\nif (name == \"from\") {\n            this.__near_param_from = <String>value;\n            return;\n          }\nif (name == \"to\") {\n            this.__near_param_to = <String>value;\n            return;\n          }\nif (name == \"tokens\") {\n              this.__near_param_tokens = U64.parseInt(value);\n              return;\n            }\n\n        super.setString(name, value);\n      }\nsetNull(name: string): void {\nif (name == \"from\") {\n        this.__near_param_from = <String>null;\n        return;\n      }\nif (name == \"to\") {\n        this.__near_param_to = <String>null;\n        return;\n      }\nif (name == \"tokens\") {\n        this.__near_param_tokens = <u64>null;\n        return;\n      }\n\n      super.setNull(name);\n    }\n\n      pushObject(name: string): bool {\nif (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }\n\n        return super.pushObject(name);\n      }\n\n      pushArray(name: string): bool {\n\n        return super.pushArray(name);\n      }\n}\nexport function transferFrom(): void {\n      // Reading input bytes.\n      let json = storage._internalReadBytes(4, 0, 0);\n      let handler = new __near_ArgsParser_transferFrom();\n      handler.buffer = json;\n      handler.decoder = new JSONDecoder<__near_ArgsParser_transferFrom>(handler);\n      handler.decoder.deserialize(json);\nlet result = wrapped_transferFrom(\nhandler.__near_param_from,handler.__near_param_to,handler.__near_param_tokens\n);\n\n        let encoder = new JSONEncoder();\n      \nencoder.setBoolean(null, result);\n\n        let val = encoder.serialize();\n        return_value(val.byteLength, <usize>val.buffer);\n      \n}","import { itoa, dtoa } from \"./util/number\";\nimport { strtol } from \"./util/string\";\n\n// @ts-ignore: decorator\n@builtin @inline\nexport const NaN: f64 = 0 / 0;\n\n// @ts-ignore: decorator\n@builtin @inline\nexport const Infinity: f64 = 1 / 0;\n\nexport function isNaN<T extends number>(value: T): bool {\n  if (!isFloat<T>()) {\n    if (!isInteger<T>()) ERROR(\"numeric type expected\");\n  }\n  return value != value;\n}\n\nexport function isFinite<T extends number>(value: T): bool {\n  if (!isFloat<T>()) {\n    if (!isInteger<T>()) ERROR(\"numeric type expected\");\n  }\n  return value - value == 0;\n}\n\n@sealed @unmanaged\nexport abstract class I8 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: i8 = i8.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: i8 = i8.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): i8 {\n    return <i8>strtol<i32>(value, radix);\n  }\n\n  toString(this: i8): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed @unmanaged\nexport abstract class I16 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: i16 = i16.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: i16 = i16.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): i16 {\n    return <i16>strtol<i32>(value, radix);\n  }\n\n  toString(this: i16): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed @unmanaged\nexport abstract class I32 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: i32 = i32.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: i32 = i32.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): i32 {\n    return <i32>strtol<i32>(value, radix);\n  }\n\n  toString(this: i32): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed @unmanaged\nexport abstract class I64 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: i64 = i64.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: i64 = i64.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): i64 {\n    return strtol<i64>(value, radix);\n  }\n\n  toString(this: i64): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed @unmanaged\nexport abstract class Isize {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: isize = isize.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: isize = isize.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): isize {\n    return <isize>strtol<i64>(value, radix);\n  }\n\n  toString(this: isize): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed @unmanaged\nexport abstract class U8 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: u8 = u8.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: u8 = u8.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): u8 {\n    return <u8>strtol<i32>(value, radix);\n  }\n\n  toString(this: u8): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed @unmanaged\nexport abstract class U16 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: u16 = u16.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: u16 = u16.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): u16 {\n    return <u16>strtol<i32>(value, radix);\n  }\n\n  toString(this: u16): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed @unmanaged\nexport abstract class U32 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: u32 = u32.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: u32 = u32.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): u32 {\n    return <u32>strtol<i32>(value, radix);\n  }\n\n  toString(this: u32): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed @unmanaged\nexport abstract class U64 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: u64 = u64.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: u64 = u64.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): u64 {\n    return <u64>strtol<i64>(value, radix);\n  }\n\n  toString(this: u64): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed @unmanaged\nexport abstract class Usize {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: usize = usize.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: usize = usize.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): usize {\n    return <usize>strtol<i64>(value, radix);\n  }\n\n  toString(this: usize): String {\n    // TODO: radix\n    return itoa(this);\n  }\n}\n\n@sealed @unmanaged\nexport abstract class Bool {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: bool = bool.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: bool = bool.MAX_VALUE;\n\n  toString(this: bool): String {\n    // TODO: radix?\n    return this ? \"true\" : \"false\";\n  }\n}\n\nexport { Bool as Boolean };\n\n@sealed @unmanaged\nexport abstract class F32 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly EPSILON: f32 = f32.EPSILON;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: f32 = f32.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: f32 = f32.MAX_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_SAFE_INTEGER: f32 = f32.MIN_SAFE_INTEGER;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_SAFE_INTEGER: f32 = f32.MAX_SAFE_INTEGER;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly POSITIVE_INFINITY: f32 = Infinity;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly NEGATIVE_INFINITY: f32 = -Infinity;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly NaN: f32 = NaN;\n\n  static isNaN(value: f32): bool {\n    return isNaN<f32>(value);\n  }\n\n  static isFinite(value: f32): bool {\n    return isFinite<f32>(value);\n  }\n\n  static isSafeInteger(value: f32): bool {\n    return abs<f32>(value) <= f32.MAX_SAFE_INTEGER && trunc<f32>(value) == value;\n  }\n\n  static isInteger(value: f32): bool {\n    return isFinite<f32>(value) && trunc<f32>(value) == value;\n  }\n\n  static parseInt(value: string, radix: i32 = 0): f32 {\n    return <f32>strtol<i64>(value, radix);\n  }\n\n  static parseFloat(value: string): f32 {\n    return <f32>parseFloat(value);\n  }\n\n  toString(this: f32): String {\n    // TODO: radix\n    return dtoa(this);\n  }\n}\n\n@sealed @unmanaged\nexport abstract class F64 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly EPSILON: f64 = f64.EPSILON;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: f64 = f64.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: f64 = f64.MAX_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_SAFE_INTEGER: f64 = f64.MIN_SAFE_INTEGER;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_SAFE_INTEGER: f64 = f64.MAX_SAFE_INTEGER;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly POSITIVE_INFINITY: f64 = Infinity;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly NEGATIVE_INFINITY: f64 = -Infinity;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly NaN: f64 = NaN;\n\n  static isNaN(value: f64): bool {\n    return isNaN<f64>(value);\n  }\n\n  static isFinite(value: f64): bool {\n    return isFinite<f64>(value);\n  }\n\n  static isSafeInteger(value: f64): bool {\n    return abs<f64>(value) <= f64.MAX_SAFE_INTEGER && trunc<f64>(value) == value;\n  }\n\n  static isInteger(value: f64): bool {\n    return isFinite<f64>(value) && trunc<f64>(value) == value;\n  }\n\n  static parseInt(value: string, radix: i32 = 0): f64 {\n    return <f64>strtol<i64>(value, radix);\n  }\n\n  static parseFloat(value: string): f64 {\n    return parseFloat(value);\n  }\n\n  toString(this: f64, radix: i32 = 0): String {\n    // TODO: radix\n    return dtoa(this);\n  }\n}\n\nexport { F64 as Number };\n","/// <reference path=\"../rt/index.d.ts\" />\n\nimport { idof } from \"../builtins\";\nimport { CharCode } from \"./string\";\nimport { ArrayBufferView } from \"../arraybuffer\";\n\n// @ts-ignore: decorator\n@inline\nexport const MAX_DOUBLE_LENGTH = 28;\n\n// @ts-ignore: decorator\n@lazy @inline\nconst POWERS10: u32[] = [\n  1,\n  10,\n  100,\n  1000,\n  10000,\n  100000,\n  1000000,\n  10000000,\n  100000000,\n  1000000000\n];\n\n/*\n  Lookup table for pairwise char codes in range [0-99]\n\n  \"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\",\n  \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\n  \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\",\n  \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\",\n  \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\",\n  \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\",\n  \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\",\n  \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\",\n  \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\",\n  \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\"\n*/\n// @ts-ignore: decorator\n@lazy @inline\nconst DIGITS: u32[] = [\n  0x00300030, 0x00310030, 0x00320030, 0x00330030, 0x00340030,\n  0x00350030, 0x00360030, 0x00370030, 0x00380030, 0x00390030,\n  0x00300031, 0x00310031, 0x00320031, 0x00330031, 0x00340031,\n  0x00350031, 0x00360031, 0x00370031, 0x00380031, 0x00390031,\n  0x00300032, 0x00310032, 0x00320032, 0x00330032, 0x00340032,\n  0x00350032, 0x00360032, 0x00370032, 0x00380032, 0x00390032,\n  0x00300033, 0x00310033, 0x00320033, 0x00330033, 0x00340033,\n  0x00350033, 0x00360033, 0x00370033, 0x00380033, 0x00390033,\n  0x00300034, 0x00310034, 0x00320034, 0x00330034, 0x00340034,\n  0x00350034, 0x00360034, 0x00370034, 0x00380034, 0x00390034,\n  0x00300035, 0x00310035, 0x00320035, 0x00330035, 0x00340035,\n  0x00350035, 0x00360035, 0x00370035, 0x00380035, 0x00390035,\n  0x00300036, 0x00310036, 0x00320036, 0x00330036, 0x00340036,\n  0x00350036, 0x00360036, 0x00370036, 0x00380036, 0x00390036,\n  0x00300037, 0x00310037, 0x00320037, 0x00330037, 0x00340037,\n  0x00350037, 0x00360037, 0x00370037, 0x00380037, 0x00390037,\n  0x00300038, 0x00310038, 0x00320038, 0x00330038, 0x00340038,\n  0x00350038, 0x00360038, 0x00370038, 0x00380038, 0x00390038,\n  0x00300039, 0x00310039, 0x00320039, 0x00330039, 0x00340039,\n  0x00350039, 0x00360039, 0x00370039, 0x00380039, 0x00390039\n];\n\n// @ts-ignore: decorator\n@lazy @inline\nconst EXP_POWERS: i16[] = [\n  -1220, -1193, -1166, -1140, -1113, -1087, -1060, -1034, -1007,  -980,\n   -954,  -927,  -901,  -874,  -847,  -821,  -794,  -768,  -741,  -715,\n   -688,  -661,  -635,  -608,  -582,  -555,  -529,  -502,  -475,  -449,\n   -422,  -396,  -369,  -343,  -316,  -289,  -263,  -236,  -210,  -183,\n   -157,  -130,  -103,   -77,   -50,   -24,     3,    30,    56,    83,\n    109,   136,   162,   189,   216,   242,   269,   295,   322,   348,\n    375,   402,   428,   455,   481,   508,   534,   561,   588,   614,\n    641,   667,   694,   720,   747,   774,   800,   827,   853,   880,\n    907,   933,   960,   986,  1013,  1039,  1066\n];\n\n// 1e-348, 1e-340, ..., 1e340\n// @ts-ignore: decorator\n@lazy @inline\nconst FRC_POWERS: u64[] = [\n  0xFA8FD5A0081C0288, 0xBAAEE17FA23EBF76, 0x8B16FB203055AC76, 0xCF42894A5DCE35EA,\n  0x9A6BB0AA55653B2D, 0xE61ACF033D1A45DF, 0xAB70FE17C79AC6CA, 0xFF77B1FCBEBCDC4F,\n  0xBE5691EF416BD60C, 0x8DD01FAD907FFC3C, 0xD3515C2831559A83, 0x9D71AC8FADA6C9B5,\n  0xEA9C227723EE8BCB, 0xAECC49914078536D, 0x823C12795DB6CE57, 0xC21094364DFB5637,\n  0x9096EA6F3848984F, 0xD77485CB25823AC7, 0xA086CFCD97BF97F4, 0xEF340A98172AACE5,\n  0xB23867FB2A35B28E, 0x84C8D4DFD2C63F3B, 0xC5DD44271AD3CDBA, 0x936B9FCEBB25C996,\n  0xDBAC6C247D62A584, 0xA3AB66580D5FDAF6, 0xF3E2F893DEC3F126, 0xB5B5ADA8AAFF80B8,\n  0x87625F056C7C4A8B, 0xC9BCFF6034C13053, 0x964E858C91BA2655, 0xDFF9772470297EBD,\n  0xA6DFBD9FB8E5B88F, 0xF8A95FCF88747D94, 0xB94470938FA89BCF, 0x8A08F0F8BF0F156B,\n  0xCDB02555653131B6, 0x993FE2C6D07B7FAC, 0xE45C10C42A2B3B06, 0xAA242499697392D3,\n  0xFD87B5F28300CA0E, 0xBCE5086492111AEB, 0x8CBCCC096F5088CC, 0xD1B71758E219652C,\n  0x9C40000000000000, 0xE8D4A51000000000, 0xAD78EBC5AC620000, 0x813F3978F8940984,\n  0xC097CE7BC90715B3, 0x8F7E32CE7BEA5C70, 0xD5D238A4ABE98068, 0x9F4F2726179A2245,\n  0xED63A231D4C4FB27, 0xB0DE65388CC8ADA8, 0x83C7088E1AAB65DB, 0xC45D1DF942711D9A,\n  0x924D692CA61BE758, 0xDA01EE641A708DEA, 0xA26DA3999AEF774A, 0xF209787BB47D6B85,\n  0xB454E4A179DD1877, 0x865B86925B9BC5C2, 0xC83553C5C8965D3D, 0x952AB45CFA97A0B3,\n  0xDE469FBD99A05FE3, 0xA59BC234DB398C25, 0xF6C69A72A3989F5C, 0xB7DCBF5354E9BECE,\n  0x88FCF317F22241E2, 0xCC20CE9BD35C78A5, 0x98165AF37B2153DF, 0xE2A0B5DC971F303A,\n  0xA8D9D1535CE3B396, 0xFB9B7CD9A4A7443C, 0xBB764C4CA7A44410, 0x8BAB8EEFB6409C1A,\n  0xD01FEF10A657842C, 0x9B10A4E5E9913129, 0xE7109BFBA19C0C9D, 0xAC2820D9623BF429,\n  0x80444B5E7AA7CF85, 0xBF21E44003ACDD2D, 0x8E679C2F5E44FF8F, 0xD433179D9C8CB841,\n  0x9E19DB92B4E31BA9, 0xEB96BF6EBADF77D9, 0xAF87023B9BF0EE6B\n];\n\n// Count number of decimals for u32 values\n// In our case input value always non-zero so we can simplify some parts\nexport function decimalCount32(value: u32): u32 {\n  if (value < 100000) {\n    if (value < 100) {\n      return select<u32>(1, 2, value < 10);\n    } else {\n      let m = select<u32>(4, 5, value < 10000);\n      return select<u32>(3, m, value < 1000);\n    }\n  } else {\n    if (value < 10000000) {\n      return select<u32>(6, 7, value < 1000000);\n    } else {\n      let m = select<u32>(9, 10, value < 1000000000);\n      return select<u32>(8, m, value < 100000000);\n    }\n  }\n}\n\n// Count number of decimals for u64 values\n// In our case input value always greater than 2^32-1 so we can skip some parts\nexport function decimalCount64(value: u64): u32 {\n  if (value < 1000000000000000) {\n    if (value < 1000000000000) {\n      return select<u32>(11, 12, value < 100000000000);\n    } else {\n      let m = select<u32>(14, 15, value < 100000000000000);\n      return select<u32>(13, m, value < 10000000000000);\n    }\n  } else {\n    if (value < 100000000000000000) {\n      return select<u32>(16, 17, value < 10000000000000000);\n    } else {\n      let m = select<u32>(19, 20, value < 10000000000000000000);\n      return select<u32>(18, m, value < 1000000000000000000);\n    }\n  }\n}\n\nfunction utoa32_lut(buffer: usize, num: u32, offset: usize): void {\n  var lut = changetype<ArrayBufferView>(DIGITS).dataStart;\n  while (num >= 10000) {\n    // in most VMs i32/u32 div and modulo by constant can be shared and simplificate\n    let t = num / 10000;\n    let r = num % 10000;\n    num = t;\n\n    let d1 = r / 100;\n    let d2 = r % 100;\n\n    let digits1 = <u64>load<u32>(lut + (<usize>d1 << alignof<u32>()));\n    let digits2 = <u64>load<u32>(lut + (<usize>d2 << alignof<u32>()));\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32));\n  }\n\n  if (num >= 100) {\n    let t  = num / 100;\n    let d1 = num % 100;\n    num = t;\n    offset -= 2;\n    let digits = load<u32>(lut + (<usize>d1 << alignof<u32>()));\n    store<u32>(buffer + (offset << 1), digits);\n  }\n\n  if (num >= 10) {\n    offset -= 2;\n    let digits = load<u32>(lut + (<usize>num << alignof<u32>()));\n    store<u32>(buffer + (offset << 1), digits);\n  } else {\n    offset -= 1;\n    let digit = CharCode._0 + num;\n    store<u16>(buffer + (offset << 1), digit);\n  }\n}\n\nfunction utoa64_lut(buffer: usize, num: u64, offset: usize): void {\n  var lut = changetype<ArrayBufferView>(DIGITS).dataStart;\n  while (num >= 100000000) {\n    let t = num / 100000000;\n    let r = <usize>(num - t * 100000000);\n    num = t;\n\n    let b = r / 10000;\n    let c = r % 10000;\n\n    let b1 = b / 100;\n    let b2 = b % 100;\n    let c1 = c / 100;\n    let c2 = c % 100;\n\n    let digits1 = <u64>load<u32>(lut + (<usize>c1 << alignof<u32>()));\n    let digits2 = <u64>load<u32>(lut + (<usize>c2 << alignof<u32>()));\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32));\n\n    digits1 = <u64>load<u32>(lut + (<usize>b1 << alignof<u32>()));\n    digits2 = <u64>load<u32>(lut + (<usize>b2 << alignof<u32>()));\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32));\n  }\n\n  utoa32_lut(buffer, <u32>num, offset);\n}\n\nfunction utoa_simple<T extends number>(buffer: usize, num: T, offset: usize): void {\n  do {\n    let t = num / 10;\n    let r = <u32>(num % 10);\n    num = changetype<T>(t);\n    offset -= 1;\n    store<u16>(buffer + (offset << 1), CharCode._0 + r);\n  } while (num);\n}\n\n// @ts-ignore: decorator\n@inline\nexport function utoa32_core(buffer: usize, num: u32, offset: u32): void {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    utoa_simple(buffer, num, offset);\n  } else {\n    utoa32_lut(buffer, num, offset);\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function utoa64_core(buffer: usize, num: u64, offset: u32): void {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    utoa_simple(buffer, num, offset);\n  } else {\n    utoa64_lut(buffer, num, offset);\n  }\n}\n\nexport function utoa32(value: u32): String {\n  if (!value) return \"0\";\n\n  var decimals = decimalCount32(value);\n  var out = __alloc(decimals << 1, idof<String>());\n\n  utoa32_core(out, value, decimals);\n  return changetype<String>(out); // retains\n}\n\nexport function itoa32(value: i32): String {\n  if (!value) return \"0\";\n\n  var sign = value < 0;\n  if (sign) value = -value;\n\n  var decimals = decimalCount32(value) + u32(sign);\n  var out = __alloc(decimals << 1, idof<String>());\n\n  utoa32_core(out, value, decimals);\n  if (sign) store<u16>(out, CharCode.MINUS);\n  return changetype<String>(out); // retains\n}\n\nexport function utoa64(value: u64): String {\n  if (!value) return \"0\";\n\n  var out: usize;\n  if (value <= u32.MAX_VALUE) {\n    let val32    = <u32>value;\n    let decimals = decimalCount32(val32);\n    out = __alloc(decimals << 1, idof<String>());\n    utoa32_core(out, val32, decimals);\n  } else {\n    let decimals = decimalCount64(value);\n    out = __alloc(decimals << 1, idof<String>());\n    utoa64_core(out, value, decimals);\n  }\n  return changetype<String>(out); // retains\n}\n\nexport function itoa64(value: i64): String {\n  if (!value) return \"0\";\n\n  var sign = value < 0;\n  if (sign) value = -value;\n\n  var out: usize;\n  if (<u64>value <= <u64>u32.MAX_VALUE) {\n    let val32    = <u32>value;\n    let decimals = decimalCount32(val32) + u32(sign);\n    out = __alloc(decimals << 1, idof<String>());\n    utoa32_core(out, val32, decimals);\n  } else {\n    let decimals = decimalCount64(value) + u32(sign);\n    out = __alloc(decimals << 1, idof<String>());\n    utoa64_core(out, value, decimals);\n  }\n  if (sign) store<u16>(out, CharCode.MINUS);\n\n  return changetype<String>(out); // retains\n}\n\nexport function itoa<T extends number>(value: T): String {\n  if (!isInteger<T>()) ERROR(\"integer type expected\");\n  if (isSigned<T>()) {\n    if (sizeof<T>() <= 4) {\n      return itoa32(<i32>value);\n    } else {\n      return itoa64(<i64>value);\n    }\n  } else {\n    if (sizeof<T>() <= 4) {\n      return utoa32(<u32>value);\n    } else {\n      return utoa64(<u64>value);\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@lazy\nvar _K: i32 = 0;\n\n// // @ts-ignore: decorator\n// @lazy\n// var _frc: u64 = 0;\n\n// @ts-ignore: decorator\n@lazy\nvar _exp: i32 = 0;\n\n// @ts-ignore: decorator\n@lazy\nvar _frc_minus: u64 = 0;\n\n// @ts-ignore: decorator\n@lazy\nvar _frc_plus:  u64 = 0;\n\n// @ts-ignore: decorator\n@lazy\nvar _frc_pow: u64 = 0;\n\n// @ts-ignore: decorator\n@lazy\nvar _exp_pow: i32 = 0;\n\n// @ts-ignore: decorator\n@inline\nfunction umul64f(u: u64, v: u64): u64 {\n  var u0 = u & 0xFFFFFFFF;\n  var v0 = v & 0xFFFFFFFF;\n\n  var u1 = u >> 32;\n  var v1 = v >> 32;\n\n  var l = u0 * v0;\n  var t = u1 * v0 + (l >> 32);\n  var w = u0 * v1 + (t & 0xFFFFFFFF);\n\n  w += 0x7FFFFFFF; // rounding\n\n  t >>= 32;\n  w >>= 32;\n\n  return u1 * v1 + t + w;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction umul64e(e1: i32, e2: i32): i32 {\n  return e1 + e2 + 64; // where 64 is significand size\n}\n\n// @ts-ignore: decorator\n@inline\nfunction normalizedBoundaries(f: u64, e: i32): void {\n  var frc = (f << 1) + 1;\n  var exp = e - 1;\n  var off = <i32>clz<u64>(frc);\n  frc <<= off;\n  exp  -= off;\n\n  var m = 1 + i32(f == 0x0010000000000000);\n\n  _frc_plus  = frc;\n  _frc_minus = ((f << m) - 1) << e - m - exp;\n  _exp = exp;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction grisuRound(buffer: usize, len: i32, delta: u64, rest: u64, ten_kappa: u64, wp_w: u64): void {\n  var lastp = buffer + ((len - 1) << 1);\n  var digit = load<u16>(lastp);\n  while (\n    rest < wp_w &&\n    delta - rest >= ten_kappa && (\n      rest + ten_kappa < wp_w ||\n      wp_w - rest > rest + ten_kappa - wp_w\n    )\n  ) {\n    --digit;\n    rest += ten_kappa;\n  }\n  store<u16>(lastp, digit);\n}\n\n// @ts-ignore: decorator\n@inline\nfunction getCachedPower(minExp: i32): void {\n  const c = reinterpret<f64>(0x3FD34413509F79FE); // 1 / lg(10) = 0.30102999566398114\n  var dk = (-61 - minExp) * c + 347;\t            // dk must be positive, so can do ceiling in positive\n  var k = <i32>dk;\n      k += i32(k != dk); // conversion with ceil\n\n  var index = (k >> 3) + 1;\n  _K = 348 - (index << 3);\t// decimal exponent no need lookup table\n  _frc_pow = unchecked(FRC_POWERS[index]);\n  _exp_pow = unchecked(<i32>EXP_POWERS[index]);\n}\n\n// @ts-ignore: decorator\n@inline\nfunction grisu2(value: f64, buffer: usize, sign: i32): i32 {\n\n  // frexp routine\n  var uv  = reinterpret<u64>(value);\n  var exp = <i32>((uv & 0x7FF0000000000000) >>> 52);\n  var sid = uv & 0x000FFFFFFFFFFFFF;\n  var frc = (u64(exp != 0) << 52) + sid;\n      exp = select<i32>(exp, 1, exp != 0) - (0x3FF + 52);\n\n  normalizedBoundaries(frc, exp);\n  getCachedPower(_exp);\n\n  // normalize\n  var off = <i32>clz<u64>(frc);\n  frc <<= off;\n  exp  -= off;\n\n  var frc_pow = _frc_pow;\n  var exp_pow = _exp_pow;\n\n  var w_frc = umul64f(frc, frc_pow);\n  var w_exp = umul64e(exp, exp_pow);\n\n  var wp_frc = umul64f(_frc_plus, frc_pow) - 1;\n  var wp_exp = umul64e(_exp,      exp_pow);\n\n  var wm_frc = umul64f(_frc_minus, frc_pow) + 1;\n  var delta  = wp_frc - wm_frc;\n\n  return genDigits(buffer, w_frc, w_exp, wp_frc, wp_exp, delta, sign);\n}\n\nfunction genDigits(buffer: usize, w_frc: u64, w_exp: i32, mp_frc: u64, mp_exp: i32, delta: u64, sign: i32): i32 {\n  var one_exp = -mp_exp;\n  var one_frc = (<u64>1) << one_exp;\n  var mask    = one_frc - 1;\n\n  var wp_w_frc = mp_frc - w_frc;\n  var wp_w_exp = mp_exp;\n\n  var p1 = <u32>(mp_frc >> one_exp);\n  var p2 = mp_frc & mask;\n\n  var kappa = <i32>decimalCount32(p1);\n  var len = sign;\n\n  var lut = changetype<ArrayBufferView>(POWERS10).dataStart;\n\n  while (kappa > 0) {\n    let d: u32;\n    switch (kappa) {\n      case 10: { d = p1 / 1000000000; p1 %= 1000000000; break; }\n      case  9: { d = p1 /  100000000; p1 %=  100000000; break; }\n      case  8: { d = p1 /   10000000; p1 %=   10000000; break; }\n      case  7: { d = p1 /    1000000; p1 %=    1000000; break; }\n      case  6: { d = p1 /     100000; p1 %=     100000; break; }\n      case  5: { d = p1 /      10000; p1 %=      10000; break; }\n      case  4: { d = p1 /       1000; p1 %=       1000; break; }\n      case  3: { d = p1 /        100; p1 %=        100; break; }\n      case  2: { d = p1 /         10; p1 %=         10; break; }\n      case  1: { d = p1;              p1 =           0; break; }\n      default: { d = 0; break; }\n    }\n\n    if (d | len) store<u16>(buffer + (len++ << 1), CharCode._0 + <u16>d);\n\n    --kappa;\n    let tmp = ((<u64>p1) << one_exp) + p2;\n    if (tmp <= delta) {\n      _K += kappa;\n      grisuRound(buffer, len, delta, tmp, <u64>load<u32>(lut + (<usize>kappa << alignof<u32>())) << one_exp, wp_w_frc);\n      return len;\n    }\n  }\n\n  while (1) {\n    p2    *= 10;\n    delta *= 10;\n\n    let d = p2 >> one_exp;\n    if (d | len) store<u16>(buffer + (len++ << 1), CharCode._0 + <u16>d);\n\n    p2 &= mask;\n    --kappa;\n    if (p2 < delta) {\n      _K += kappa;\n      wp_w_frc *= <u64>load<u32>(lut + (<usize>-kappa << alignof<u32>()));\n      grisuRound(buffer, len, delta, p2, one_frc, wp_w_frc);\n      return len;\n    }\n  }\n\n  return len;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction genExponent(buffer: usize, k: i32): i32 {\n  var sign = k < 0;\n  if (sign) k = -k;\n  var decimals = decimalCount32(k) + 1;\n  utoa32_core(buffer, k, decimals);\n  store<u16>(buffer, <u16>select<u32>(CharCode.MINUS, CharCode.PLUS, sign));\n  return decimals;\n}\n\nfunction prettify(buffer: usize, length: i32, k: i32): i32 {\n  if (!k) {\n    store<u32>(buffer + (length << 1), CharCode.DOT | (CharCode._0 << 16));\n    return length + 2;\n  }\n\n  var kk = length + k;\n  if (length <= kk && kk <= 21) {\n    // 1234e7 -> 12340000000\n    for (let i = length; i < kk; ++i) {\n      store<u16>(buffer + (i << 1), CharCode._0);\n    }\n    store<u32>(buffer + (kk << 1), CharCode.DOT | (CharCode._0 << 16));\n    return kk + 2;\n  } else if (kk > 0 && kk <= 21) {\n    // 1234e-2 -> 12.34\n    let ptr = buffer + (kk << 1);\n    memory.copy(\n      ptr + 2,\n      ptr,\n      -k << 1\n    );\n    store<u16>(buffer + (kk << 1), CharCode.DOT);\n    return length + 1;\n  } else if (-6 < kk && kk <= 0) {\n    // 1234e-6 -> 0.001234\n    let offset = 2 - kk;\n    memory.copy(\n      buffer + (offset << 1),\n      buffer,\n      length << 1\n    );\n    store<u32>(buffer, CharCode._0 | (CharCode.DOT << 16));\n    for (let i = 2; i < offset; ++i) {\n      store<u16>(buffer + (i << 1), CharCode._0);\n    }\n    return length + offset;\n  } else if (length == 1) {\n    // 1e30\n    store<u16>(buffer, CharCode.e, 2);\n    length = genExponent(buffer + 4, kk - 1);\n    return length + 2;\n  } else {\n    let len = length << 1;\n    memory.copy(\n      buffer + 4,\n      buffer + 2,\n      len - 2\n    );\n    store<u16>(buffer,       CharCode.DOT, 2);\n    store<u16>(buffer + len, CharCode.e,   2);\n    length += genExponent(buffer + len + 4, kk - 1);\n    return length + 2;\n  }\n}\n\nexport function dtoa_core(buffer: usize, value: f64): i32 {\n  var sign = i32(value < 0);\n  if (sign) {\n    value = -value;\n    store<u16>(buffer, CharCode.MINUS);\n  }\n  // assert(value > 0 && value <= 1.7976931348623157e308);\n  var len = grisu2(value, buffer, sign);\n      len = prettify(buffer + (sign << 1), len - sign, _K);\n  return len + sign;\n}\n\nexport function dtoa(value: f64): String {\n  if (value == 0) return \"0.0\";\n  if (!isFinite<f64>(value)) {\n    if (isNaN<f64>(value)) return \"NaN\";\n    return select<String>(\"-Infinity\", \"Infinity\", value < 0);\n  }\n  var buffer = __alloc(MAX_DOUBLE_LENGTH << 1, idof<String>());\n  var length = dtoa_core(buffer, value);\n  if (length == MAX_DOUBLE_LENGTH) return changetype<String>(buffer);\n  var result = changetype<String>(buffer).substring(0, length);\n  __free(buffer);\n  return result;\n}\n\nexport function itoa_stream<T extends number>(buffer: usize, offset: usize, value: T): u32 {\n  buffer += (offset << 1);\n  if (!value) {\n    store<u16>(buffer, CharCode._0);\n    return 1;\n  }\n  var decimals: u32 = 0;\n  if (isSigned<T>()) {\n    let sign = i32(value < 0);\n    if (sign) value = changetype<T>(-value);\n    if (sizeof<T>() <= 4) {\n      decimals = decimalCount32(value) + <u32>sign;\n      utoa32_core(buffer, value, decimals);\n    } else {\n      if (<u64>value <= <u64>u32.MAX_VALUE) {\n        let val32 = <u32>value;\n        decimals = decimalCount32(val32) + <u32>sign;\n        utoa32_core(buffer, val32, decimals);\n      } else {\n        decimals = decimalCount64(value) + <u32>sign;\n        utoa64_core(buffer, value, decimals);\n      }\n    }\n    if (sign) store<u16>(buffer, CharCode.MINUS);\n  } else {\n    if (sizeof<T>() <= 4) {\n      decimals = decimalCount32(value);\n      utoa32_core(buffer, value, decimals);\n    } else {\n      if (<u64>value <= <u64>u32.MAX_VALUE) {\n        let val32 = <u32>value;\n        decimals = decimalCount32(val32);\n        utoa32_core(buffer, val32, decimals);\n      } else {\n        decimals = decimalCount64(value);\n        utoa64_core(buffer, value, decimals);\n      }\n    }\n  }\n  return decimals;\n}\n\nexport function dtoa_stream(buffer: usize, offset: usize, value: f64): u32 {\n  buffer += (offset << 1);\n  if (value == 0.0) {\n    store<u16>(buffer, CharCode._0);\n    store<u16>(buffer, CharCode.DOT, 2);\n    store<u16>(buffer, CharCode._0,  4);\n    return 3;\n  }\n  if (!isFinite<f64>(value)) {\n    if (isNaN<f64>(value)) {\n      store<u16>(buffer, CharCode.N);\n      store<u16>(buffer, CharCode.a, 2);\n      store<u16>(buffer, CharCode.N, 4);\n      return 3;\n    } else {\n      let sign = i32(value < 0);\n      let len  = 8 + sign;\n      memory.copy(buffer, changetype<usize>(select<String>(\"-Infinity\", \"Infinity\", sign)), len << 1);\n      return len;\n    }\n  }\n  return dtoa_core(buffer, value);\n}\n","// @ts-ignore: decorator\n@builtin\nexport declare function isInteger<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isFloat<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isBoolean<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isSigned<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isReference<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isString<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isArray<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isArrayLike<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isFunction<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isNullable<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isDefined(expression: void): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isConstant(expression: void): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isManaged<T>(value?: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function clz<T>(value: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function ctz<T>(value: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function popcnt<T>(value: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function rotl<T>(value: T, shift: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function rotr<T>(value: T, shift: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function abs<T>(value: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function max<T>(left: T, right: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function min<T>(left: T, right: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function ceil<T>(value: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function floor<T>(value: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function copysign<T>(left: T, right: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function nearest<T>(value: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function reinterpret<T>(value: number): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function sqrt<T>(value: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function trunc<T>(value: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function load<T>(offset: usize, immOffset?: usize, immAlign?: usize): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function store<T>(offset: usize, value: void, immOffset?: usize, immAlign?: usize): void;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function sizeof<T>(): usize; // | u32 / u64\n\n// @ts-ignore: decorator\n@builtin\nexport declare function alignof<T>(): usize; // | u32 / u64\n\n// @ts-ignore: decorator\n@builtin\nexport declare function offsetof<T>(fieldName?: string): usize; // | u32 / u64\n\n// @ts-ignore: decorator\n@builtin\nexport declare function idof<T>(): u32;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function select<T>(ifTrue: T, ifFalse: T, condition: bool): T;\n\n// @ts-ignore: decorator\n@unsafe @builtin\nexport declare function unreachable(): void;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function changetype<T>(value: void): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function assert<T>(isTrueish: T, message?: string): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function unchecked<T>(expr: T): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function call_indirect<T>(target: void, ...args: void[]): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function call_direct<T>(target: void, ...args: void[]): T;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function instantiate<T>(...args: void[]): T;\n\nexport namespace atomic {\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load<T>(offset: usize, immOffset?: usize): T;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function store<T>(offset: usize, value: T, immOffset?: usize): void;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add<T>(ptr: usize, value: T, immOffset?: usize): T;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub<T>(ptr: usize, value: T, immOffset?: usize): T;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function and<T>(ptr: usize, value: T, immOffset?: usize): T;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function or<T>(ptr: usize, value: T, immOffset?: usize): T;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function xor<T>(ptr: usize, value: T, immOffset?: usize): T;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function xchg<T>(ptr: usize, value: T, immOffset?: usize): T;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function cmpxchg<T>(ptr: usize, expected: T, replacement: T, immOffset?: usize): T;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function wait<T>(ptr: usize, expected: T, timeout: i64): AtomicWaitResult;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function notify(ptr: usize, count: i32): i32;\n}\n\n// @ts-ignore: decorator\n@lazy\nexport const enum AtomicWaitResult {\n  OK = 0,\n  NOT_EQUAL = 1,\n  TIMED_OUT = 2\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function i8(value: void): i8;\n\nexport namespace i8 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: i8 = -128;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: i8 =  127;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function i16(value: void): i16;\n\nexport namespace i16 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: i16 = -32768;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: i16 =  32767;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function i32(value: void): i32;\n\nexport namespace i32 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: i32 = -2147483648;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: i32 =  2147483647;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function clz(value: i32): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ctz(value: i32): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function popcnt(value: i32): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function rotl(value: i32, shift: i32): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function rotr(value: i32, shift: i32): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function reinterpret_f32(value: f32): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load8_s(offset: usize, immOffset?: usize, immAlign?: usize): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load8_u(offset: usize, immOffset?: usize, immAlign?: usize): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load16_s(offset: usize, immOffset?: usize, immAlign?: usize): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load16_u(offset: usize, immOffset?: usize, immAlign?: usize): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load(offset: usize, immOffset?: usize, immAlign?: usize): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function store8(offset: usize, value: i32, immOffset?: usize, immAlign?: usize): void;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function store16(offset: usize, value: i32, immOffset?: usize, immAlign?: usize): void;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function store(offset: usize, value: i32, immOffset?: usize, immAlign?: usize): void;\n\n  export namespace atomic {\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function load8_u(offset: usize, immOffset?: usize): i32;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function load16_u(offset: usize, immOffset?: usize): i32;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function load(offset: usize, immOffset?: usize): i32;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function store8(offset: usize, value: i32, immOffset?: usize): void;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function store16(offset: usize, value: i32, immOffset?: usize): void;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function store(offset: usize, value: i32, immOffset?: usize): void;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function wait(ptr: usize, expected: i32, timeout: i64): AtomicWaitResult;\n\n    export namespace rmw8 {\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function add_u(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function sub_u(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function and_u(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function or_u(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xor_u(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xchg_u(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function cmpxchg_u(offset: usize, expected: i32, replacement: i32, immOffset?: usize): i32;\n    }\n\n    export namespace rmw16 {\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function add_u(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function sub_u(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function and_u(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function or_u(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xor_u(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xchg_u(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function cmpxchg_u(offset: usize, expected: i32, replacement: i32, immOffset?: usize): i32;\n    }\n\n    export namespace rmw {\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function add(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function sub(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function and(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function or(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xor(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xchg(offset: usize, value: i32, immOffset?: usize): i32;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function cmpxchg(offset: usize, expected: i32, replacement: i32, immOffset?: usize): i32;\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function i64(value: void): i64;\n\nexport namespace i64 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: i64 = -9223372036854775808;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: i64 =  9223372036854775807;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function clz(value: i64): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ctz(value: i64): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load8_s(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load8_u(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load16_s(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load16_u(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load32_s(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load32_u(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load(offset: usize, immOffset?: usize): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function popcnt(value: i64): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function rotl(value: i64, shift: i64): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function rotr(value: i64, shift: i64): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function reinterpret_f64(value: f64): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function store8(offset: usize, value: i64, immOffset?: usize, immAlign?: usize): void;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function store16(offset: usize, value: i64, immOffset?: usize, immAlign?: usize): void;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function store32(offset: usize, value: i64, immOffset?: usize, immAlign?: usize): void;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function store(offset: usize, value: i64, immOffset?: usize, immAlign?: usize): void;\n\n  export namespace atomic {\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function load8_u(offset: usize, immOffset?: usize): i64;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function load16_u(offset: usize, immOffset?: usize): i64;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function load32_u(offset: usize, immOffset?: usize): i64;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function load(offset: usize, immOffset?: usize): i64;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function store8(offset: usize, value: i64, immOffset?: usize): void;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function store16(offset: usize, value: i64, immOffset?: usize): void;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function store32(offset: usize, value: i64, immOffset?: usize): void;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function store(offset: usize, value: i64, immOffset?: usize): void;\n\n    // @ts-ignore: decorator\n    @builtin\n    export declare function wait(ptr: usize, expected: i64, timeout: i64): AtomicWaitResult;\n\n    export namespace rmw8 {\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function add_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function sub_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function and_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function or_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xor_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xchg_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function cmpxchg_u(offset: usize, expected: i64, replacement: i64, immOffset?: usize): i64;\n    }\n\n    export namespace rmw16 {\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function add_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function sub_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function and_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function or_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xor_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xchg_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function cmpxchg_u(offset: usize, expected: i64, replacement: i64, immOffset?: usize): i64;\n    }\n\n    export namespace rmw32 {\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function add_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function sub_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function and_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function or_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xor_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xchg_u(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function cmpxchg_u(offset: usize, expected: i64, replacement: i64, immOffset?: usize): i64;\n    }\n\n    export namespace rmw {\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function add(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function sub(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function and(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function or(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xor(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function xchg(offset: usize, value: i64, immOffset?: usize): i64;\n\n      // @ts-ignore: decorator\n      @builtin\n      export declare function cmpxchg(offset: usize, expected: i64, replacement: i64, immOffset?: usize): i64;\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isize(value: void): isize;\n\nexport namespace isize {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: isize = sizeof<i32>() == sizeof<isize>()\n    ? -2147483648\n    : <isize>-9223372036854775808;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: isize = sizeof<i32>() == sizeof<isize>()\n    ? 2147483647\n    : <isize>9223372036854775807;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function u8(value: void): u8;\n\nexport namespace u8 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: u8 = 0;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: u8 = 255;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function u16(value: void): u16;\n\nexport namespace u16 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: u16 = 0;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: u16 = 65535;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function u32(value: void): u32;\n\nexport namespace u32 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: u32 = 0;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: u32 = 4294967295;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function u64(value: void): u64;\n\nexport namespace u64 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: u64 = 0;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: u64 = 18446744073709551615;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function usize(value: void): usize;\n\nexport namespace usize {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: usize = 0;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: usize = sizeof<u32>() == sizeof<usize>()\n    ? 4294967295\n    : <usize>18446744073709551615;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function bool(value: void): bool;\n\nexport namespace bool {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE: bool = false;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE: bool = true;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function f32(value: void): f32;\n\nexport namespace f32 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const EPSILON = reinterpret<f32>(0x34000000); // 0x1p-23f\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE = reinterpret<f32>(0x00000001); // 0x0.000001p+0f\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE = reinterpret<f32>(0x7F7FFFFF); // 0x1.fffffep+127f\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_NORMAL_VALUE = reinterpret<f32>(0x00800000); // 0x1p-126f\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_SAFE_INTEGER: f32 = -16777215;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_SAFE_INTEGER: f32 =  16777215;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function abs(value: f32): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ceil(value: f32): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function copysign(x: f32, y: f32): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function floor(value: f32): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load(offset: usize, immOffset?: usize, immAlign?: usize): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function max(left: f32, right: f32): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function min(left: f32, right: f32): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function nearest(value: f32): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function reinterpret_i32(value: i32): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sqrt(value: f32): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function store(offset: usize, value: f32, immOffset?: usize, immAlign?: usize): void;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function trunc(value: f32): f32;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function f64(value: void): f64;\n\nexport namespace f64 {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const EPSILON = reinterpret<f64>(0x3CB0000000000000); // 0x1p-52\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_VALUE = reinterpret<f64>(0x0000000000000001); // 0x0.0000000000001p+0\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_VALUE = reinterpret<f64>(0x7FEFFFFFFFFFFFFF); // 0x1.fffffffffffffp+1023\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_NORMAL_VALUE = reinterpret<f64>(0x0010000000000000); // 0x1p-1022\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MIN_SAFE_INTEGER: f64 = -9007199254740991;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const MAX_SAFE_INTEGER: f64 =  9007199254740991;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function abs(value: f64): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ceil(value: f64): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function copysign(x: f64, y: f64): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function floor(value: f64): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load(offset: usize, immOffset?: usize, immAlign?: usize): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function max(left: f64, right: f64): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function min(left: f64, right: f64): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function nearest(value: f64): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function reinterpret_i64(value: i64): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sqrt(value: f64): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function store(offset: usize, value: f64, immOffset?: usize, immAlign?: usize): void;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function trunc(value: f64): f64;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function v128(\n  a: i8, b: i8, c: i8, d: i8, e: i8, f: i8, g: i8, h: i8,\n  i: i8, j: i8, k: i8, l: i8, m: i8, n: i8, o: i8, p: i8\n): v128;\n\nexport namespace v128 {\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function splat<T>(x: T): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane<T>(x: v128, idx: u8): T;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function replace_lane<T>(x: v128, idx: u8, value: T): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shuffle<T>(a: v128, b: v128, ...lanes: u8[]): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function load(offset: usize, immOffset?: usize, immAlign?: usize): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function store(offset: usize, value: v128, immOffset?: usize, immAlign?: usize): void;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function mul<T>(a: v128, b: v128): v128; // except i64\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function div<T>(a: v128, b: v128): v128; // f32, f64 only\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function neg<T>(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add_saturate<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub_saturate<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shl<T>(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr<T>(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function and(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function or(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function xor(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function not(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function bitselect(v1: v128, v2: v128, c: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function any_true<T>(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function all_true<T>(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function min<T>(a: v128, b: v128): v128; // f32, f64 only\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function max<T>(a: v128, b: v128): v128; // f32, f64 only\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function abs<T>(a: v128): v128; // f32, f64 only\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sqrt<T>(a: v128): v128; // f32, f64 only\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function eq<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ne<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge<T>(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function convert<T>(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function trunc<T>(a: v128): v128;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function i8x16(\n  a: i8, b: i8, c: i8, d: i8, e: i8, f: i8, g: i8, h: i8,\n  i: i8, j: i8, k: i8, l: i8, m: i8, n: i8, o: i8, p: i8\n): v128;\n\nexport namespace i8x16 {\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function splat(x: i8): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane_s(x: v128, idx: u8): i8;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane_u(x: v128, idx: u8): u8;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function replace_lane(x: v128, idx: u8, value: i8): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function mul(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function neg(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add_saturate_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add_saturate_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub_saturate_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub_saturate_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shl(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr_s(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr_u(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function any_true(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function all_true(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function eq(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ne(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge_u(a: v128, b: v128): v128;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function i16x8(a: i16, b: i16, c: i16, d: i16, e: i16, f: i16, g: i16, h: i16): v128;\n\nexport namespace i16x8 {\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function splat(x: i16): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane_s(x: v128, idx: u8): i16;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane_u(x: v128, idx: u8): u16;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function replace_lane(x: v128, idx: u8, value: i16): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function mul(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function neg(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add_saturate_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add_saturate_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub_saturate_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub_saturate_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shl(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr_s(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr_u(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function any_true(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function all_true(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function eq(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ne(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge_u(a: v128, b: v128): v128;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function i32x4(a: i32, b: i32, c: i32, d: i32): v128;\n\nexport namespace i32x4 {\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function splat(x: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane(x: v128, idx: u8): i32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function replace_lane(x: v128, idx: u8, value: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function mul(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function neg(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shl(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr_s(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr_u(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function any_true(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function all_true(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function eq(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ne(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge_s(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge_u(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function trunc_s_f32x4_sat(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function trunc_u_f32x4_sat(a: v128): v128;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function i64x2(a: i64, b: i64): v128;\n\nexport namespace i64x2 {\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function splat(x: i64): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane(x: v128, idx: u8): i64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function replace_lane(x: v128, idx: u8, value: i64): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function mul(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function neg(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shl(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr_s(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shr_u(a: v128, b: i32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function any_true(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function all_true(a: v128): bool;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function trunc_s_f64x2_sat(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function trunc_u_f64x2_sat(a: v128): v128;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function f32x4(a: f32, b: f32, c: f32, d: f32): v128;\n\nexport namespace f32x4 {\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function splat(x: f32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane(x: v128, idx: u8): f32;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function replace_lane(x: v128, idx: u8, value: f32): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function mul(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function div(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function neg(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function min(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function max(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function abs(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sqrt(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function eq(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ne(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function convert_s_i32x4(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function convert_u_i32x4(a: v128): v128;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare function f64x2(a: f64, b: f64): v128;\n\nexport namespace f64x2 {\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function splat(x: f64): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function extract_lane(x: v128, idx: u8): f64;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function replace_lane(x: v128, idx: u8, value: f64): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function add(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sub(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function mul(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function div(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function neg(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function min(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function max(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function abs(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function sqrt(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function eq(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ne(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function lt(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function le(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function gt(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function ge(a: v128, b: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function convert_s_i64x2(a: v128): v128;\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function convert_u_i64x2(a: v128): v128;\n}\n\nexport namespace v8x16 {\n\n  // @ts-ignore: decorator\n  @builtin\n  export declare function shuffle(\n    a: v128, b: v128,\n    l0: u8, l1: u8, l2: u8, l3: u8, l4: u8, l5: u8, l6: u8, l7: u8,\n    l8: u8, l9: u8, l10: u8, l11: u8, l12: u8, l13: u8, l14: u8, l15: u8\n  ): v128;\n}\n\n// @ts-ignore: decorator\n@external(\"env\", \"abort\")\ndeclare function abort(\n  message?: string | null,\n  fileName?: string | null,\n  lineNumber?: u32,\n  columnNumber?: u32\n): void;\n\n// @ts-ignore: decorator\n@external(\"env\", \"trace\")\ndeclare function trace(\n  message: string,\n  n?: i32,\n  a0?: f64,\n  a1?: f64,\n  a2?: f64,\n  a3?: f64,\n  a4?: f64\n): void;\n","/// <reference path=\"./rt/index.d.ts\" />\n\nimport { BLOCK_MAXSIZE } from \"./rt/common\";\nimport { COMPARATOR, SORT } from \"./util/sort\";\nimport { ArrayBuffer, ArrayBufferView } from \"./arraybuffer\";\nimport { itoa, dtoa, itoa_stream, dtoa_stream, MAX_DOUBLE_LENGTH } from \"./util/number\";\nimport { idof, isArray as builtin_isArray } from \"./builtins\";\nimport { E_INDEXOUTOFRANGE, E_INVALIDLENGTH, E_EMPTYARRAY, E_HOLEYARRAY } from \"./util/error\";\n\n/** Ensures that the given array has _at least_ the specified backing size. */\nfunction ensureSize(array: usize, minSize: usize, alignLog2: u32): void {\n  var oldCapacity = changetype<ArrayBufferView>(array).dataLength;\n  if (minSize > oldCapacity >>> alignLog2) {\n    if (minSize > BLOCK_MAXSIZE >>> alignLog2) throw new RangeError(E_INVALIDLENGTH);\n    let oldData = changetype<usize>(changetype<ArrayBufferView>(array).data);\n    let newCapacity = minSize << alignLog2;\n    let newData = __realloc(oldData, newCapacity);\n    memory.fill(newData + oldCapacity, 0, newCapacity - oldCapacity);\n    if (newData !== oldData) { // oldData has been free'd\n      store<usize>(changetype<usize>(array), __retain(newData), offsetof<ArrayBufferView>(\"data\"));\n      changetype<ArrayBufferView>(array).dataStart = newData;\n    }\n    changetype<ArrayBufferView>(array).dataLength = <u32>newCapacity;\n  }\n}\n\nexport class Array<T> extends ArrayBufferView {\n  [key: number]: T;\n\n  // Implementing ArrayBufferView isn't strictly necessary here but is done to allow glue code\n  // to work with typed and normal arrays interchangeably. Technically, normal arrays do not need\n  // `dataStart` (equals `data`) and `dataLength` (equals computed `data.byteLength`).\n\n  // Also note that Array<T> with non-nullable T must guard against implicit null values whenever\n  // length is modified in a way that a null value would exist. Otherwise, the compiler wouldn't be\n  // able to guarantee type-safety anymore. For lack of a better word, such an array is \"holey\".\n\n  private length_: i32;\n\n  static isArray<U>(value: U): bool {\n    return builtin_isArray(value) && value !== null;\n  }\n\n  static create<T>(capacity: i32 = 0): Array<T> {\n    if (<u32>capacity > <u32>BLOCK_MAXSIZE >>> alignof<T>()) throw new RangeError(E_INVALIDLENGTH);\n    var array = changetype<Array<T>>(__allocArray(capacity, alignof<T>(), idof<T[]>())); // retains\n    changetype<Array<T>>(array).length_ = 0; // safe even if T is a non-nullable reference\n    memory.fill(array.dataStart, 0, <usize>array.dataLength);\n    return array;\n  }\n\n  constructor(length: i32 = 0) {\n    super(length, alignof<T>());\n    if (isReference<T>()) {\n      if (!isNullable<T>()) {\n        if (length) throw new Error(E_HOLEYARRAY);\n      }\n    }\n    this.length_ = length;\n  }\n\n  @unsafe get buffer(): ArrayBuffer {\n    return this.data;\n  }\n\n  get length(): i32 {\n    return this.length_;\n  }\n\n  set length(newLength: i32) {\n    var oldLength = this.length_;\n    if (isReference<T>()) {\n      if (!isNullable<T>()) {\n        if (<u32>newLength > <u32>oldLength) throw new Error(E_HOLEYARRAY);\n      }\n    }\n    ensureSize(changetype<usize>(this), newLength, alignof<T>());\n    if (isManaged<T>()) { // release no longer used refs\n      if (oldLength > newLength) {\n        let dataStart = this.dataStart;\n        do __release(load<usize>(dataStart + (<usize>--oldLength << alignof<T>())));\n        while (oldLength > newLength);\n        // no need to zero memory on shrink -> is zeroed on grow\n      }\n    }\n    this.length_ = newLength;\n  }\n\n  every(fn: (value: T, index: i32, array: Array<T>) => bool): bool {\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      if (!fn(load<T>(this.dataStart + (<usize>index << alignof<T>())), index, this)) return false;\n    }\n    return true;\n  }\n\n  findIndex(predicate: (value: T, index: i32, array: Array<T>) => bool): i32 {\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      if (predicate(load<T>(this.dataStart + (<usize>index << alignof<T>())), index, this)) return index;\n    }\n    return -1;\n  }\n\n  @operator(\"[]\") private __get(index: i32): T {\n    if (isReference<T>()) {\n      if (!isNullable<T>()) {\n        if (<u32>index >= <u32>this.length_) throw new Error(E_HOLEYARRAY);\n      }\n    }\n    if (<u32>index >= <u32>this.dataLength >>> alignof<T>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return this.__unchecked_get(index);\n  }\n\n  @operator(\"{}\") private __unchecked_get(index: i32): T {\n    return load<T>(this.dataStart + (<usize>index << alignof<T>()));\n  }\n\n  @operator(\"[]=\") private __set(index: i32, value: T): void {\n    var length = this.length_;\n    if (isReference<T>()) {\n      if (!isNullable<T>()) {\n        if (<u32>index > <u32>length) throw new Error(E_HOLEYARRAY);\n      }\n    }\n    ensureSize(changetype<usize>(this), index + 1, alignof<T>());\n    this.__unchecked_set(index, value);\n    if (index >= length) this.length_ = index + 1;\n  }\n\n  @operator(\"{}=\") private __unchecked_set(index: i32, value: T): void {\n    if (isManaged<T>()) {\n      let offset = this.dataStart + (<usize>index << alignof<T>());\n      let oldRef: usize = load<usize>(offset);\n      if (changetype<usize>(value) != oldRef) {\n        store<usize>(offset, __retain(changetype<usize>(value)));\n        __release(oldRef);\n      }\n    } else {\n      store<T>(this.dataStart + (<usize>index << alignof<T>()), value);\n    }\n  }\n\n  fill(value: T, start: i32 = 0, end: i32 = i32.MAX_VALUE): this {\n    var dataStart = this.dataStart;\n    var length = this.length_;\n    start = start < 0 ? max(length + start, 0) : min(start, length);\n    end   = end   < 0 ? max(length + end,   0) : min(end,   length);\n    if (isManaged<T>()) {\n      for (; start < end; ++start) {\n        let oldRef: usize = load<usize>(dataStart + (<usize>start << alignof<T>()));\n        if (changetype<usize>(value) != oldRef) {\n          store<usize>(dataStart + (<usize>start << alignof<T>()), __retain(changetype<usize>(value)));\n          __release(oldRef);\n        }\n      }\n    } else if (sizeof<T>() == 1) {\n      if (start < end) {\n        memory.fill(\n          dataStart + <usize>start,\n          u8(value),\n          <usize>(end - start)\n        );\n      }\n    } else {\n      for (; start < end; ++start) {\n        store<T>(dataStart + (<usize>start << alignof<T>()), value);\n      }\n    }\n    return this;\n  }\n\n  includes(value: T, fromIndex: i32 = 0): bool {\n    return this.indexOf(value, fromIndex) >= 0;\n  }\n\n  indexOf(value: T, fromIndex: i32 = 0): i32 {\n    var length = this.length_;\n    if (length == 0 || fromIndex >= length) return -1;\n    if (fromIndex < 0) fromIndex = max(length + fromIndex, 0);\n    var dataStart = this.dataStart;\n    while (fromIndex < length) {\n      if (load<T>(dataStart + (<usize>fromIndex << alignof<T>())) == value) return fromIndex;\n      ++fromIndex;\n    }\n    return -1;\n  }\n\n  lastIndexOf(value: T, fromIndex: i32 = this.length_): i32 {\n    var length = this.length_;\n    if (length == 0) return -1;\n    if (fromIndex < 0) fromIndex = length + fromIndex;\n    else if (fromIndex >= length) fromIndex = length - 1;\n    var dataStart = this.dataStart;\n    while (fromIndex >= 0) {\n      if (load<T>(dataStart + (<usize>fromIndex << alignof<T>())) == value) return fromIndex;\n      --fromIndex;\n    }\n    return -1;\n  }\n\n  push(value: T): i32 {\n    var length = this.length_;\n    var newLength = length + 1;\n    ensureSize(changetype<usize>(this), newLength, alignof<T>());\n    if (isManaged<T>()) {\n      store<usize>(this.dataStart + (<usize>length << alignof<T>()), __retain(changetype<usize>(value)));\n    } else {\n      store<T>(this.dataStart + (<usize>length << alignof<T>()), value);\n    }\n    this.length_ = newLength;\n    return newLength;\n  }\n\n  concat(other: Array<T>): Array<T> {\n    var thisLen = this.length_;\n    var otherLen = select(0, other.length_, other === null);\n    var outLen = thisLen + otherLen;\n    if (<u32>outLen > <u32>BLOCK_MAXSIZE >>> alignof<T>()) throw new Error(E_INVALIDLENGTH);\n    var out = changetype<Array<T>>(__allocArray(outLen, alignof<T>(), idof<Array<T>>())); // retains\n    var outStart = out.dataStart;\n    var thisSize = <usize>thisLen << alignof<T>();\n    if (isManaged<T>()) {\n      let thisStart = this.dataStart;\n      for (let offset: usize = 0; offset < thisSize; offset += sizeof<T>()) {\n        let ref = load<usize>(thisStart + offset);\n        store<usize>(outStart + offset, __retain(ref));\n      }\n      outStart += thisSize;\n      let otherStart = other.dataStart;\n      let otherSize = <usize>otherLen << alignof<T>();\n      for (let offset: usize = 0; offset < otherSize; offset += sizeof<T>()) {\n        let ref = load<usize>(otherStart + offset);\n        store<usize>(outStart + offset, __retain(ref));\n      }\n    } else {\n      memory.copy(outStart, this.dataStart, thisSize);\n      memory.copy(outStart + thisSize, other.dataStart, <usize>otherLen << alignof<T>());\n    }\n    return out;\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): this {\n    var dataStart = this.dataStart;\n    var len = this.length_;\n\n        end   = min<i32>(end, len);\n    var to    = target < 0 ? max(len + target, 0) : min(target, len);\n    var from  = start < 0 ? max(len + start, 0) : min(start, len);\n    var last  = end < 0 ? max(len + end, 0) : min(end, len);\n    var count = min(last - from, len - to);\n\n    if (isManaged<T>()) {\n      if (from < to && to < (from + count)) { // right to left\n        from += count - 1;\n        to   += count - 1;\n        while (count) {\n          let oldRef: usize = load<usize>(dataStart + (<usize>to << alignof<T>()));\n          let newRef: usize = load<usize>(dataStart + (<usize>from << alignof<T>()));\n          if (newRef != oldRef) {\n            store<usize>(dataStart + (<usize>to << alignof<T>()), __retain(newRef));\n            __release(oldRef);\n          }\n          --from, --to, --count;\n        }\n      } else { // left to right\n        while (count) {\n          let oldRef: usize = load<usize>(dataStart + (<usize>to << alignof<T>()));\n          let newRef: usize = load<usize>(dataStart + (<usize>from << alignof<T>()));\n          if (newRef != oldRef) {\n            store<usize>(dataStart + (<usize>to << alignof<T>()), __retain(newRef));\n            __release(oldRef);\n          }\n          ++from, ++to, --count;\n        }\n      }\n    } else {\n      memory.copy( // is memmove\n        dataStart + (<usize>to << alignof<T>()),\n        dataStart + (<usize>from << alignof<T>()),\n        <usize>count << alignof<T>()\n      );\n    }\n    return this;\n  }\n\n  pop(): T {\n    var length = this.length_;\n    if (length < 1) throw new RangeError(E_EMPTYARRAY);\n    var element = load<T>(this.dataStart + (<usize>(--length) << alignof<T>()));\n    this.length_ = length;\n    return element; // no need to retain -> is moved\n  }\n\n  forEach(fn: (value: T, index: i32, array: Array<T>) => void): void {\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      fn(load<T>(this.dataStart + (<usize>index << alignof<T>())), index, this);\n    }\n  }\n\n  map<U>(fn: (value: T, index: i32, array: Array<T>) => U): Array<U> {\n    var length = this.length_;\n    var out = changetype<Array<U>>(__allocArray(length, alignof<U>(), idof<Array<U>>())); // retains\n    var outStart = out.dataStart;\n    for (let index = 0; index < min(length, this.length_); ++index) {\n      let result = fn(load<T>(this.dataStart + (<usize>index << alignof<T>())), index, this); // retains\n      if (isManaged<U>()) {\n        store<usize>(outStart + (<usize>index << alignof<U>()), __retain(changetype<usize>(result)));\n      } else {\n        store<U>(outStart + (<usize>index << alignof<U>()), result);\n      }\n      // releases result\n    }\n    return out;\n  }\n\n  filter(fn: (value: T, index: i32, array: Array<T>) => bool): Array<T> {\n    var result = changetype<Array<T>>(__allocArray(0, alignof<T>(), idof<Array<T>>())); // retains\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      let value = load<T>(this.dataStart + (<usize>index << alignof<T>()));\n      if (fn(value, index, this)) result.push(value);\n    }\n    return result;\n  }\n\n  reduce<U>(\n    fn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\n    initialValue: U\n  ): U {\n    var accum = initialValue;\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      accum = fn(accum, load<T>(this.dataStart + (<usize>index << alignof<T>())), index, this);\n    }\n    return accum;\n  }\n\n  reduceRight<U>(\n    fn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\n    initialValue: U\n  ): U {\n    var accum = initialValue;\n    for (let index = this.length_ - 1; index >= 0; --index) {\n      accum = fn(accum, load<T>(this.dataStart + (<usize>index << alignof<T>())), index, this);\n    }\n    return accum;\n  }\n\n  shift(): T {\n    var length = this.length_;\n    if (length < 1) throw new RangeError(E_EMPTYARRAY);\n    var base = this.dataStart;\n    var element = load<T>(base);\n    var lastIndex = length - 1;\n    memory.copy(\n      base,\n      base + sizeof<T>(),\n      <usize>lastIndex << alignof<T>()\n    );\n    store<T>(base + (<usize>lastIndex << alignof<T>()),\n      // @ts-ignore: cast\n      <T>null\n    );\n    this.length_ = lastIndex;\n    return element; // no need to retain -> is moved\n  }\n\n  some(fn: (value: T, index: i32, array: Array<T>) => bool): bool {\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      if (fn(load<T>(this.dataStart + (<usize>index << alignof<T>())), index, this)) return true;\n    }\n    return false;\n  }\n\n  unshift(value: T): i32 {\n    var newLength = this.length_ + 1;\n    ensureSize(changetype<usize>(this), newLength, alignof<T>());\n    var dataStart = this.dataStart;\n    memory.copy(\n      dataStart + sizeof<T>(),\n      dataStart,\n      <usize>(newLength - 1) << alignof<T>()\n    );\n    if (isManaged<T>()) {\n      store<usize>(dataStart, __retain(changetype<usize>(value)));\n    } else {\n      store<T>(dataStart, value);\n    }\n    this.length_ = newLength;\n    return newLength;\n  }\n\n  slice(start: i32 = 0, end: i32 = i32.MAX_VALUE): Array<T> {\n    var length = this.length_;\n    start = start < 0 ? max(start + length, 0) : min(start, length);\n    end   = end   < 0 ? max(end   + length, 0) : min(end  , length);\n    length = max(end - start, 0);\n    var slice = changetype<Array<T>>(__allocArray(length, alignof<T>(), idof<Array<T>>())); // retains\n    var sliceBase = slice.dataStart;\n    var thisBase = this.dataStart + (<usize>start << alignof<T>());\n    if (isManaged<T>()) {\n      let off = <usize>0;\n      let end = <usize>length << alignof<usize>();\n      while (off < end) {\n        let ref = load<usize>(thisBase + off);\n        store<usize>(sliceBase + off, __retain(ref));\n        off += sizeof<usize>();\n      }\n    } else {\n      memory.copy(sliceBase, thisBase, length << alignof<T>());\n    }\n    return slice;\n  }\n\n  splice(start: i32, deleteCount: i32 = i32.MAX_VALUE): Array<T> {\n    var length  = this.length_;\n    start       = start < 0 ? max<i32>(length + start, 0) : min<i32>(start, length);\n    deleteCount = max<i32>(min<i32>(deleteCount, length - start), 0);\n    var result = changetype<Array<T>>(__allocArray(deleteCount, alignof<T>(), idof<Array<T>>())); // retains\n    var resultStart = result.dataStart;\n    var thisStart = this.dataStart;\n    var thisBase  = thisStart + (<usize>start << alignof<T>());\n    if (isManaged<T>()) {\n      for (let i = 0; i < deleteCount; ++i) {\n        store<usize>(resultStart + (<usize>i << alignof<T>()),\n          load<usize>(thisBase + (<usize>i << alignof<T>()))\n        );\n        // no need to retain -> is moved\n      }\n    } else {\n      memory.copy(\n        resultStart,\n        thisBase,\n        <usize>deleteCount << alignof<T>()\n      );\n    }\n    var offset = start + deleteCount;\n    if (length != offset) {\n      memory.copy(\n        thisBase,\n        thisStart + (<usize>offset << alignof<T>()),\n        <usize>(length - offset) << alignof<T>()\n      );\n    }\n    this.length_ = length - deleteCount;\n    return result;\n  }\n\n  reverse(): Array<T> {\n    var length = this.length_;\n    if (length) {\n      let front = this.dataStart;\n      let back = this.dataStart + (<usize>(length - 1) << alignof<T>());\n      while (front < back) {\n        let temp = load<T>(front);\n        store<T>(front, load<T>(back));\n        store<T>(back, temp);\n        front += sizeof<T>();\n        back -= sizeof<T>();\n      }\n    }\n    return this;\n  }\n\n  sort(comparator: (a: T, b: T) => i32 = COMPARATOR<T>()): this {\n    var length = this.length_;\n    if (length <= 1) return this;\n    var base = this.dataStart;\n    if (length == 2) {\n      let a: T = load<T>(base, sizeof<T>()); // a = arr[1]\n      let b: T = load<T>(base); // b = arr[0]\n      if (comparator(a, b) < 0) {\n        store<T>(base, b, sizeof<T>()); // arr[1] = b;\n        store<T>(base, a); // arr[0] = a;\n      }\n      return this;\n    }\n    SORT<T>(base, length, comparator);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    if (isBoolean<T>()) return this.join_bool(separator);\n    if (isInteger<T>()) return this.join_int(separator);\n    if (isFloat<T>()) return this.join_flt(separator);\n    if (isString<T>()) return this.join_str(separator);\n    if (isArray<T>()) return this.join_arr(separator);\n    if (isReference<T>()) return this.join_ref(separator);\n    ERROR(\"unspported element type\");\n    return <string>unreachable();\n  }\n\n  private join_bool(separator: string = \",\"): string {\n    var lastIndex = this.length_ - 1;\n    if (lastIndex < 0) return \"\";\n    var dataStart = this.dataStart;\n    if (!lastIndex) return select(\"true\", \"false\", load<bool>(dataStart));\n\n    var sepLen = separator.length;\n    var valueLen = 5; // max possible length of element len(\"false\")\n    var estLen = (valueLen + sepLen) * lastIndex + valueLen;\n    var result = changetype<string>(__alloc(estLen << 1, idof<string>())); // retains\n    var offset = 0;\n    var value: bool;\n    for (let i = 0; i < lastIndex; ++i) {\n      value = load<bool>(dataStart + i);\n      valueLen = 4 + i32(!value);\n      memory.copy(\n        changetype<usize>(result) + (<usize>offset << 1),\n        changetype<usize>(select(\"true\", \"false\", value)),\n        <usize>valueLen << 1\n      );\n      offset += valueLen;\n      if (sepLen) {\n        memory.copy(\n          changetype<usize>(result) + (<usize>offset << 1),\n          changetype<usize>(separator),\n          <usize>sepLen << 1\n        );\n        offset += sepLen;\n      }\n    }\n    value = load<bool>(dataStart + <usize>lastIndex);\n    valueLen = 4 + i32(!value);\n    memory.copy(\n      changetype<usize>(result) + (<usize>offset << 1),\n      changetype<usize>(select(\"true\", \"false\", value)),\n      valueLen << 1\n    );\n    offset += valueLen;\n\n    if (estLen > offset) return result.substring(0, offset);\n    return result;\n  }\n\n  private join_int(separator: string = \",\"): string {\n    var lastIndex = this.length_ - 1;\n    if (lastIndex < 0) return \"\";\n    var dataStart = this.dataStart;\n    // @ts-ignore: type\n    if (!lastIndex) return changetype<string>(itoa<T>(load<T>(dataStart))); // retains\n\n    var sepLen = separator.length;\n    const valueLen = (sizeof<T>() <= 4 ? 10 : 20) + i32(isSigned<T>());\n    var estLen = (valueLen + sepLen) * lastIndex + valueLen;\n    var result = changetype<string>(__alloc(estLen << 1, idof<string>())); // retains\n    var offset = 0;\n    var value: T;\n    for (let i = 0; i < lastIndex; ++i) {\n      value = load<T>(dataStart + (<usize>i << alignof<T>()));\n      // @ts-ignore: type\n      offset += itoa_stream<T>(changetype<usize>(result), offset, value);\n      if (sepLen) {\n        memory.copy(\n          changetype<usize>(result) + (<usize>offset << 1),\n          changetype<usize>(separator),\n          <usize>sepLen << 1\n        );\n        offset += sepLen;\n      }\n    }\n    value = load<T>(dataStart + (<usize>lastIndex << alignof<T>()));\n    // @ts-ignore: type\n    offset += itoa_stream<T>(changetype<usize>(result), offset, value);\n    if (estLen > offset) return result.substring(0, offset);\n    return result;\n  }\n\n  private join_flt(separator: string = \",\"): string {\n    var lastIndex = this.length_ - 1;\n    if (lastIndex < 0) return \"\";\n    var dataStart = this.dataStart;\n    if (!lastIndex) {\n      return changetype<string>(dtoa(\n        // @ts-ignore: type\n        load<T>(dataStart))\n      ); // retains\n    }\n\n    const valueLen = MAX_DOUBLE_LENGTH;\n    var sepLen = separator.length;\n    var estLen = (valueLen + sepLen) * lastIndex + valueLen;\n    var result = changetype<string>(__alloc(estLen << 1, idof<string>())); // retains\n    var offset = 0;\n    var value: T;\n    for (let i = 0; i < lastIndex; ++i) {\n      value = load<T>(dataStart + (<usize>i << alignof<T>()));\n      offset += dtoa_stream(changetype<usize>(result), offset,\n        // @ts-ignore: type\n        value\n      );\n      if (sepLen) {\n        memory.copy(\n          changetype<usize>(result) + (<usize>offset << 1),\n          changetype<usize>(separator),\n          <usize>sepLen << 1\n        );\n        offset += sepLen;\n      }\n    }\n    value = load<T>(dataStart + (<usize>lastIndex << alignof<T>()));\n    offset += dtoa_stream(changetype<usize>(result), offset,\n      // @ts-ignore: type\n      value\n    );\n    if (estLen > offset) return result.substring(0, offset);\n    return result;\n  }\n\n  private join_str(separator: string = \",\"): string {\n    var lastIndex = this.length_ - 1;\n    if (lastIndex < 0) return \"\";\n    var dataStart = this.dataStart;\n    if (!lastIndex) return load<string>(dataStart);\n\n    var sepLen = separator.length;\n    var estLen = 0;\n    var value: string | null;\n    for (let i = 0, len = lastIndex + 1; i < len; ++i) {\n      value = load<string>(dataStart + (<usize>i << alignof<T>()));\n      if (value !== null) estLen += value.length;\n    }\n    var offset = 0;\n    var result = changetype<string>(__alloc((estLen + sepLen * lastIndex) << 1, idof<string>())); // retains\n    for (let i = 0; i < lastIndex; ++i) {\n      value = load<string>(dataStart + (<usize>i << alignof<T>()));\n      if (value !== null) {\n        let valueLen = changetype<string>(value).length;\n        memory.copy(\n          changetype<usize>(result) + (<usize>offset << 1),\n          changetype<usize>(value),\n          <usize>valueLen << 1\n        );\n        offset += valueLen;\n      }\n      if (sepLen) {\n        memory.copy(\n          changetype<usize>(result) + (<usize>offset << 1),\n          changetype<usize>(separator),\n          <usize>sepLen << 1\n        );\n        offset += sepLen;\n      }\n    }\n    value = load<string>(dataStart + (<usize>lastIndex << alignof<T>()));\n    if (value !== null) {\n      memory.copy(\n        changetype<usize>(result) + (<usize>offset << 1),\n        changetype<usize>(value),\n        <usize>changetype<string>(value).length << 1\n      );\n    }\n    return result;\n  }\n\n  private join_arr(separator: string = \",\"): string {\n    var lastIndex = this.length_ - 1;\n    if (lastIndex < 0) return \"\";\n\n    var result = \"\";\n    var sepLen = separator.length;\n    var base = this.dataStart;\n    var value: T;\n    if (!lastIndex) {\n      value = load<T>(base);\n      // @ts-ignore: type\n      return value ? value.join(separator) : \"\";\n    }\n    for (let i = 0; i < lastIndex; ++i) {\n      value = load<T>(base + (<usize>i << alignof<T>()));\n      // @ts-ignore: type\n      if (value) result += value.join(separator);\n      if (sepLen) result += separator;\n    }\n    value = load<T>(base + (<usize>lastIndex << alignof<T>()));\n    // @ts-ignore: type\n    if (value) result += value.join(separator);\n    return result; // registered by concatenation (FIXME: lots of garbage)\n  }\n\n  private join_ref(separator: string = \",\"): string {\n    var lastIndex = this.length_ - 1;\n    if (lastIndex < 0) return \"\";\n    var base = this.dataStart;\n    if (!lastIndex) return \"[object Object]\";\n\n    const valueLen = 15; // max possible length of element len(\"[object Object]\")\n    var sepLen = separator.length;\n    var estLen = (valueLen + sepLen) * lastIndex + valueLen;\n    var result = changetype<string>(__alloc(estLen << 1, idof<string>()));\n    var offset = 0;\n    var value: T;\n    for (let i = 0; i < lastIndex; ++i) {\n      value = load<T>(base + (<usize>i << alignof<T>()));\n      if (value) {\n        memory.copy(\n          changetype<usize>(result) + (<usize>offset << 1),\n          changetype<usize>(\"[object Object]\"),\n          <usize>valueLen << 1\n        );\n        offset += valueLen;\n      }\n      if (sepLen) {\n        memory.copy(\n          changetype<usize>(result) + (<usize>offset << 1),\n          changetype<usize>(separator),\n          <usize>sepLen << 1\n        );\n        offset += sepLen;\n      }\n    }\n    if (load<T>(base + (<usize>lastIndex << alignof<T>()))) {\n      memory.copy(\n        changetype<usize>(result) + (<usize>offset << 1),\n        changetype<usize>(\"[object Object]\"),\n        <usize>valueLen << 1\n      );\n      offset += valueLen;\n    }\n    if (estLen > offset) return result.substring(0, offset);\n    return result;\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  // RT integration\n\n  @unsafe private __visit_impl(cookie: u32): void {\n    if (isManaged<T>()) {\n      let cur = this.dataStart;\n      let end = cur + (<usize>this.length_ << alignof<T>());\n      while (cur < end) {\n        let val = load<usize>(cur);\n        if (val) __visit(val, cookie);\n        cur += sizeof<usize>();\n      }\n    }\n    // automatically visits ArrayBufferView (.data) next\n  }\n}\n","import { Typeinfo, TypeinfoFlags } from \"./shared/typeinfo\";\nimport { E_INDEXOUTOFRANGE } from \"./util/error\";\nimport { BLOCK, BLOCK_OVERHEAD } from \"./rt/common\";\nimport { ArrayBufferView } from \"./arraybuffer\";\n\n// @ts-ignore: decorator\n@builtin\nexport declare const __rtti_base: usize;\n\n// @ts-ignore: decorator\n@builtin @unsafe\nexport declare function __visit_globals(cookie: u32): void;\n\n// @ts-ignore: decorator\n@builtin @unsafe\nexport declare function __visit_members(ref: usize, cookie: u32): void;\n\n// @ts-ignore: decorator\n@unsafe\nexport function __typeinfo(id: u32): TypeinfoFlags {\n  var ptr = __rtti_base;\n  if (id > load<u32>(ptr)) throw new Error(E_INDEXOUTOFRANGE);\n  return changetype<Typeinfo>(ptr + sizeof<u32>() + id * offsetof<Typeinfo>()).flags;\n}\n\n// @ts-ignore: decorator\n@unsafe\nexport function __instanceof(ref: usize, superId: u32): bool { // keyword\n  var id = changetype<BLOCK>(ref - BLOCK_OVERHEAD).rtId;\n  var ptr = __rtti_base;\n  if (id <= load<u32>(ptr)) {\n    do if (id == superId) return true;\n    while (id = changetype<Typeinfo>(ptr + sizeof<u32>() + id * offsetof<Typeinfo>()).base);\n  }\n  return false;\n}\n\n// @ts-ignore: decorator\n@unsafe\nexport function __allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize {\n  var array = __alloc(offsetof<i32[]>(), id);\n  var bufferSize = <usize>length << alignLog2;\n  var buffer = __alloc(bufferSize, idof<ArrayBuffer>());\n  store<usize>(array, __retain(buffer), offsetof<ArrayBufferView>(\"data\"));\n  changetype<ArrayBufferView>(array).dataStart = buffer;\n  changetype<ArrayBufferView>(array).dataLength = bufferSize;\n  store<i32>(changetype<usize>(array), length, offsetof<i32[]>(\"length_\"));\n  if (data) memory.copy(buffer, data, bufferSize);\n  return array;\n}\n\n// These are provided by the respective implementation, included as another entry file by asc:\n\n// @builtin @unsafe\n// export declare function __alloc(size: usize, id: u32): usize;\n\n// // @ts-ignore: decorator\n// @builtin @unsafe\n// export declare function __realloc(ref: usize, size: usize): usize;\n\n// // @ts-ignore: decorator\n// @builtin @unsafe\n// export declare function __free(ref: usize): void;\n\n// // @ts-ignore: decorator\n// @builtin @unsafe\n// export declare function __retain(ref: usize): usize;\n\n// // @ts-ignore: decorator\n// @builtin @unsafe\n// export declare function __release(ref: usize): void;\n\n// // @ts-ignore: decorator\n// @builtin @unsafe\n// export declare function __collect(): void;\n\n// // @ts-ignore: decorator\n// @builtin @unsafe\n// export declare function __visit(ref: usize, cookie: u32): void;\n","declare function logStr(str: string): void;\ndeclare function logF64(val: f64): void;\n\nexport class JSONEncoder {\n    private isFirstKey: bool[] = new Array<bool>(1);\n    private result: string[] = new Array<string>();\n\n    constructor() {\n      this.isFirstKey[0] = true;\n    }\n\n    serialize(): Uint8Array {\n        // TODO: Write directly to UTF8 bytes\n        let result = this.toString();\n        let utf8ptr = result.toUTF8();\n        let buffer = new Uint8Array(result.lengthUTF8 - 1);\n        memory.copy(<usize>buffer.buffer, utf8ptr, buffer.byteLength);\n        return buffer;\n    }\n\n    toString(): String {\n        return this.result.join(\"\");\n    }\n\n    setString(name: string, value: string): void {\n        this.writeKey(name);\n        this.writeString(value);\n    }\n\n    setBoolean(name: string, value: bool): void {\n        this.writeKey(name);\n        this.writeBoolean(value);\n    }\n\n    setNull(name: string): void {\n        this.writeKey(name);\n        this.write(\"null\");\n    }\n\n    setInteger(name: string, value: i64): void {\n        this.writeKey(name);\n        this.writeInteger(value);\n    }\n\n    pushArray(name: string): bool {\n        this.writeKey(name);\n        this.write(\"[\");\n        this.isFirstKey.push(true);\n        return true;\n    }\n\n    popArray(): void {\n        this.write(\"]\");\n        this.isFirstKey.pop();\n    }\n\n    pushObject(name: string): bool {\n        this.writeKey(name);\n        this.write(\"{\");\n        this.isFirstKey.push(true);\n        return true;\n    }\n\n    popObject(): void {\n        this.write(\"}\");\n        this.isFirstKey.pop();\n    }\n\n    private writeKey(str: string): void {\n        if (!this.isFirstKey[this.isFirstKey.length - 1]) {\n            this.write(\",\");\n        } else {\n            this.isFirstKey[this.isFirstKey.length - 1] = false;\n        }\n        if (str != null) {\n            this.writeString(str);\n            this.write(\":\");\n        }\n    }\n\n    private writeString(str: string): void {\n        this.write('\"');\n        let savedIndex = 0;\n        for (let i = 0; i < str.length; i++) {\n            let char = str.charCodeAt(i);\n            let needsEscaping = char < 0x20 || char == '\"'.charCodeAt(0) || char == '\\\\'.charCodeAt(0);\n            if (needsEscaping) {\n                this.write(str.substring(savedIndex, i));\n                savedIndex = i + 1;\n                if (char == '\"'.charCodeAt(0)) {\n                    this.write('\\\\\"');\n                } else if (char == \"\\\\\".charCodeAt(0)) {\n                    this.write(\"\\\\\\\\\");\n                } else if (char == \"\\b\".charCodeAt(0)) {\n                    this.write(\"\\\\b\");\n                } else if (char == \"\\n\".charCodeAt(0)) {\n                    this.write(\"\\\\n\");\n                } else if (char == \"\\r\".charCodeAt(0)) {\n                    this.write(\"\\\\r\");\n                } else if (char == \"\\t\".charCodeAt(0)) {\n                    this.write(\"\\\\t\");\n                } else {\n                    // TODO: Implement encoding for other contol characters\n                    assert(false, \"Unsupported control character code: \" + char.toString());\n                }\n            }\n        }\n        this.write(str.substring(savedIndex, str.length));\n        this.write('\"');\n    }\n\n    private writeBoolean(value: bool): void {\n        this.write(value ? \"true\" : \"false\");\n    }\n\n    private writeInteger(value: i64): void {\n        this.write(value.toString());\n    }\n\n    private write(str: string): void {\n        this.result.push(str);\n    }\n}\n"]}